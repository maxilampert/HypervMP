<?xml version="1.0" encoding="utf-8"?>
<ManagementPack SchemaVersion="2.0" ContentReadable="true" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <Manifest>
    <Identity>
      <ID>QND.Hyperv2012R2</ID>
      <Version>1.1.0.110</Version>
    </Identity>
    <Name>QND.Hyperv2012R2</Name>
    <References>
      <Reference Alias="MSDL">
        <ID>Microsoft.SystemCenter.DataWarehouse.Library</ID>
        <Version>7.1.10226.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="MSIL">
        <ID>Microsoft.SystemCenter.InstanceGroup.Library</ID>
        <Version>7.5.8501.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="SC">
        <ID>Microsoft.SystemCenter.Library</ID>
        <Version>7.0.8433.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="MSVCL">
        <ID>Microsoft.SystemCenter.Visualization.Component.Library</ID>
        <Version>7.1.10226.1239</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="Configuration">
        <ID>Microsoft.SystemCenter.Visualization.Configuration.Library</ID>
        <Version>7.1.10226.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="VMMDash">
        <ID>Microsoft.SystemCenter.VMMHostVM.Visualization.Components</ID>
        <Version>1.1.41.91</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="Cluster">
        <ID>Microsoft.Windows.Cluster.Library</ID>
        <Version>7.0.8433.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="Hyperv2012R2">
        <ID>Microsoft.Windows.HyperV.2012.R2.Discovery</ID>
        <Version>7.1.10104.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="HVMon">
        <ID>Microsoft.Windows.HyperV.2012.R2.Monitoring</ID>
        <Version>7.1.10104.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="HVLib">
        <ID>Microsoft.Windows.HyperV.Library</ID>
        <Version>7.1.10104.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="Windows">
        <ID>Microsoft.Windows.Library</ID>
        <Version>7.5.8501.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="WSLib">
        <ID>Microsoft.Windows.Server.Library</ID>
        <Version>6.0.7230.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="SHL">
        <ID>System.Hardware.Library</ID>
        <Version>7.0.8433.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="Health">
        <ID>System.Health.Library</ID>
        <Version>7.0.8433.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="System">
        <ID>System.Library</ID>
        <Version>7.5.8501.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="Visualization">
        <ID>Microsoft.SystemCenter.Visualization.Library</ID>
        <Version>7.1.10226.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="Perf">
        <ID>System.Performance.Library</ID>
        <Version>7.0.8433.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="Virtualization">
        <ID>System.Virtualization.Library</ID>
        <Version>7.0.8433.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
    </References>
  </Manifest>
  <TypeDefinitions>
    <EntityTypes>
      <ClassTypes>
        <ClassType ID="QND.Hyperv.2012R2.UnixVM.Group" Base="MSIL!Microsoft.SystemCenter.InstanceGroup" Abstract="false" Accessibility="Public" Hosted="false" Singleton="true"></ClassType>
        <ClassType ID="QND.HyperV.Server.Computer.And.Health.Service.Watcher.Group" Accessibility="Public" Abstract="false" Base="MSIL!Microsoft.SystemCenter.InstanceGroup" Hosted="false" Singleton="true" />
        <ClassType ID="QND.HyperV.Server.Role.Group" Accessibility="Public" Abstract="false" Base="MSIL!Microsoft.SystemCenter.InstanceGroup" Hosted="false" Singleton="true" />
        <ClassType ID="QND.HyperV.2012R2.WinVMs.Group" Accessibility="Public" Abstract="false" Base="MSIL!Microsoft.SystemCenter.InstanceGroup" Hosted="false" Singleton="true" Extension="false" />
        <ClassType ID="QND.Hyperv2012R2.HyperV.Cluster.ComputerRole" Base="Windows!Microsoft.Windows.ComputerRole" Accessibility="Public" Abstract="false" Hosted="true" Singleton="false">
          <Property ID="ClusterName" Key="false" Type="string" />
        </ClassType>
        <ClassType ID="QND.Hyperv.2012R2.ReplicaVM" Base="QND.Hyperv.2012R2.VM" Accessibility="Public" Abstract="false" Hosted="false" Singleton="false">
          <Property ID="PrimaryServerName" Key="false" Type="string" />
          <Property ID="ReplicaServerName" Key="false" Type="string" />
          <Property ID="RelationshipType" Key="false" Type="string" />
          <Property ID="ReplicationMode" Key="false" Type="string" />
          <Property ID="FrequencySec" Key="false" Type="int" />
        </ClassType>
        <ClassType ID="QND.Hyperv.2012R2.VM" Abstract="false" Base="Virtualization!System.VirtualMachine" Hosted="false" Accessibility="Public">
          <Property ID="VirtualMachineId" Type="string" Key="true" CaseSensitive="false" MinLength="0" MaxLength="255" />
          <Property ID="VirtualMachineName" Type="string" Key="false" CaseSensitive="false" MinLength="0" MaxLength="255" />
          <Property ID="HostName" Type="string" Key="false" CaseSensitive="false" MinLength="0" MaxLength="255" />
          <Property ID="HVFarm" Type="string" Key="false" CaseSensitive="false" MinLength="0" MaxLength="255" />
          <Property ID="VMComputerName" Type="string" Key="false" CaseSensitive="false" MinLength="0" MaxLength="255" />
          <Property ID="ISVersion" Type="string" Key="false" CaseSensitive="false" MinLength="0" MaxLength="255" />
          <Property ID="RMEnabled" Type="bool" Key="false" />
          <Property ID="VMGeneration" Type="string" Key="false" CaseSensitive="false" MinLength="0" MaxLength="255" />
          <Property ID="HA" Type="bool" Key="false" />
          <Property ID="MinMemory" Type="double" Key="false" />
          <Property ID="MaxMemory" Type="double" Key="false" />
          <Property ID="StartMemory" Type="double" Key="false" />
          <Property ID="OSPlatformId" Type="int" Key="false" />
          <Property ID="OSFamily" Type="string" Key="false" CaseSensitive="false" MinLength="0" MaxLength="255" />
          <Property ID="OSName" Type="string" Key="false" CaseSensitive="false" MinLength="0" MaxLength="255" />
          <Property ID="OSVersion" Type="string" Key="false" CaseSensitive="false" MinLength="0" MaxLength="255" />
        </ClassType>
        <ClassType ID="QND.HyperV.2012R2.VirtualDrive" Accessibility="Public" Abstract="false" Base="QND.HyperV.VMHardwareComponent" Hosted="true" Singleton="false">
          <Property ID="ConnectedControllerName" Type="string" Key="false" CaseSensitive="false" MaxLength="255" MinLength="0" />
          <Property ID="ImageFile" Type="string" Key="false" CaseSensitive="false" MaxLength="255" MinLength="0" />
          <Property ID="VHDType" Type="string" Key="false" CaseSensitive="false" MaxLength="255" MinLength="0" />
          <Property ID="VHDFormat" Type="string" Key="false" CaseSensitive="false" MaxLength="255" MinLength="0" />
          <Property ID="MaxSizeGB" Type="double" Key="false" />
        </ClassType>
        <ClassType ID="QND.HyperV.2012R2.VirtualNetworkAdapter" Accessibility="Public" Abstract="false" Base="QND.HyperV.VMHardwareComponent" Hosted="true" Singleton="false">
          <Property ID="SwitchId" Type="string" Key="false" CaseSensitive="false" MaxLength="255" MinLength="0" />
          <Property ID="SwitchName" Type="string" Key="false" CaseSensitive="false" MaxLength="255" MinLength="0" />
        </ClassType>
        <ClassType ID="QND.HyperV.VMHardwareComponent" Accessibility="Public" Abstract="true" Base="Virtualization!System.VirtualHardwareComponent" Hosted="true" Singleton="false">
          <Property ID="DeviceId" Type="string" Key="true" CaseSensitive="false" MaxLength="255" MinLength="0" />
          <Property ID="Name" Type="string" Key="false" CaseSensitive="false" MaxLength="255" MinLength="0" />
          <Property ID="PerfInstance" Type="string" Key="false" CaseSensitive="false" MaxLength="255" MinLength="0" />
        </ClassType>
      </ClassTypes>
      <RelationshipTypes>
        <RelationshipType ID="QND.Hyperv.2012R2.VMHostsVMHardwareComponent" Abstract="false" Base="System!System.Hosting" Accessibility="Public">
          <Source ID="VM" Type="QND.Hyperv.2012R2.VM" />
          <Target ID="Hw" Type="QND.HyperV.VMHardwareComponent" />
        </RelationshipType>
      </RelationshipTypes>
    </EntityTypes>
    <SchemaTypes>
      <SchemaType ID="QND.Hyperv.StateWidget.Template.Schema" Accessibility="Internal">
        <xs:complexType name="Configuration" xmlns:sc="http://schemas.microsoft.com/SystemCenter/Common/TypeExtensions" xmlns:xs="http://www.w3.org/2001/XMLSchema">
          <xs:complexContent>
            <xs:extension base="Personalization">
              <xs:sequence minOccurs="1" maxOccurs="1">
                <xs:element name="Script" type="xs:anyType" sc:type="xsd://string" minOccurs="1" maxOccurs="1" />
                <xs:element name="AutoRefreshTickInterval" type="xs:anyType" sc:type="xsd://int" minOccurs="0" maxOccurs="1" />
              </xs:sequence>
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
        <xs:complexType name="Personalization" xmlns:sc="http://schemas.microsoft.com/SystemCenter/Common/TypeExtensions" xmlns:xs="http://www.w3.org/2001/XMLSchema">
          <xs:sequence minOccurs="1" maxOccurs="1">
            <xs:element name="Script" type="xs:anyType" sc:type="xsd://string" minOccurs="1" maxOccurs="1" />
            <xs:element name="AutoRefreshTickInterval" type="xs:anyType" sc:type="xsd://int" minOccurs="0" maxOccurs="1" />
          </xs:sequence>
        </xs:complexType>
      </SchemaType>
    </SchemaTypes>
    <ModuleTypes>
      <DataSourceModuleType ID="QND.Hyperv.2012R2.VM.DynamicDiscovery.DSType" Accessibility="Internal" Batching="false">
        <Configuration>
          <xsd:element name="TraceLevel" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="TimeoutSeconds" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="TargetComputer" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="TraceLevel" Selector="$Config/TraceLevel$" ParameterType="int" />
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
        </OverrideableParameters>
        <ModuleImplementation>
          <Composite>
            <MemberModules>
              <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
                <ComputerName>$Config/TargetComputer$</ComputerName>
                <LogName>Operations Manager</LogName>
                <AllowProxying>false</AllowProxying>
                <Expression>
                  <And>
                    <Expression>
                      <RegExExpression>
                        <ValueExpression>
                          <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                        </ValueExpression>
                        <Operator>MatchesRegularExpression</Operator>
                        <Pattern>62002</Pattern>
                      </RegExExpression>
                    </Expression>
                    <Expression>
                      <SimpleExpression>
                        <ValueExpression>
                          <XPathQuery Type="Integer">EventLevel</XPathQuery>
                        </ValueExpression>
                        <Operator>Equal</Operator>
                        <ValueExpression>
                          <Value Type="Integer">4</Value>
                        </ValueExpression>
                      </SimpleExpression>
                    </Expression>
                    <Expression>
                      <SimpleExpression>
                        <ValueExpression>
                          <XPathQuery Type="String">PublisherName</XPathQuery>
                        </ValueExpression>
                        <Operator>Equal</Operator>
                        <ValueExpression>
                          <Value Type="String">Hyper-V Dynamic Discovery</Value>
                        </ValueExpression>
                      </SimpleExpression>
                    </Expression>
                  </And>
                </Expression>
              </DataSource>
              <ProbeAction ID="Discover" TypeID="QND.Hyperv.2012R2.VMDiscovery.PT">
                <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
                <TraceLevel>$Config/TraceLevel$</TraceLevel>
                <TargetComputer>$Config/TargetComputer$</TargetComputer>
              </ProbeAction>
            </MemberModules>
            <Composition>
              <Node ID="Discover">
                <Node ID="DS" />
              </Node>
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.Discovery.Data</OutputType>
      </DataSourceModuleType>
      <DataSourceModuleType ID="QND.Hyperv.2012R2.VMEventsConsolidator.DSType" Accessibility="Internal" Batching="false">
        <Configuration>
          <xsd:element name="EventLatencySec" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="EventConsolidationSec" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="TargetComputer" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="EventLatencySec" Selector="$Config/EventLatencySec$" ParameterType="int" />
          <OverrideableParameter ID="EventConsolidationSec" Selector="$Config/EventConsolidationSec$" ParameterType="int" />
        </OverrideableParameters>
        <ModuleImplementation>
          <Composite>
            <MemberModules>
              <DataSource ID="DS1" TypeID="Windows!Microsoft.Windows.EventProvider">
                <ComputerName>$Config/TargetComputer$</ComputerName>
                <LogName>Microsoft-Windows-Hyper-V-Hypervisor-Operational</LogName>
                <AllowProxying>false</AllowProxying>
                <Expression>
                  <And>
                    <Expression>
                      <RegExExpression>
                        <ValueExpression>
                          <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                        </ValueExpression>
                        <Operator>MatchesRegularExpression</Operator>
                        <Pattern>^(16641|16642)$</Pattern>
                      </RegExExpression>
                    </Expression>
                    <Expression>
                      <SimpleExpression>
                        <ValueExpression>
                          <XPathQuery Type="Integer">EventLevel</XPathQuery>
                        </ValueExpression>
                        <Operator>Equal</Operator>
                        <ValueExpression>
                          <Value Type="Integer">4</Value>
                        </ValueExpression>
                      </SimpleExpression>
                    </Expression>
                  </And>
                </Expression>
              </DataSource>
              <ConditionDetection ID="Consolidate" TypeID="System!System.ConsolidatorCondition">
                <Consolidator>
                  <ConsolidationProperties />
                  <TimeControl>
                    <Latency>$Config/EventLatencySec$</Latency>
                    <WithinTimeSchedule>
                      <Interval>$Config/EventConsolidationSec$</Interval>
                    </WithinTimeSchedule>
                  </TimeControl>
                  <CountingCondition>
                    <!-- <Count/> -->
                    <CountMode>OnNewItemNOP_OnTimerOutputRestart</CountMode>
                  </CountingCondition>
                </Consolidator>
              </ConditionDetection>
            </MemberModules>
            <Composition>
              <Node ID="Consolidate">
                <Node ID="DS1" />
              </Node>
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.ConsolidatorData</OutputType>
      </DataSourceModuleType>
      <DataSourceModuleType ID="QND.Hyperv.2012R2.ReplicaVM.Discovery.DSType" Accessibility="Internal" Batching="false">
        <Configuration>
          <xsd:element name="TraceLevel" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="IntervalSeconds" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="SyncTime" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="TimeoutSeconds" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="TargetComputer" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="TraceLevel" Selector="$Config/TraceLevel$" ParameterType="int" />
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
          <OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" />
          <OverrideableParameter ID="SyncTime" Selector="$Config/SyncTime$" ParameterType="string" />
        </OverrideableParameters>
        <ModuleImplementation>
          <Composite>
            <MemberModules>
              <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.TimedPowerShell.DiscoveryProvider">
                <IntervalSeconds>$Config/IntervalSeconds$</IntervalSeconds>
                <SyncTime>$Config/SyncTime$</SyncTime>
                <ScriptName>Discover-PrimaryReplicaVM.ps1</ScriptName>
                <ScriptBody>
                  <![CDATA[#TO SHOW VERBOSE MESSAGES SET $VerbosePreference="continue"
#SET ErrorLevel to 5 so show discovery info

#*************************************************************************
# Script Name - Discover-PrimaryReplicaVM.ps1
# Author	  -  - Progel spa
# Version  - 1.0 24.09.2007
# Purpose     - 
#               
# Assumptions - 
#				
#               
# Parameters  - TraceLevel
#             - ComputerName
#				- SourceId
#				- ManagedEntityId
# Command Line - .\test.ps1 4 "serverName" '{1860E0EB-8C21-41DA-9F35-2FE9343CCF36}' '{1860E0EB-8C21-41DA-9F35-2FE9343CCF36}'
# If discovery must be added the followinf parameters
#				SourceId ($ MPElement $ )
#				ManagedEntityId ($ Target/Id $)
#
# Output properties
#
# Status
#
# Version History
#	  1.0 21.02.2015 DG First Release
#     
#
# (c) Copyright 2015, Progel spa, All Rights Reserved
# Proprietary and confidential to Progel srl              
#
#*************************************************************************


# Get the named parameters
param([int]$traceLevel=$(throw 'must have a value'),
[string]$computerName=$(throw 'must have a value'),
[string]$sourceID=$(throw 'must have a value'),
[string]$ManagedEntityId=$(throw 'must have a value'))

	[Threading.Thread]::CurrentThread.CurrentCulture = "en-US"        
	[Threading.Thread]::CurrentThread.CurrentUICulture = "en-US"
	
#Constants used for event logging
$SCRIPT_NAME			= "Discover-PrimaryReplicaVM.ps1"
$SCRIPT_ARGS = 4
$SCRIPT_STARTED			= 831
$PROPERTYBAG_CREATED	= 832
$SCRIPT_ENDED			= 835
$SCRIPT_VERSION = "1.0"

#region Constants
#Trace Level Costants
$TRACE_NONE 	= 0
$TRACE_ERROR 	= 1
$TRACE_WARNING = 2
$TRACE_INFO 	= 3
$TRACE_VERBOSE = 4
$TRACE_DEBUG = 5

#Event Type Constants
$EVENT_TYPE_SUCCESS      = 0
$EVENT_TYPE_ERROR        = 1
$EVENT_TYPE_WARNING      = 2
$EVENT_TYPE_INFORMATION  = 4
$EVENT_TYPE_AUDITSUCCESS = 8
$EVENT_TYPE_AUDITFAILURE = 16

#Standard Event IDs
$FAILURE_EVENT_ID = 4000		#errore generico nello script
$SUCCESS_EVENT_ID = 1101
$START_EVENT_ID = 1102
$STOP_EVENT_ID = 1103

#TypedPropertyBag
$AlertDataType = 0
$EventDataType	= 2
$PerformanceDataType = 2
$StateDataType       = 3
#endregion

#region Helper Functions
function Log-Params
{
	param($Invocation)
	$line=''
	foreach($key in $Invocation.BoundParameters.Keys) {$line += "$key=$($Invocation.BoundParameters[$key])  "}
	Log-Event $START_EVENT_ID $EVENT_TYPE_INFORMATION  ("Starting script. Invocation Name:$($Invocation.InvocationName)`n Parameters`n $line") $TRACE_INFO
}


function Log-Event
{
	param($eventID, $eventType, $msg, $level)
	
	Write-Verbose ("Logging event. " + $SCRIPT_NAME + " EventID: " + $eventID + " eventType: " + $eventType + " Version:" + $SCRIPT_VERSION + " --> " + $msg)
	if($level -le $P_TraceLevel)
	{
		Write-Host ("Logging event. " + $SCRIPT_NAME + " EventID: " + $eventID + " eventType: " + $eventType + " Version:" + $SCRIPT_VERSION + " --> " + $msg)
		$g_API.LogScriptEvent($SCRIPT_NAME,$eventID,$eventType, ($msg + "`n" + "Version :" + $SCRIPT_VERSION))
	}
}

Function Throw-EmptyDiscovery
{
	param($SourceId, $ManagedEntityId)

	$oDiscoveryData = $g_API.CreateDiscoveryData(0, $SourceId, $ManagedEntityId)
	Log-Event $FAILURE_EVENT_ID $EVENT_TYPE_WARNING "Exiting with empty discovery data" $TRACE_INFO
	$oDiscoveryData
	If($traceLevel -eq $TRACE_DEBUG)
	{
		#just for debug proposes when launched from command line does nothing when run inside OpsMgr Agent
		$g_API.Return($oDiscoveryData)
	}
}

Function Throw-KeepDiscoveryInfo
{
param($SourceId, $ManagedEntityId)
	$oDiscoveryData = $g_API.CreateDiscoveryData(0,$SourceId,$ManagedEntityId)
	#Instead of Snapshot discovery, submit Incremental discovery data
	$oDiscoveryData.IsSnapshot = $false
	Log-Event $FAILURE_EVENT_ID $EVENT_TYPE_WARNING "Exiting with null non snapshot discovery data" $TRACE_INFO
	$oDiscoveryData    
	If($traceLevel -eq $TRACE_DEBUG)
	{
		#just for debug proposes when launched from command line does nothing when run inside OpsMgr Agent	
		$g_API.Return($oDiscoveryData)
	}
}
#endregion


#Start by setting up API object.
	$P_TraceLevel = $TRACE_VERBOSE
	$g_Api = New-Object -comObject 'MOM.ScriptAPI'
	#$g_RegistryStatePath = "HKLM\" + $g_API.GetScriptStateKeyPath($SCRIPT_NAME)

	$dtStart = Get-Date
	$P_TraceLevel = $traceLevel
	Log-Params $MyInvocation

try
{
		if (!(get-Module -Name Hyper-v)) {Import-Module Hyper-v}

	if (!(get-command -Module Hyper-V -Name Get-VM -ErrorAction SilentlyContinue)) {
		Log-Event $START_EVENT_ID $EVENT_TYPE_WARNING ("Get-VM Commandlet doesn't exist.") $TRACE_WARNING
		Throw-EmptyDiscovery
	}

	$vms = Get-VM | where {$_.ReplicationMode.Value__ -ne 0}	#use the enum codes instead of labels 0 = 'None'
	$discoveryData = $g_api.CreateDiscoveryData(0, $sourceId, $managedEntityId)
	foreach($vm in $vms) {
		$replica = Get-VMReplication -VM $vm
	#I use labels and codes for discovery so they're UI friendly, if in the future I need to group objects I will add a code property. Labels are locale dependent
	$oInstance = $discoveryData.CreateClassInstance("$MPElement[Name='QND.Hyperv.2012R2.ReplicaVM']$")
	$oInstance.AddProperty("$MPElement[Name='QND.Hyperv.2012R2.VM']/VirtualMachineId$", $vm.VMId.ToString())
	$oInstance.AddProperty("$MPElement[Name='QND.Hyperv.2012R2.ReplicaVM']/PrimaryServerName$", $replica.PrimaryServerName)
	$oInstance.AddProperty("$MPElement[Name='QND.Hyperv.2012R2.ReplicaVM']/ReplicaServerName$", $replica.ReplicaServerName)
	$oInstance.AddProperty("$MPElement[Name='QND.Hyperv.2012R2.ReplicaVM']/ReplicationMode$", $vm.ReplicationMode.ToString())
	$oInstance.AddProperty("$MPElement[Name='QND.Hyperv.2012R2.ReplicaVM']/RelationshipType$", $replica.RelationshipType.ToString())
	$oInstance.AddProperty("$MPElement[Name='QND.Hyperv.2012R2.ReplicaVM']/FrequencySec$", $replica.FrequencySec)
			$discoveryData.AddInstance($oInstance)
	}
	$discoveryData

	Log-Event $STOP_EVENT_ID $EVENT_TYPE_SUCCESS ("has completed successfully in " + ((Get-Date)- ($dtstart)).TotalSeconds + " seconds.") $TRACE_INFO
}
Catch [Exception] {
	Log-Event $FAILURE_EVENT_ID $EVENT_TYPE_WARNING ("Main " + $Error) $TRACE_WARNING	
	write-Verbose $("TRAPPED: " + $_.Exception.GetType().FullName); 
	Write-Verbose $("TRAPPED: " + $_.Exception.Message); 
}
]]>
                </ScriptBody>
                <Parameters>
                  <Parameter>
                    <Name>TraceLevel</Name>
                    <Value>$Config/TraceLevel$</Value>
                  </Parameter>
                  <Parameter>
                    <Name>ComputerName</Name>
                    <Value>$Config/TargetComputer$</Value>
                  </Parameter>
                  <Parameter>
                    <Name>SourceId</Name>
                    <Value>$MPElement$</Value>
                  </Parameter>
                  <Parameter>
                    <Name>ManagedEntityId</Name>
                    <Value>$Target/Id$</Value>
                  </Parameter>
                </Parameters>
                <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
                <StrictErrorHandling>false</StrictErrorHandling>
                <!-- true only for Tasks -->
              </DataSource>
            </MemberModules>
            <Composition>
              <Node ID="DS" />
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.Discovery.Data</OutputType>
      </DataSourceModuleType>
      <DataSourceModuleType ID="QND.Hyperv2012R2.GetVMReplicaStatus.DS" Accessibility="Public" Batching="false">
        <Configuration>
          <xsd:element name="IntervalSeconds" type="xsd:int" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="SyncTime" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="TimeoutSeconds" type="xsd:int" minOccurs="0" maxOccurs="1" default="60" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="TraceLevel" type="xsd:int" minOccurs="0" maxOccurs="1" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" />
          <OverrideableParameter ID="SyncTime" Selector="$Config/SyncTime$" ParameterType="string" />
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
          <OverrideableParameter ID="TraceLevel" ParameterType="int" Selector="$Config/TraceLevel$" />
        </OverrideableParameters>
        <ModuleImplementation>
          <Composite>
            <MemberModules>
              <DataSource ID="Scheduler" TypeID="System!System.SimpleScheduler">
                <IntervalSeconds>$Config/IntervalSeconds$</IntervalSeconds>
                <SyncTime>$Config/SyncTime$</SyncTime>
              </DataSource>
              <ProbeAction ID="GetStatus" TypeID="QND.Hyperv2012R2.VMReplicaStatus.PT">
                <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
                <TraceLevel>$Config/TraceLevel$</TraceLevel>
              </ProbeAction>
            </MemberModules>
            <Composition>
              <Node ID="GetStatus">
                <Node ID="Scheduler"></Node>
              </Node>
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.PropertyBagData</OutputType>
      </DataSourceModuleType>
      <DataSourceModuleType ID="QND.Hyperv2012R2.GetVMSnapshotAge.DS" Accessibility="Public" Batching="false">
        <Configuration>
          <xsd:element name="IntervalSeconds" type="xsd:int" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="SyncTime" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="TimeoutSeconds" type="xsd:int" minOccurs="0" maxOccurs="1" default="60" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="TraceLevel" type="xsd:int" minOccurs="0" maxOccurs="1" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" />
          <OverrideableParameter ID="SyncTime" Selector="$Config/SyncTime$" ParameterType="string" />
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
          <OverrideableParameter ID="TraceLevel" ParameterType="int" Selector="$Config/TraceLevel$" />
        </OverrideableParameters>
        <ModuleImplementation>
          <Composite>
            <MemberModules>
              <DataSource ID="Scheduler" TypeID="System!System.SimpleScheduler">
                <IntervalSeconds>$Config/IntervalSeconds$</IntervalSeconds>
                <SyncTime>$Config/SyncTime$</SyncTime>
              </DataSource>
              <ProbeAction ID="GetStatus" TypeID="QND.Hyperv2012R2.VMSnapshotAge.PT">
                <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
                <TraceLevel>$Config/TraceLevel$</TraceLevel>
              </ProbeAction>
            </MemberModules>
            <Composition>
              <Node ID="GetStatus">
                <Node ID="Scheduler"></Node>
              </Node>
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.PropertyBagData</OutputType>
      </DataSourceModuleType>
      <DataSourceModuleType ID="QND.Hyperv2012R2.GetVMISStatus.DS" Accessibility="Public" Batching="false">
        <Configuration>
          <xsd:element name="IntervalSeconds" type="xsd:int" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="SyncTime" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="TimeoutSeconds" type="xsd:int" minOccurs="0" maxOccurs="1" default="60" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="TraceLevel" type="xsd:int" minOccurs="0" maxOccurs="1" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" />
          <OverrideableParameter ID="SyncTime" Selector="$Config/SyncTime$" ParameterType="string" />
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
          <OverrideableParameter ID="TraceLevel" ParameterType="int" Selector="$Config/TraceLevel$" />
        </OverrideableParameters>
        <ModuleImplementation>
          <Composite>
            <MemberModules>
              <DataSource ID="Scheduler" TypeID="System!System.SimpleScheduler">
                <IntervalSeconds>$Config/IntervalSeconds$</IntervalSeconds>
                <SyncTime>$Config/SyncTime$</SyncTime>
              </DataSource>
              <ProbeAction ID="GetStatus" TypeID="QND.Hyperv2012R2.VMISStatus.PT">
                <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
                <TraceLevel>$Config/TraceLevel$</TraceLevel>
              </ProbeAction>
            </MemberModules>
            <Composition>
              <Node ID="GetStatus">
                <Node ID="Scheduler"></Node>
              </Node>
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.PropertyBagData</OutputType>
      </DataSourceModuleType>
      <DataSourceModuleType ID="QND.Hyperv2012R2.GetVMMemoryStatus.DS" Accessibility="Public" Batching="false">
        <Configuration>
          <xsd:element name="IntervalSeconds" type="xsd:int" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="SyncTime" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="TimeoutSeconds" type="xsd:int" minOccurs="0" maxOccurs="1" default="60" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="TraceLevel" type="xsd:int" minOccurs="0" maxOccurs="1" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" />
          <OverrideableParameter ID="SyncTime" Selector="$Config/SyncTime$" ParameterType="string" />
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
          <OverrideableParameter ID="TraceLevel" ParameterType="int" Selector="$Config/TraceLevel$" />
        </OverrideableParameters>
        <ModuleImplementation>
          <Composite>
            <MemberModules>
              <DataSource ID="Scheduler" TypeID="System!System.SimpleScheduler">
                <IntervalSeconds>$Config/IntervalSeconds$</IntervalSeconds>
                <SyncTime>$Config/SyncTime$</SyncTime>
              </DataSource>
              <ProbeAction ID="GetStatus" TypeID="QND.Hyperv2012R2.GetVMMemoryStatus.PT">
                <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
                <TraceLevel>$Config/TraceLevel$</TraceLevel>
              </ProbeAction>
            </MemberModules>
            <Composition>
              <Node ID="GetStatus">
                <Node ID="Scheduler"></Node>
              </Node>
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.PropertyBagData</OutputType>
      </DataSourceModuleType>
      <DataSourceModuleType ID="QND.Hyperv2012R2.GetVMSize.Perf.DS" Accessibility="Public" Batching="false">
        <Configuration>
          <xsd:element name="IntervalSeconds" type="xsd:int" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="SyncTime" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="VMId" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" maxOccurs="1" name="CounterName" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" maxOccurs="1" name="PropertyBagValue" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="TimeoutSeconds" type="xsd:int" minOccurs="0" maxOccurs="1" default="60" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="TraceLevel" type="xsd:int" minOccurs="0" maxOccurs="1" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" />
          <OverrideableParameter ID="SyncTime" Selector="$Config/SyncTime$" ParameterType="string" />
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
          <OverrideableParameter ID="TraceLevel" ParameterType="int" Selector="$Config/TraceLevel$" />
        </OverrideableParameters>
        <ModuleImplementation>
          <Composite>
            <MemberModules>
              <DataSource ID="Scheduler" TypeID="System!System.SimpleScheduler">
                <IntervalSeconds>$Config/IntervalSeconds$</IntervalSeconds>
                <SyncTime>$Config/SyncTime$</SyncTime>
              </DataSource>
              <ProbeAction ID="Probe" TypeID="QND.Hyperv2012R2.GetVMSize.PT">
                <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
                <TraceLevel>$Config/TraceLevel$</TraceLevel>
              </ProbeAction>
              <ConditionDetection ID="FilterVM" TypeID="System!System.ExpressionFilter">
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">Property[@Name='VMId']</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="String">$Config/VMId$</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
              </ConditionDetection>
              <ConditionDetection ID="Mapper" TypeID="Perf!System.Performance.DataGenericMapper">
                <ObjectName>Virtual Machine</ObjectName>
                <CounterName>$config/CounterName$</CounterName>
                <InstanceName>$Data/Property[@Name='VMName']$ - $Data/Property[@Name='VMId']$</InstanceName>
                <Value>$Data/Property[@Name='$Config/PropertyBagValue$']$</Value>
              </ConditionDetection>
            </MemberModules>
            <Composition>
              <Node ID="Mapper">
                <Node ID="FilterVM">
                  <Node ID="Probe">
                    <Node ID="Scheduler" />
                  </Node>
                </Node>
              </Node>
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>Perf!System.Performance.Data</OutputType>
      </DataSourceModuleType>
      <DataSourceModuleType ID="QND.Hyperv2012R2.GetVHDStats.DS" Accessibility="Public" Batching="false">
        <Configuration>
          <xsd:element name="IntervalSeconds" type="xsd:int" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="SyncTime" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="TimeoutSeconds" type="xsd:int" minOccurs="0" maxOccurs="1" default="60" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="TraceLevel" type="xsd:int" minOccurs="0" maxOccurs="1" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" />
          <OverrideableParameter ID="SyncTime" Selector="$Config/SyncTime$" ParameterType="string" />
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
          <OverrideableParameter ID="TraceLevel" ParameterType="int" Selector="$Config/TraceLevel$" />
        </OverrideableParameters>
        <ModuleImplementation>
          <Composite>
            <MemberModules>
              <DataSource ID="Scheduler" TypeID="System!System.SimpleScheduler">
                <IntervalSeconds>$Config/IntervalSeconds$</IntervalSeconds>
                <SyncTime>$Config/SyncTime$</SyncTime>
              </DataSource>
              <ProbeAction ID="GetStatus" TypeID="QND.Hyperv2012R2.GetVHDStats.PT">
                <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
                <TraceLevel>$Config/TraceLevel$</TraceLevel>
              </ProbeAction>
            </MemberModules>
            <Composition>
              <Node ID="GetStatus">
                <Node ID="Scheduler"></Node>
              </Node>
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.PropertyBagData</OutputType>
      </DataSourceModuleType>
      <DataSourceModuleType ID="QND.Hyperv2012R2.GetVMMeasuresPerf.Opti.DS" Accessibility="Public" Batching="false">
        <Configuration>
          <xsd:element name="IntervalSeconds" type="xsd:int" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="SyncTime" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="TimeoutSeconds" type="xsd:int" minOccurs="0" maxOccurs="1" default="60" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="TraceLevel" type="xsd:int" minOccurs="0" maxOccurs="1" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="ResetDays" type="xsd:int" minOccurs="0" maxOccurs="1" default="30" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="ObjectName" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="CounterName" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="InstanceProperty" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="ValueProperty" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" maxOccurs="1" name="Type" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
            <xsd:simpleType>
              <xsd:restriction base="xsd:string">
                <xsd:enumeration value="VM" />
                <xsd:enumeration value="Disk" />
              </xsd:restriction>
            </xsd:simpleType>
          </xsd:element>
          <xsd:element minOccurs="1" maxOccurs="1" name="Tolerance" type="xsd:double" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" maxOccurs="1" name="ToleranceType" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
            <xsd:simpleType>
              <xsd:restriction base="xsd:string">
                <xsd:enumeration value="Absolute" />
                <xsd:enumeration value="Percentage" />
              </xsd:restriction>
            </xsd:simpleType>
          </xsd:element>
          <xsd:element minOccurs="1" maxOccurs="1" name="MaximumSampleSeparation" type="xsd:unsignedInt" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" />
          <OverrideableParameter ID="SyncTime" Selector="$Config/SyncTime$" ParameterType="string" />
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
          <OverrideableParameter ID="TraceLevel" ParameterType="int" Selector="$Config/TraceLevel$" />
          <OverrideableParameter ID="Tolerance" ParameterType="double" Selector="$Config/Tolerance$" />
          <OverrideableParameter ID="MaximumSampleSeparation" ParameterType="int" Selector="$Config/MaximumSampleSeparation$" />
          <OverrideableParameter ID="ToleranceType" ParameterType="string" Selector="$Config/ToleranceType$" />
        </OverrideableParameters>
        <ModuleImplementation>
          <Composite>
            <MemberModules>
              <DataSource ID="Scheduler" TypeID="System!System.SimpleScheduler">
                <IntervalSeconds>$Config/IntervalSeconds$</IntervalSeconds>
                <SyncTime>$Config/SyncTime$</SyncTime>
              </DataSource>
              <ProbeAction ID="GetStatus" TypeID="QND.Hyperv.2012R2.GetVMMeasures.PT">
                <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
                <TraceLevel>$Config/TraceLevel$</TraceLevel>
                <VMGuid>ignore</VMGuid>
                <ResetDays>$Config/ResetDays$</ResetDays>
              </ProbeAction>
              <ConditionDetection ID="TypeFilter" TypeID="System!System.ExpressionFilter">
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">Property[@Name='Type']</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="String">$Config/Type$</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
              </ConditionDetection>
              <ConditionDetection ID="Mapper" TypeID="Perf!System.Performance.DataGenericMapper">
                <ObjectName>$Config/ObjectName$</ObjectName>
                <CounterName>$Config/CounterName$</CounterName>
                <InstanceName>$Data/Property[@Name='$Config/InstanceProperty$']$</InstanceName>
                <Value>$Data/Property[@Name='$Config/ValueProperty$']$</Value>
              </ConditionDetection>
              <ConditionDetection ID="OptimizedFilter" TypeID="Perf!System.Performance.OptimizedCollectionFilter">
                <Tolerance>$Config/Tolerance$</Tolerance>
                <ToleranceType>$Config/ToleranceType$</ToleranceType>
                <MaximumSampleSeparation>$Config/MaximumSampleSeparation$</MaximumSampleSeparation>
                <SamplingPeriodInSeconds>$Config/IntervalSeconds$</SamplingPeriodInSeconds>
              </ConditionDetection>
            </MemberModules>
            <Composition>
              <Node ID="OptimizedFilter">
                <Node ID="Mapper">
                  <Node ID="TypeFilter">
                    <Node ID="GetStatus">
                      <Node ID="Scheduler"></Node>
                    </Node>
                  </Node>
                </Node>
              </Node>
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>Perf!System.Performance.Data</OutputType>
      </DataSourceModuleType>
      <DataSourceModuleType ID="QND.Hyperv2012R2.VM.Cluster.Resource.WMI.DS" Accessibility="Internal" Batching="false">
        <Configuration>
          <xsd:element minOccurs="1" name="IntervalSeconds" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" name="SyncTime" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" name="TimeoutSeconds" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" />
          <OverrideableParameter ID="SyncTime" Selector="$Config/SyncTime$" ParameterType="string" />
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
        </OverrideableParameters>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <DataSource ID="Schedule" TypeID="System!System.SimpleScheduler">
                <IntervalSeconds>$Config/IntervalSeconds$</IntervalSeconds>
                <SyncTime>$Config/SyncTime$</SyncTime>
              </DataSource>
              <ProbeAction ID="Probe" TypeID="QND.Hyperv2012R2.VM.Cluster.Resource.WMI.PT">
                <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
              </ProbeAction>
            </MemberModules>
            <Composition>
              <Node ID="Probe">
                <Node ID="Schedule" />
              </Node>
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.PropertyBagData</OutputType>
      </DataSourceModuleType>
      <DataSourceModuleType ID="QND.Hyperv.2012R2.GetVMUptimePerf.DS" Accessibility="Public" Batching="false">
        <Configuration>
          <xsd:element name="IntervalSeconds" type="xsd:int" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="SyncTime" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="TimeoutSeconds" type="xsd:int" minOccurs="0" maxOccurs="1" default="300" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="TraceLevel" type="xsd:int" minOccurs="0" maxOccurs="1" default="2" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="ObjectName" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="CounterName" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="InstanceProperty" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="ValueProperty" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" />
          <OverrideableParameter ID="SyncTime" Selector="$Config/SyncTime$" ParameterType="string" />
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
          <OverrideableParameter ID="TraceLevel" ParameterType="int" Selector="$Config/TraceLevel$" />
        </OverrideableParameters>
        <ModuleImplementation>
          <Composite>
            <MemberModules>
              <DataSource ID="Scheduler" TypeID="System!System.SimpleScheduler">
                <IntervalSeconds>$Config/IntervalSeconds$</IntervalSeconds>
                <SyncTime>$Config/SyncTime$</SyncTime>
              </DataSource>
              <ProbeAction ID="GetStatus" TypeID="QND.Hyperv.2012R2.GetVMUptime.PT">
                <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
                <TraceLevel>$Config/TraceLevel$</TraceLevel>
                <VMGuid>ignore</VMGuid>
              </ProbeAction>
              <ConditionDetection ID="Mapper" TypeID="Perf!System.Performance.DataGenericMapper">
                <ObjectName>$Config/ObjectName$</ObjectName>
                <CounterName>$Config/CounterName$</CounterName>
                <InstanceName>$Data/Property[@Name='$Config/InstanceProperty$']$</InstanceName>
                <Value>$Data/Property[@Name='$Config/ValueProperty$']$</Value>
              </ConditionDetection>
            </MemberModules>
            <Composition>
              <Node ID="Mapper">
                <Node ID="GetStatus">
                  <Node ID="Scheduler"></Node>
                </Node>
              </Node>
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>Perf!System.Performance.Data</OutputType>
      </DataSourceModuleType>
      <DataSourceModuleType ID="QND.Hyperv2012R2.GetVMSnapshotAge.Perf.DS" Accessibility="Public" Batching="false">
        <Configuration>
          <xsd:element name="IntervalSeconds" type="xsd:int" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="SyncTime" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="VMId" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="ObjectName" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="CounterName" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="InstanceProperty" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" maxOccurs="1" name="PropertyBagValue" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="TimeoutSeconds" type="xsd:int" minOccurs="0" maxOccurs="1" default="60" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="TraceLevel" type="xsd:int" minOccurs="0" maxOccurs="1" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" />
          <OverrideableParameter ID="SyncTime" Selector="$Config/SyncTime$" ParameterType="string" />
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
          <OverrideableParameter ID="TraceLevel" ParameterType="int" Selector="$Config/TraceLevel$" />
        </OverrideableParameters>
        <ModuleImplementation>
          <Composite>
            <MemberModules>
              <DataSource ID="Scheduler" TypeID="System!System.SimpleScheduler">
                <IntervalSeconds>$Config/IntervalSeconds$</IntervalSeconds>
                <SyncTime>$Config/SyncTime$</SyncTime>
              </DataSource>
              <ProbeAction ID="Probe" TypeID="QND.Hyperv2012R2.VMSnapshotAge.PT">
                <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
                <TraceLevel>$Config/TraceLevel$</TraceLevel>
              </ProbeAction>
              <ConditionDetection ID="FilterVM" TypeID="System!System.ExpressionFilter">
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">Property[@Name='VMId']</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="String">$Config/VMId$</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
              </ConditionDetection>
              <ConditionDetection ID="Mapper" TypeID="Perf!System.Performance.DataGenericMapper">
                <ObjectName>$config/ObjectName$</ObjectName>
                <CounterName>$config/CounterName$</CounterName>
                <InstanceName>$Config/InstanceProperty$</InstanceName>
                <Value>$Data/Property[@Name='$Config/PropertyBagValue$']$</Value>
              </ConditionDetection>
            </MemberModules>
            <Composition>
              <Node ID="Mapper">
                <Node ID="FilterVM">
                  <Node ID="Probe">
                    <Node ID="Scheduler" />
                  </Node>
                </Node>
              </Node>
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>Perf!System.Performance.Data</OutputType>
      </DataSourceModuleType>
      <DataSourceModuleType ID="QND.Hyperv2012R2.GetVHDFragment.Perf.DS" Accessibility="Public" Batching="false">
        <Configuration>
          <xsd:element name="IntervalSeconds" type="xsd:int" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="SyncTime" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="VirtualDiskId" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="ObjectName" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="CounterName" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="InstanceProperty" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="PropertyBagValue" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="TimeoutSeconds" type="xsd:int" minOccurs="0" maxOccurs="1" default="60" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="TraceLevel" type="xsd:int" minOccurs="0" maxOccurs="1" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" />
          <OverrideableParameter ID="SyncTime" Selector="$Config/SyncTime$" ParameterType="string" />
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
          <OverrideableParameter ID="TraceLevel" ParameterType="int" Selector="$Config/TraceLevel$" />
        </OverrideableParameters>
        <ModuleImplementation>
          <Composite>
            <MemberModules>
              <DataSource ID="Scheduler" TypeID="System!System.SimpleScheduler">
                <IntervalSeconds>$Config/IntervalSeconds$</IntervalSeconds>
                <SyncTime>$Config/SyncTime$</SyncTime>
              </DataSource>
              <ProbeAction ID="Probe" TypeID="QND.Hyperv2012R2.GetVHDStats.PT">
                <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
                <TraceLevel>$Config/TraceLevel$</TraceLevel>
              </ProbeAction>
              <ConditionDetection ID="FilterVM" TypeID="System!System.ExpressionFilter">
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">Property[@Name='VirtualDiskId']</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="String">$Config/VirtualDiskId$</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
              </ConditionDetection>
              <ConditionDetection ID="Mapper" TypeID="Perf!System.Performance.DataGenericMapper">
                <ObjectName>$config/ObjectName$</ObjectName>
                <CounterName>$config/CounterName$</CounterName>
                <InstanceName>$config/InstanceProperty$</InstanceName>
                <Value>$Data/Property[@Name='$Config/PropertyBagValue$']$</Value>
              </ConditionDetection>
            </MemberModules>
            <Composition>
              <Node ID="Mapper">
                <Node ID="FilterVM">
                  <Node ID="Probe">
                    <Node ID="Scheduler" />
                  </Node>
                </Node>
              </Node>
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>Perf!System.Performance.Data</OutputType>
      </DataSourceModuleType>
      <DataSourceModuleType ID="Microsoft.Windows.HyperV.DiskPartitionSpaceProvider.Subscriber" Accessibility="Public" Batching="false">
        <Configuration />
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <DataSource ID="DS" TypeID="Microsoft.Windows.HyperV.DiskPartitionSpaceProvider.PropertyBagProvider">
                <ManagementGroupId>$Target/ManagementGroup/Id$</ManagementGroupId>
                <ChannelId>3DEA9314-3887-46B8-B615-752CA2D007E8</ChannelId>
              </DataSource>
            </MemberModules>
            <Composition>
              <Node ID="DS" />
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.PropertyBagData</OutputType>
      </DataSourceModuleType>
      <DataSourceModuleType ID="Microsoft.Windows.HyperV.DiskPartitionSpaceProvider.PropertyBagProvider" Accessibility="Internal" Batching="false">
        <Configuration>
          <xsd:element name="ManagementGroupId" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="ChannelId" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <ModuleImplementation Isolation="Any">
          <Native>
            <ClassID>8DB8C3B0-3AB0-494a-A09B-5F3643CC27A7</ClassID>
          </Native>
        </ModuleImplementation>
        <OutputType>System!System.PropertyBagData</OutputType>
      </DataSourceModuleType>
      <ProbeActionModuleType ID="QND.Hyperv.2012R2.VMDiscovery.PT" Accessibility="Public" Batching="false">
        <Configuration>
          <xsd:element name="TimeoutSeconds" type="xsd:int" minOccurs="0" maxOccurs="1" default="60" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="TraceLevel" type="xsd:int" minOccurs="0" maxOccurs="1" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="TargetComputer" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
          <OverrideableParameter ID="TraceLevel" ParameterType="int" Selector="$Config/TraceLevel$" />
        </OverrideableParameters>
        <ModuleImplementation>
          <Composite>
            <MemberModules>
              <ProbeAction ID="Discovery" TypeID="Windows!Microsoft.Windows.PowerShellDiscoveryProbe">
                <ScriptName>Discover-VM.ps1</ScriptName>
                <ScriptBody>
                  <![CDATA[#TO SHOW VERBOSE MESSAGES SET $VerbosePreference="continue"
#SET ErrorLevel to 5 so show discovery info

#*************************************************************************
# Script Name - Discover-VM.ps1
# Author	  -  - Progel spa
# Version  - 24.09.2007
# Purpose     - 
#               
# Assumptions - 
#				
#               
# Parameters  - TraceLevel
#             - ComputerName
#				- SourceId
#				- ManagedEntityId
# Command Line - .\test.ps1 4 "serverName" '{1860E0EB-8C21-41DA-9F35-2FE9343CCF36}' '{1860E0EB-8C21-41DA-9F35-2FE9343CCF36}'
# If discovery must be added the followinf parameters
#				SourceId ($ MPElement $ )
#				ManagedEntityId ($ Target/Id $)
#
# Output properties
#
# Status
#
# $Version$ History
#	  1.0 06.08.2010 DG First Release
#     1.5 15.02.2014 DG minor cosmetics
#
# (c) Copyright 2015, Progel spa, All Rights Reserved
# Proprietary and confidential to Progel srl              
#
#*************************************************************************


# Get the named parameters
param([int]$traceLevel=$(throw 'must have a value'),
[string]$HostComputerIdentity=$(throw 'must have a value'),
[string]$sourceID=$(throw 'must have a value'),
[string]$ManagedEntityId=$(throw 'must have a value'))

	[Threading.Thread]::CurrentThread.CurrentCulture = "en-US"        
	[Threading.Thread]::CurrentThread.CurrentUICulture = "en-US"
	
#Constants used for event logging
$SCRIPT_NAME			= "Discover-VM.ps1"
$SCRIPT_ARGS = 4
$SCRIPT_STARTED			= 831
$PROPERTYBAG_CREATED	= 832
$SCRIPT_ENDED			= 835
$SCRIPT_VERSION = "1.0"

#region Constants
#Trace Level Costants
$TRACE_NONE 	= 0
$TRACE_ERROR 	= 1
$TRACE_WARNING = 2
$TRACE_INFO 	= 3
$TRACE_VERBOSE = 4
$TRACE_DEBUG = 5

#Event Type Constants
$EVENT_TYPE_SUCCESS      = 0
$EVENT_TYPE_ERROR        = 1
$EVENT_TYPE_WARNING      = 2
$EVENT_TYPE_INFORMATION  = 4
$EVENT_TYPE_AUDITSUCCESS = 8
$EVENT_TYPE_AUDITFAILURE = 16

#Standard Event IDs
$FAILURE_EVENT_ID = 4000		#errore generico nello script
$SUCCESS_EVENT_ID = 1101
$START_EVENT_ID = 1102
$STOP_EVENT_ID = 1103

#TypedPropertyBag
$AlertDataType = 0
$EventDataType	= 2
$PerformanceDataType = 2
$StateDataType       = 3
#endregion

#region Helper Functions
function Log-Params
{
	param($Invocation)
	$line=''
	foreach($key in $Invocation.BoundParameters.Keys) {$line += "$key=$($Invocation.BoundParameters[$key])  "}
	Log-Event $START_EVENT_ID $EVENT_TYPE_INFORMATION  ("Starting script. Invocation Name:$($Invocation.InvocationName)`n Parameters`n $line") $TRACE_INFO
}


function Log-Event
{
	param($eventID, $eventType, $msg, $level)
	
	Write-Verbose ("Logging event. " + $SCRIPT_NAME + " EventID: " + $eventID + " eventType: " + $eventType + " Version:" + $SCRIPT_VERSION + " --> " + $msg)
	if($level -le $P_TraceLevel)
	{
		Write-Host ("Logging event. " + $SCRIPT_NAME + " EventID: " + $eventID + " eventType: " + $eventType + " Version:" + $SCRIPT_VERSION + " --> " + $msg)
		$g_API.LogScriptEvent($SCRIPT_NAME,$eventID,$eventType, ($msg + "`n" + "Version :" + $SCRIPT_VERSION))
	}
}

Function Throw-EmptyDiscovery
{
	param($SourceId, $ManagedEntityId)

	$oDiscoveryData = $g_API.CreateDiscoveryData(0, $SourceId, $ManagedEntityId)
	Log-Event $FAILURE_EVENT_ID $EVENT_TYPE_WARNING "Exiting with empty discovery data" $TRACE_INFO
	$oDiscoveryData
	If($traceLevel -eq $TRACE_DEBUG)
	{
		#just for debug proposes when launched from command line does nothing when run inside OpsMgr Agent
		$g_API.Return($oDiscoveryData)
	}
}

Function Throw-KeepDiscoveryInfo
{
param($SourceId, $ManagedEntityId)
	$oDiscoveryData = $g_API.CreateDiscoveryData(0,$SourceId,$ManagedEntityId)
	#Instead of Snapshot discovery, submit Incremental discovery data
	$oDiscoveryData.IsSnapshot = $false
	Log-Event $FAILURE_EVENT_ID $EVENT_TYPE_WARNING "Exiting with null non snapshot discovery data" $TRACE_INFO
	$oDiscoveryData    
	If($traceLevel -eq $TRACE_DEBUG)
	{
		#just for debug proposes when launched from command line does nothing when run inside OpsMgr Agent	
		$g_API.Return($oDiscoveryData)
	}
}
#endregion


Function NullIsFalse
{
	param($value)
	if(! $value) {return $false}
	return $value
}

Function NullIsZero
{
	param($value)
	if(! $value) {return 0}
	return $value
}

Function Get-KVPData
{
	param($propList, $key)
	if(! $propList) {return $null}
	$elem = $propList | where {([xml]$_).SelectSingleNode("/INSTANCE/PROPERTY[@NAME='Name']/VALUE[child::text()='$key']")}
	if ($elem) {
		$xmlData = ([xml]$elem).SelectSingleNode("/INSTANCE/PROPERTY[@NAME='Data']/VALUE[child::text()]")
		if ($xmlData) {return $xmlData.Innertext}
	}
	return $null
}

#Start by setting up API object.
	$P_TraceLevel = $TRACE_VERBOSE
	$g_Api = New-Object -comObject 'MOM.ScriptAPI'
	#$g_RegistryStatePath = "HKLM\" + $g_API.GetScriptStateKeyPath($SCRIPT_NAME)

	$dtStart = Get-Date
	$P_TraceLevel = $traceLevel
	Log-Params $MyInvocation

try
{

	if (!(get-Module -Name Hyper-v)) {Import-Module Hyper-v -ErrorAction SilentlyContinue}
	if (!(get-Module -Name failoverclusters)) {Import-Module failoverclusters -ErrorAction SilentlyContinue}
	$HVFarm = $HostComputerIdentity
	try {
		if((get-module -Name failoverclusters)) {
			$cluster = get-cluster -ErrorAction SilentlyContinue
			if($cluster) {$HVFarm="$($cluster.Name).$($cluster.Domain)"}
		}
	}
	catch [Exception] {
		#do nothing
	}
	if (!(get-command -Module Hyper-V -Name Get-VM -ErrorAction SilentlyContinue)) {
		Log-Event $START_EVENT_ID $EVENT_TYPE_WARNING ("Get-VM Commandlet doesn't exist.") $TRACE_WARNING
		Throw-EmptyDiscovery
	}
	$oDiscoveryData = $g_api.CreateDiscoveryData(0, $sourceId, $managedEntityId)
	$VMs=Get-VM
	foreach($vm in $vms) {
		try {
			$wmiVM = gwmi -Namespace root\virtualization\v2 -Class Msvm_ComputerSystem -Filter "Name='$($vm.VMId)'"
			if($wmiVM) {
				$PropList = $wmivm.GetRelated("Msvm_KvpExchangeComponent").GuestIntrinsicExchangeItems
				$computerName = Get-KVPData -propList $PropList -key 'FullyQualifiedDomainName'
				$OSPlatformId = Get-KVPData -propList $PropList -key 'OSPlatformId'
				$OSName = Get-KVPData -propList $PropList -key 'OSName'
				$OSVersion = Get-KVPData -propList $PropList -key 'OSVersion'
			}

			$oInstance = $oDiscoveryData.CreateClassInstance("$MPElement[Name='QND.Hyperv.2012R2.VM']$")
			$oInstance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $vm.VMName)		  
			$oInstance.AddProperty("$MPElement[Name='SHL!System.ComputerHardware']/NumberOfProcessors$",  (NullIsZero $vm.ProcessorCount))
			$oInstance.AddProperty("$MPElement[Name='SHL!System.ComputerHardware']/Model$",  'Virtual Machine')	
			$oInstance.AddProperty("$MPElement[Name='SHL!System.ComputerHardware']/Manufacturer$",  'Microsoft Hyper-V')	
			$oInstance.AddProperty("$MPElement[Name='QND.Hyperv.2012R2.VM']/HostName$", $HostComputerIdentity)
			$oInstance.AddProperty("$MPElement[Name='QND.Hyperv.2012R2.VM']/VirtualMachineId$", $vm.Id.ToString())
			$oInstance.AddProperty("$MPElement[Name='QND.Hyperv.2012R2.VM']/VirtualMachineName$", $vm.VMName)

			if($vm.IntegrationServicesVersion) {$oInstance.AddProperty("$MPElement[Name='QND.Hyperv.2012R2.VM']/ISVersion$", $vm.IntegrationServicesVersion.ToString())}
			$oInstance.AddProperty("$MPElement[Name='QND.Hyperv.2012R2.VM']/RMEnabled$", (NullIsFalse $vm.ResourceMeteringEnabled))
			$oInstance.AddProperty("$MPElement[Name='QND.Hyperv.2012R2.VM']/VMGeneration$", (NullIsZero $vm.Generation))
			$oInstance.AddProperty("$MPElement[Name='QND.Hyperv.2012R2.VM']/HA$", (NullIsFalse $vm.IsClustered))
	#there's a bug in HypervPOSH for fixed memory VMs, sometimes wrong values are returned for minimum and maximum memory
			if($vm.DynamicMemoryEnabled) {
				$oInstance.AddProperty("$MPElement[Name='QND.Hyperv.2012R2.VM']/MinMemory$", (NullIsZero ($vm.MemoryMinimum/1MB)))
				$oInstance.AddProperty("$MPElement[Name='QND.Hyperv.2012R2.VM']/MaxMemory$", (NullIsZero ($vm.MemoryMaximum/1MB)))
				$oInstance.AddProperty("$MPElement[Name='QND.Hyperv.2012R2.VM']/StartMemory$", (NullIsZero ($vm.MemoryStartup/1MB)))
			}
			else {
				$oInstance.AddProperty("$MPElement[Name='QND.Hyperv.2012R2.VM']/MinMemory$", (NullIsZero ($vm.MemoryStartup/1MB)))
				$oInstance.AddProperty("$MPElement[Name='QND.Hyperv.2012R2.VM']/MaxMemory$", (NullIsZero ($vm.MemoryStartup/1MB)))
				$oInstance.AddProperty("$MPElement[Name='QND.Hyperv.2012R2.VM']/StartMemory$", (NullIsZero ($vm.MemoryStartup/1MB)))
			}
			if((NullIsFalse $vm.IsClustered) -eq $true) {$oInstance.AddProperty("$MPElement[Name='QND.Hyperv.2012R2.VM']/HVFarm$", $HVFarm)}
			else {$oInstance.AddProperty("$MPElement[Name='QND.Hyperv.2012R2.VM']/HVFarm$", $HostComputerIdentity)}

			if (![String]::IsNullOrEmpty($computerName)) {$oInstance.AddProperty("$MPElement[Name='QND.Hyperv.2012R2.VM']/VMComputerName$", $computerName)}
			if (![String]::IsNullOrEmpty($OSName))	{$oInstance.AddProperty("$MPElement[Name='QND.Hyperv.2012R2.VM']/OSName$", $OSName)}
			if (![String]::IsNullOrEmpty($OSVersion))	{$oInstance.AddProperty("$MPElement[Name='QND.Hyperv.2012R2.VM']/OSVersion$", $OSVersion)}

			if (![String]::IsNullOrEmpty($OSPlatformId))
			{
				$oInstance.AddProperty("$MPElement[Name='QND.Hyperv.2012R2.VM']/OSPlatformId$", [int]$OSPlatformId)
				If($OSPlatformId -eq 2) {$oInstance.AddProperty("$MPElement[Name='QND.Hyperv.2012R2.VM']/OSFamily$", 'Windows')}
				else {$oInstance.AddProperty("$MPElement[Name='QND.Hyperv.2012R2.VM']/OSFamily$", 'Linux')}
			}

			$oDiscoveryData.AddInstance($oInstance);

			#Create HealthService Relationship
			#Discover HealthService
			$healthservice = $oDiscoveryData.CreateClassInstance("$MPElement[Name='SC!Microsoft.SystemCenter.HealthService']$")
			$healthservice.AddProperty("$MPElement[Name='Windows!Microsoft.Windows.Computer']/PrincipalName$", $HostComputerIdentity)
			$oDiscoveryData.AddInstance($healthService)
			#Create HealthServiceShouldManageEntity Relationship
			$rel = $oDiscoveryData.CreateRelationshipInstance("$MPElement[Name='SC!Microsoft.SystemCenter.HealthServiceShouldManageEntity']$")
			$Rel.Source=$HealthService
			$Rel.Target=$oInstance
			$oDiscoveryData.AddInstance($Rel)

			#discover disks
			$diskDetails = Get-VHD -VMId $vm.VMId
			foreach($disk in $vm.HardDrives) {
				$oDisk = $oDiscoveryData.CreateClassInstance("$MPElement[Name='QND.HyperV.2012R2.VirtualDrive']$")	
				$oDisk.AddProperty("$MPElement[Name='QND.Hyperv.2012R2.VM']/VirtualMachineId$", $vm.Id.ToString())	
				$oDisk.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", "$($vm.Name) - $($disk.Name)")		
				$oDisk.AddProperty("$MPElement[Name='QND.HyperV.VMHardwareComponent']/DeviceId$", $disk.Id)
				$oDisk.AddProperty("$MPElement[Name='QND.HyperV.VMHardwareComponent']/Name$", $disk.Name)
				if($disk.ControllerType) {$oDisk.AddProperty("$MPElement[Name='QND.HyperV.2012R2.VirtualDrive']/ConnectedControllerName$", $disk.ControllerType.ToString())}
				$oDisk.AddProperty("$MPElement[Name='QND.HyperV.2012R2.VirtualDrive']/ImageFile$", $disk.Path)
				#Fix UNC perf counter path
				try {
					if (([Uri]$disk.Path).IsUnc -eq $true) {
						$perfInstance = $disk.Path.Replace('\','-').Insert(2,'?-UNC-')
					} else {
						$perfInstance = $disk.Path.Replace('\','-')
					}
				}
				catch {$perfInstance=''}				
				$oDisk.AddProperty("$MPElement[Name='QND.HyperV.VMHardwareComponent']/PerfInstance$", $perfInstance )
				
				$details = $diskDetails | where {$_.Path -ieq $disk.Path}
				If($details) {
					if($details.VhdFormat) {$oDisk.AddProperty("$MPElement[Name='QND.HyperV.2012R2.VirtualDrive']/VHDFormat$", $details.VhdFormat.ToString())}
					if($details.VhdType) {$oDisk.AddProperty("$MPElement[Name='QND.HyperV.2012R2.VirtualDrive']/VHDType$", $details.VhdType.ToString())}
					$oDisk.AddProperty("$MPElement[Name='QND.HyperV.2012R2.VirtualDrive']/MaxSizeGB$", (NullIsZero ($details.Size/1GB)))
				}
				$oDiscoveryData.AddInstance($oDisk)
				#$rel = $oDiscoveryData.CreateRelationshipInstance("$MPElement[Name='QND.Hyperv.2012R2.VMHostsVMHardwareComponent']$")
				#$Rel.Source=$oInstance
				#$Rel.Target=$oDisk
				#$oDiscoveryData.AddInstance($Rel)
			}

			foreach($nic in $vm.NetworkAdapters) {
				$oNic = $oDiscoveryData.CreateClassInstance("$MPElement[Name='QND.HyperV.2012R2.VirtualNetworkAdapter']$")	
				$oNic.AddProperty("$MPElement[Name='QND.Hyperv.2012R2.VM']/VirtualMachineId$", $vm.Id.ToString())		
				$oNic.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", "$($vm.Name) - $($nic.Name) on $($nic.SwitchName)")	
				$oNic.AddProperty("$MPElement[Name='QND.HyperV.VMHardwareComponent']/DeviceId$", $nic.Id)
				$oNic.AddProperty("$MPElement[Name='QND.HyperV.VMHardwareComponent']/Name$", "$($nic.Name) on $($nic.SwitchName)")
				if($nic.SwitchId) {$oNic.AddProperty("$MPElement[Name='QND.HyperV.2012R2.VirtualNetworkAdapter']/SwitchId$", $nic.SwitchId.ToString())}
				$oNic.AddProperty("$MPElement[Name='QND.HyperV.2012R2.VirtualNetworkAdapter']/SwitchName$", $nic.SwitchName)
				try {$perfInstance = ("$($vm.Name)_$($nic.Name)_$($vm.Id.ToString())--$($nic.AdapterId.ToString())").Replace('\','--')}
				catch {$perfInstance=''}
				$oNic.AddProperty("$MPElement[Name='QND.HyperV.VMHardwareComponent']/PerfInstance$", $perfInstance)
				$oDiscoveryData.AddInstance($oNic)
				#$rel = $oDiscoveryData.CreateRelationshipInstance("$MPElement[Name='QND.Hyperv.2012R2.VMHostsVMHardwareComponent']$")
				#$Rel.Source=$oInstance
				#$Rel.Target=$oNic
				#$oDiscoveryData.AddInstance($Rel)
			
			}
	
			Log-Event $STOP_EVENT_ID $EVENT_TYPE_SUCCESS ("$($vm.VMName) has been discovered on $HostComputerIdentity") $TRACE_INFO
		}
		Catch [Exception] {
			Log-Event $STOP_EVENT_ID $EVENT_TYPE_ERROR ("Failed to discover $($vm.VMName) on $HostComputerIdentity $($Error[0].Exception)") $TRACE_ERROR
		}
	}

	$oDiscoveryData
	If ($traceLevel -eq $TRACE_DEBUG)
	{
		#just for debug proposes when launched from command line does nothing when run inside OpsMgr Agent	
		#it breaks in exception when run insde OpsMgr and POSH IDE	
		$g_API.Return($oDiscoveryData)
	}

	Log-Event $STOP_EVENT_ID $EVENT_TYPE_SUCCESS ("has completed successfully in " + ((Get-Date)- ($dtstart)).TotalSeconds + " seconds.") $TRACE_INFO
}
Catch [Exception] {
	Log-Event $FAILURE_EVENT_ID $EVENT_TYPE_ERROR ("Fatal Error in Main $($Error[0].Exception)") $TRACE_ERROR	
	write-Verbose $("TRAPPED: " + $_.Exception.GetType().FullName); 
	Write-Verbose $("TRAPPED: " + $_.Exception.Message); 
}				  
]]>
                </ScriptBody>
                <Parameters>
                  <Parameter>
                    <Name>TraceLevel</Name>
                    <Value>$Config/TraceLevel$</Value>
                  </Parameter>
                  <Parameter>
                    <Name>SourceID</Name>
                    <Value>$MPElement$</Value>
                  </Parameter>
                  <Parameter>
                    <Name>ManagedEntityID</Name>
                    <Value>$Target/Id$</Value>
                  </Parameter>
                  <Parameter>
                    <Name>HostComputerIdentity</Name>
                    <Value>$Config/TargetComputer$</Value>
                  </Parameter>
                </Parameters>
                <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
                <StrictErrorHandling>false</StrictErrorHandling>
              </ProbeAction>
            </MemberModules>
            <Composition>
              <Node ID="Discovery" />
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.Discovery.Data</OutputType>
        <InputType>System!System.BaseData</InputType>
      </ProbeActionModuleType>
      <ProbeActionModuleType ID="QND.Hyperv2012R2.VMReplicaStatus.PT" Accessibility="Public" Batching="false">
        <Configuration>
          <xsd:element name="TimeoutSeconds" type="xsd:int" minOccurs="0" maxOccurs="1" default="60" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="TraceLevel" type="xsd:int" minOccurs="0" maxOccurs="1" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
          <OverrideableParameter ID="TraceLevel" ParameterType="int" Selector="$Config/TraceLevel$" />
        </OverrideableParameters>
        <ModuleImplementation>
          <Composite>
            <MemberModules>
              <ProbeAction ID="Stats" TypeID="Windows!Microsoft.Windows.PowerShellPropertyBagProbe">
                <ScriptName>Get-VMReplicaStatus.ps1</ScriptName>
                <ScriptBody>
                  <![CDATA[#TO SHOW VERBOSE MESSAGES SET $VerbosePreference="continue"
#SET ErrorLevel to 5 so show discovery info

#*************************************************************************
# Script Name - Get-VMReplicaStatus.ps1
# Author	  -  - Progel spa
# Version  - 1.0 24.09.2007
# Purpose     - 
#               
# Assumptions - 
#				
#               
# Parameters  - TraceLevel
#             - ComputerName
#				- SourceId
#				- ManagedEntityId
# Command Line - .\test.ps1 4 "serverName" '{1860E0EB-8C21-41DA-9F35-2FE9343CCF36}' '{1860E0EB-8C21-41DA-9F35-2FE9343CCF36}'
# If discovery must be added the followinf parameters
#				SourceId ($ MPElement $ )
#				ManagedEntityId ($ Target/Id $)
#
# Output properties
#
# Status
#
# Version History
#	  1.0 21.02.2015 DG First Release
#     
#
# (c) Copyright 2015, Progel spa, All Rights Reserved
# Proprietary and confidential to Progel srl              
#
#*************************************************************************


# Get the named parameters
param([int]$traceLevel=$(throw 'must have a value'),
	[string]$VMGuid)

	[Threading.Thread]::CurrentThread.CurrentCulture = "en-US"        
	[Threading.Thread]::CurrentThread.CurrentUICulture = "en-US"
	
#Constants used for event logging
$SCRIPT_NAME			= "Get-VMReplicaStatus.ps1"
$SCRIPT_ARGS = 1
$SCRIPT_STARTED			= 831
$PROPERTYBAG_CREATED	= 832
$SCRIPT_ENDED			= 835
$SCRIPT_VERSION = "1.0"

#region Constants
#Trace Level Costants
$TRACE_NONE 	= 0
$TRACE_ERROR 	= 1
$TRACE_WARNING = 2
$TRACE_INFO 	= 3
$TRACE_VERBOSE = 4
$TRACE_DEBUG = 5

#Event Type Constants
$EVENT_TYPE_SUCCESS      = 0
$EVENT_TYPE_ERROR        = 1
$EVENT_TYPE_WARNING      = 2
$EVENT_TYPE_INFORMATION  = 4
$EVENT_TYPE_AUDITSUCCESS = 8
$EVENT_TYPE_AUDITFAILURE = 16

#Standard Event IDs
$FAILURE_EVENT_ID = 4000		#errore generico nello script
$SUCCESS_EVENT_ID = 1101
$START_EVENT_ID = 1102
$STOP_EVENT_ID = 1103

#TypedPropertyBag
$AlertDataType = 0
$EventDataType	= 2
$PerformanceDataType = 2
$StateDataType       = 3
#endregion

#region Helper Functions
function Log-Params
{
	param($Invocation)
	$line=''
	foreach($key in $Invocation.BoundParameters.Keys) {$line += "$key=$($Invocation.BoundParameters[$key])  "}
	Log-Event $START_EVENT_ID $EVENT_TYPE_INFORMATION  ("Starting script. Invocation Name:$($Invocation.InvocationName)`n Parameters`n $line") $TRACE_INFO
}


function Log-Event
{
	param($eventID, $eventType, $msg, $level)
	
	Write-Verbose ("Logging event. " + $SCRIPT_NAME + " EventID: " + $eventID + " eventType: " + $eventType + " Version:" + $SCRIPT_VERSION + " --> " + $msg)
	if($level -le $P_TraceLevel)
	{
		Write-Host ("Logging event. " + $SCRIPT_NAME + " EventID: " + $eventID + " eventType: " + $eventType + " Version:" + $SCRIPT_VERSION + " --> " + $msg)
		$g_API.LogScriptEvent($SCRIPT_NAME,$eventID,$eventType, ($msg + "`n" + "Version :" + $SCRIPT_VERSION))
	}
}

Function Throw-EmptyDiscovery
{
	param($SourceId, $ManagedEntityId)

	$oDiscoveryData = $g_API.CreateDiscoveryData(0, $SourceId, $ManagedEntityId)
	Log-Event $FAILURE_EVENT_ID $EVENT_TYPE_WARNING "Exiting with empty discovery data" $TRACE_INFO
	$oDiscoveryData
	If($traceLevel -eq $TRACE_DEBUG)
	{
		#just for debug proposes when launched from command line does nothing when run inside OpsMgr Agent
		$g_API.Return($oDiscoveryData)
	}
}

Function Throw-KeepDiscoveryInfo
{
param($SourceId, $ManagedEntityId)
	$oDiscoveryData = $g_API.CreateDiscoveryData(0,$SourceId,$ManagedEntityId)
	#Instead of Snapshot discovery, submit Incremental discovery data
	$oDiscoveryData.IsSnapshot = $false
	Log-Event $FAILURE_EVENT_ID $EVENT_TYPE_WARNING "Exiting with null non snapshot discovery data" $TRACE_INFO
	$oDiscoveryData    
	If($traceLevel -eq $TRACE_DEBUG)
	{
		#just for debug proposes when launched from command line does nothing when run inside OpsMgr Agent	
		$g_API.Return($oDiscoveryData)
	}
}
#endregion


#Start by setting up API object.
	$P_TraceLevel = $TRACE_VERBOSE
	$g_Api = New-Object -comObject 'MOM.ScriptAPI'
	#$g_RegistryStatePath = "HKLM\" + $g_API.GetScriptStateKeyPath($SCRIPT_NAME)

	$dtStart = Get-Date
	$P_TraceLevel = $traceLevel
	Log-Params $MyInvocation

try
{
	if (!(get-Module -Name Hyper-v)) {Import-Module Hyper-v}


	if (!(get-command -Module Hyper-V -Name Get-VM -ErrorAction SilentlyContinue)) {
		Log-Event $START_EVENT_ID $EVENT_TYPE_WARNING ("Get-VM Commandlet doesn't exist.") $TRACE_WARNING
		Exit 1;
	}

	if ($VMGuid -ine 'ignore') {	#here we're in atask targeted at a specific VM
		$vm = Get-VM | where {$_.VMId -ieq $VMGuid}
		if ($vm) {
			$replica = Get-VMReplication -VM $vm
			Write-Host "$($vm.Name) Replication mode: $($vm.ReplicationMode.ToString())"
			Write-Host "Replication Health: $($replica.ReplicationHealth.ToString()) State: $($replica.ReplicationState.ToString())"
			Write-Host "Last replication: $($replica.LastReplicationTime)"
			Write-Host "Replica state dump: "
			$replica | fl *
			Write-Host "Replica measure dump: "
			Mesaure-VMReplica -VM $vm | fl *
		}
		else {
			Write-Host "VM with Guid $VMGuid not found on host!"
		}
		exit;
	}

	$vms = @(gwmi Msvm_ComputerSystem -namespace "root\virtualization\v2" | where {$_.ReplicationMode -ne 0 -and $_.ReplicationMode -ne $null})
	foreach($vm in $vms) {
		$VMId = $vm.Name
		$LastReplicationTime=[System.Management.ManagementDateTimeConverter]::ToDateTime($vm.LastReplicationTime) 
		$VMReplicationMode=$vm.ReplicationMode
		$VMReplicationHealthCode=$vm.ReplicationHealth
		$VMReplicationStateCode=$vm.ReplicationState

	#need to use Msvm_ReplicationRelationship
	$VMReplicationState= switch ($VMReplicationStateCode)
	{
		0 {'Disabled'}
		1 {'Ready for replication'}
		2 {'Waiting to complete initial replication'}
		3 {'Replicating'}
		4 {'Synced replication complete'}
		5 {'Recovered'}
		6 {'Committed'}
		7 {'Suspended'}
		8 {'Critical'}
		9 {'Waiting to start resynchronization'}
		10 {'Resynchronizing'}
		11 {'Resynchronization suspended'}
		12 {'Failover in progress'}
		13 {'Failback in progress'}
		14 {'Failback complete'}
		default {'Unknown'};
	}
		
		$VMReplicationHealth= switch ($VMReplicationHealthCode) {
			0 {'Disabled'}
			1 {'OK'}	
			2 {'Warning'}
			3 {'Critical'}
			default {'Unknown'}
		}

		$replicaAgeHours = ([DateTime]::Now - $LastReplicationTime).TotalHours
		$bag = $g_api.CreatePropertyBag()
		$bag.AddValue('VMId',$VMId)
		$bag.AddValue('ReplicationMode', $VMReplicationMode) #to be used in filters, we just monitor primary replica side ==1
		$bag.AddValue('ReplicationHealthCode',$VMReplicationHealthCode)
		$bag.AddValue('ReplicationHealth',$VMReplicationHealth)
		$bag.AddValue('ReplicationStateCode',$VMReplicationStateCode)
		$bag.AddValue('ReplicationState',$VMReplicationState)
		$bag.AddValue('ReplicaAgeHours',$replicaAgeHours)
		$bag

	$message="$($vm.Name) Replica State is: $($vmreplicationstatecode) Replica Health Is: $($vmreplicationhealthcode). Replica Age is: $replicaAgeHours"
		Log-Event $START_EVENT_ID $EVENT_TYPE_INFO ("$($vm.VMName) has been processed `n $message") $TRACE_DEBUG
	}

	#Debug the pèowershll module has issues in both caching (results doesn't change between iterations and values returned so we're not going to use POSH
	$vms = Get-VM | where {$_.ReplicationMode.Value__ -ne 0}	#use the enum codes instead of labels 0 = 'None'
	$vms=$null #debug not using POSH
	foreach($vm in $vms) {
		$replica = Get-VMReplication -VM $vm
		$VMId = $vm.VMId.ToString()
		$LastReplicationTime=$replica.LastReplicationTime
		$VMReplicationMode=$vm.ReplicationMode.value__
		$VMReplicationHealthCode=$replica.ReplicationHealth.Value__
		$VMReplicationStateCode=$replica.ReplicationState.Value__
		$VMReplicationState=$replica.ReplicationState.ToString()
		$VMRepliactionHealth=$replica.ReplicationHealth.ToString()	
		$message="$($vm.Name) Replica State is: $($vmreplicationstatecode) Replica Health Is: $($vmreplicationhealthcode). Replica Age is: $replicaAgeHours"
		Log-Event $START_EVENT_ID $EVENT_TYPE_INFO ("$($vm.VMName) has been processed `n $message") $TRACE_DEBUG

	}

	Log-Event $STOP_EVENT_ID $EVENT_TYPE_SUCCESS ("has completed successfully in " + ((Get-Date)- ($dtstart)).TotalSeconds + " seconds.") $TRACE_INFO
}
Catch [Exception] {
	Log-Event $FAILURE_EVENT_ID $EVENT_TYPE_WARNING ("Main " + $Error) $TRACE_WARNING	
	write-Verbose $("TRAPPED: " + $_.Exception.GetType().FullName); 
	Write-Verbose $("TRAPPED: " + $_.Exception.Message); 
}
]]>
                </ScriptBody>
                <Parameters>
                  <Parameter>
                    <Name>TraceLevel</Name>
                    <Value>$Config/TraceLevel$</Value>
                  </Parameter>
                  <Parameter>
                    <Name>VMGuid</Name>
                    <Value>ignore</Value>
                  </Parameter>
                </Parameters>
                <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
                <StrictErrorHandling>false</StrictErrorHandling>
                <!-- true only for Tasks -->
              </ProbeAction>
            </MemberModules>
            <Composition>
              <Node ID="Stats" />
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.PropertyBagData</OutputType>
        <InputType>System!System.BaseData</InputType>
      </ProbeActionModuleType>
      <ProbeActionModuleType ID="QND.Hyperv2012R2.VMReplicaStatusTask.PT" Accessibility="Public" Batching="false">
        <Configuration>
          <xsd:element name="TimeoutSeconds" type="xsd:int" minOccurs="0" maxOccurs="1" default="60" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="TraceLevel" type="xsd:int" minOccurs="0" maxOccurs="1" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="VMId" type="xsd:string" minOccurs="1" maxOccurs="1" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
          <OverrideableParameter ID="TraceLevel" ParameterType="int" Selector="$Config/TraceLevel$" />
        </OverrideableParameters>
        <ModuleImplementation>
          <Composite>
            <MemberModules>
              <ProbeAction ID="Stats" TypeID="Windows!Microsoft.Windows.PowerShellProbe">
                <ScriptName>Get-VMReplicaStatus.ps1</ScriptName>
                <ScriptBody>
                  <![CDATA[#TO SHOW VERBOSE MESSAGES SET $VerbosePreference="continue"
#SET ErrorLevel to 5 so show discovery info

#*************************************************************************
# Script Name - Get-VMReplicaStatus.ps1
# Author	  -  - Progel spa
# Version  - 1.0 24.09.2007
# Purpose     - 
#               
# Assumptions - 
#				
#               
# Parameters  - TraceLevel
#             - ComputerName
#				- SourceId
#				- ManagedEntityId
# Command Line - .\test.ps1 4 "serverName" '{1860E0EB-8C21-41DA-9F35-2FE9343CCF36}' '{1860E0EB-8C21-41DA-9F35-2FE9343CCF36}'
# If discovery must be added the followinf parameters
#				SourceId ($ MPElement $ )
#				ManagedEntityId ($ Target/Id $)
#
# Output properties
#
# Status
#
# Version History
#	  1.0 21.02.2015 DG First Release
#     
#
# (c) Copyright 2015, Progel spa, All Rights Reserved
# Proprietary and confidential to Progel srl              
#
#*************************************************************************


# Get the named parameters
param([int]$traceLevel=$(throw 'must have a value'),
	[string]$VMGuid)

	[Threading.Thread]::CurrentThread.CurrentCulture = "en-US"        
	[Threading.Thread]::CurrentThread.CurrentUICulture = "en-US"
	
#Constants used for event logging
$SCRIPT_NAME			= "Get-VMReplicaStatus.ps1"
$SCRIPT_ARGS = 1
$SCRIPT_STARTED			= 831
$PROPERTYBAG_CREATED	= 832
$SCRIPT_ENDED			= 835
$SCRIPT_VERSION = "1.0"

#region Constants
#Trace Level Costants
$TRACE_NONE 	= 0
$TRACE_ERROR 	= 1
$TRACE_WARNING = 2
$TRACE_INFO 	= 3
$TRACE_VERBOSE = 4
$TRACE_DEBUG = 5

#Event Type Constants
$EVENT_TYPE_SUCCESS      = 0
$EVENT_TYPE_ERROR        = 1
$EVENT_TYPE_WARNING      = 2
$EVENT_TYPE_INFORMATION  = 4
$EVENT_TYPE_AUDITSUCCESS = 8
$EVENT_TYPE_AUDITFAILURE = 16

#Standard Event IDs
$FAILURE_EVENT_ID = 4000		#errore generico nello script
$SUCCESS_EVENT_ID = 1101
$START_EVENT_ID = 1102
$STOP_EVENT_ID = 1103

#TypedPropertyBag
$AlertDataType = 0
$EventDataType	= 2
$PerformanceDataType = 2
$StateDataType       = 3
#endregion

#region Helper Functions
function Log-Params
{
	param($Invocation)
	$line=''
	foreach($key in $Invocation.BoundParameters.Keys) {$line += "$key=$($Invocation.BoundParameters[$key])  "}
	Log-Event $START_EVENT_ID $EVENT_TYPE_INFORMATION  ("Starting script. Invocation Name:$($Invocation.InvocationName)`n Parameters`n $line") $TRACE_INFO
}


function Log-Event
{
	param($eventID, $eventType, $msg, $level)
	
	Write-Verbose ("Logging event. " + $SCRIPT_NAME + " EventID: " + $eventID + " eventType: " + $eventType + " Version:" + $SCRIPT_VERSION + " --> " + $msg)
	if($level -le $P_TraceLevel)
	{
		Write-Host ("Logging event. " + $SCRIPT_NAME + " EventID: " + $eventID + " eventType: " + $eventType + " Version:" + $SCRIPT_VERSION + " --> " + $msg)
		$g_API.LogScriptEvent($SCRIPT_NAME,$eventID,$eventType, ($msg + "`n" + "Version :" + $SCRIPT_VERSION))
	}
}

Function Throw-EmptyDiscovery
{
	param($SourceId, $ManagedEntityId)

	$oDiscoveryData = $g_API.CreateDiscoveryData(0, $SourceId, $ManagedEntityId)
	Log-Event $FAILURE_EVENT_ID $EVENT_TYPE_WARNING "Exiting with empty discovery data" $TRACE_INFO
	$oDiscoveryData
	If($traceLevel -eq $TRACE_DEBUG)
	{
		#just for debug proposes when launched from command line does nothing when run inside OpsMgr Agent
		$g_API.Return($oDiscoveryData)
	}
}

Function Throw-KeepDiscoveryInfo
{
param($SourceId, $ManagedEntityId)
	$oDiscoveryData = $g_API.CreateDiscoveryData(0,$SourceId,$ManagedEntityId)
	#Instead of Snapshot discovery, submit Incremental discovery data
	$oDiscoveryData.IsSnapshot = $false
	Log-Event $FAILURE_EVENT_ID $EVENT_TYPE_WARNING "Exiting with null non snapshot discovery data" $TRACE_INFO
	$oDiscoveryData    
	If($traceLevel -eq $TRACE_DEBUG)
	{
		#just for debug proposes when launched from command line does nothing when run inside OpsMgr Agent	
		$g_API.Return($oDiscoveryData)
	}
}
#endregion


#Start by setting up API object.
	$P_TraceLevel = $TRACE_VERBOSE
	$g_Api = New-Object -comObject 'MOM.ScriptAPI'
	#$g_RegistryStatePath = "HKLM\" + $g_API.GetScriptStateKeyPath($SCRIPT_NAME)

	$dtStart = Get-Date
	$P_TraceLevel = $traceLevel
	Log-Params $MyInvocation

try
{
	if (!(get-Module -Name Hyper-v)) {Import-Module Hyper-v}


	if (!(get-command -Module Hyper-V -Name Get-VM -ErrorAction SilentlyContinue)) {
		Log-Event $START_EVENT_ID $EVENT_TYPE_WARNING ("Get-VM Commandlet doesn't exist.") $TRACE_WARNING
		Exit 1;
	}

	if ($VMGuid -ine 'ignore') {	#here we're in atask targeted at a specific VM
		$vm = Get-VM | where {$_.VMId -ieq $VMGuid}
		if ($vm) {
			$replica = Get-VMReplication -VM $vm
			Write-Host "$($vm.Name) Replication mode: $($vm.ReplicationMode.ToString())"
			Write-Host "Replication Health: $($replica.ReplicationHealth.ToString()) State: $($replica.ReplicationState.ToString())"
			Write-Host "Last replication: $($replica.LastReplicationTime)"
			Write-Host "Replica state dump: "
			$replica | fl *
			Write-Host "Replica measure dump: "
			Mesaure-VMReplica -VM $vm | fl *
		}
		else {
			Write-Host "VM with Guid $VMGuid not found on host!"
		}
		exit;
	}

	$vms = @(gwmi Msvm_ComputerSystem -namespace "root\virtualization\v2" | where {$_.ReplicationMode -ne 0 -and $_.ReplicationMode -ne $null})
	foreach($vm in $vms) {
		$VMId = $vm.Name
		$LastReplicationTime=[System.Management.ManagementDateTimeConverter]::ToDateTime($vm.LastReplicationTime) 
		$VMReplicationMode=$vm.ReplicationMode
		$VMReplicationHealthCode=$vm.ReplicationHealth
		$VMReplicationStateCode=$vm.ReplicationState

	#need to use Msvm_ReplicationRelationship
	$VMReplicationState= switch ($VMReplicationStateCode)
	{
		0 {'Disabled'}
		1 {'Ready for replication'}
		2 {'Waiting to complete initial replication'}
		3 {'Replicating'}
		4 {'Synced replication complete'}
		5 {'Recovered'}
		6 {'Committed'}
		7 {'Suspended'}
		8 {'Critical'}
		9 {'Waiting to start resynchronization'}
		10 {'Resynchronizing'}
		11 {'Resynchronization suspended'}
		12 {'Failover in progress'}
		13 {'Failback in progress'}
		14 {'Failback complete'}
		default {'Unknown'};
	}
		
		$VMReplicationHealth= switch ($VMReplicationHealthCode) {
			0 {'Disabled'}
			1 {'OK'}	
			2 {'Warning'}
			3 {'Critical'}
			default {'Unknown'}
		}

		$replicaAgeHours = ([DateTime]::Now - $LastReplicationTime).TotalHours
		$bag = $g_api.CreatePropertyBag()
		$bag.AddValue('VMId',$VMId)
		$bag.AddValue('ReplicationMode', $VMReplicationMode) #to be used in filters, we just monitor primary replica side ==1
		$bag.AddValue('ReplicationHealthCode',$VMReplicationHealthCode)
		$bag.AddValue('ReplicationHealth',$VMReplicationHealth)
		$bag.AddValue('ReplicationStateCode',$VMReplicationStateCode)
		$bag.AddValue('ReplicationState',$VMReplicationState)
		$bag.AddValue('ReplicaAgeHours',$replicaAgeHours)
		$bag

	$message="$($vm.Name) Replica State is: $($vmreplicationstatecode) Replica Health Is: $($vmreplicationhealthcode). Replica Age is: $replicaAgeHours"
		Log-Event $START_EVENT_ID $EVENT_TYPE_INFO ("$($vm.VMName) has been processed `n $message") $TRACE_DEBUG
	}

	#Debug the pèowershll module has issues in both caching (results doesn't change between iterations and values returned so we're not going to use POSH
	$vms = Get-VM | where {$_.ReplicationMode.Value__ -ne 0}	#use the enum codes instead of labels 0 = 'None'
	$vms=$null #debug not using POSH
	foreach($vm in $vms) {
		$replica = Get-VMReplication -VM $vm
		$VMId = $vm.VMId.ToString()
		$LastReplicationTime=$replica.LastReplicationTime
		$VMReplicationMode=$vm.ReplicationMode.value__
		$VMReplicationHealthCode=$replica.ReplicationHealth.Value__
		$VMReplicationStateCode=$replica.ReplicationState.Value__
		$VMReplicationState=$replica.ReplicationState.ToString()
		$VMRepliactionHealth=$replica.ReplicationHealth.ToString()	
		$message="$($vm.Name) Replica State is: $($vmreplicationstatecode) Replica Health Is: $($vmreplicationhealthcode). Replica Age is: $replicaAgeHours"
		Log-Event $START_EVENT_ID $EVENT_TYPE_INFO ("$($vm.VMName) has been processed `n $message") $TRACE_DEBUG

	}

	Log-Event $STOP_EVENT_ID $EVENT_TYPE_SUCCESS ("has completed successfully in " + ((Get-Date)- ($dtstart)).TotalSeconds + " seconds.") $TRACE_INFO
}
Catch [Exception] {
	Log-Event $FAILURE_EVENT_ID $EVENT_TYPE_WARNING ("Main " + $Error) $TRACE_WARNING	
	write-Verbose $("TRAPPED: " + $_.Exception.GetType().FullName); 
	Write-Verbose $("TRAPPED: " + $_.Exception.Message); 
}
]]>
                </ScriptBody>
                <Parameters>
                  <Parameter>
                    <Name>TraceLevel</Name>
                    <Value>$Config/TraceLevel$</Value>
                  </Parameter>
                  <Parameter>
                    <Name>VMGuid</Name>
                    <Value>$Config/VMId$</Value>
                  </Parameter>
                </Parameters>
                <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
                <StrictErrorHandling>true</StrictErrorHandling>
                <!-- true only for Tasks -->
              </ProbeAction>
            </MemberModules>
            <Composition>
              <Node ID="Stats" />
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>Windows!Microsoft.Windows.SerializedObjectData</OutputType>
        <InputType>System!System.BaseData</InputType>
      </ProbeActionModuleType>
      <ProbeActionModuleType ID="QND.Hyperv.2012R2.VMDetailsTask.PT" Accessibility="Public" Batching="false">
        <Configuration>
          <xsd:element name="TimeoutSeconds" type="xsd:int" minOccurs="0" maxOccurs="1" default="60" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="TraceLevel" type="xsd:int" minOccurs="0" maxOccurs="1" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="VMId" type="xsd:string" minOccurs="1" maxOccurs="1" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
          <OverrideableParameter ID="TraceLevel" ParameterType="int" Selector="$Config/TraceLevel$" />
        </OverrideableParameters>
        <ModuleImplementation>
          <Composite>
            <MemberModules>
              <ProbeAction ID="Stats" TypeID="Windows!Microsoft.Windows.PowerShellProbe">
                <ScriptName>Get-VMDetails.ps1</ScriptName>
                <ScriptBody>
                  <![CDATA[#TO SHOW VERBOSE MESSAGES SET $VerbosePreference="continue"
#SET ErrorLevel to 5 so show discovery info

#*************************************************************************
# Script Name - Get-VMDetails.ps1
# Author	  -  Daniele Grandini - Progel spa
# Version  - 1.0 01.03.2015
# Purpose     - 
#               
# Assumptions - 
#				
#               
# Parameters  - TraceLevel
#             - ComputerName
#				- SourceId
#				- ManagedEntityId
# Command Line - .\test.ps1 4 "serverName" '{1860E0EB-8C21-41DA-9F35-2FE9343CCF36}' '{1860E0EB-8C21-41DA-9F35-2FE9343CCF36}'
# If discovery must be added the followinf parameters
#				SourceId ($ MPElement $ )
#				ManagedEntityId ($ Target/Id $)
#
# Output properties
#
# Status
#
# Version History
#	  1.0 01.03.2015 DG First Release
#     
#
# (c) Copyright 2015, Progel spa, All Rights Reserved
# Proprietary and confidential to Progel srl              
#
#*************************************************************************


# Get the named parameters
param([int]$traceLevel=$(throw 'must have a value'),
[string]$VMId)

	[Threading.Thread]::CurrentThread.CurrentCulture = "en-US"        
	[Threading.Thread]::CurrentThread.CurrentUICulture = "en-US"
	
#Constants used for event logging
$SCRIPT_NAME			= "Get-VMDetails.ps1"
$SCRIPT_ARGS = 1
$SCRIPT_STARTED			= 831
$PROPERTYBAG_CREATED	= 832
$SCRIPT_ENDED			= 835
$SCRIPT_VERSION = "1.0"

#region Constants
#Trace Level Costants
$TRACE_NONE 	= 0
$TRACE_ERROR 	= 1
$TRACE_WARNING = 2
$TRACE_INFO 	= 3
$TRACE_VERBOSE = 4
$TRACE_DEBUG = 5

#Event Type Constants
$EVENT_TYPE_SUCCESS      = 0
$EVENT_TYPE_ERROR        = 1
$EVENT_TYPE_WARNING      = 2
$EVENT_TYPE_INFORMATION  = 4
$EVENT_TYPE_AUDITSUCCESS = 8
$EVENT_TYPE_AUDITFAILURE = 16

#Standard Event IDs
$FAILURE_EVENT_ID = 4000		#errore generico nello script
$SUCCESS_EVENT_ID = 1101
$START_EVENT_ID = 1102
$STOP_EVENT_ID = 1103

#TypedPropertyBag
$AlertDataType = 0
$EventDataType	= 2
$PerformanceDataType = 2
$StateDataType       = 3
#endregion

#region Helper Functions
function Log-Params
{
	param($Invocation)
	$line=''
	foreach($key in $Invocation.BoundParameters.Keys) {$line += "$key=$($Invocation.BoundParameters[$key])  "}
	Log-Event $START_EVENT_ID $EVENT_TYPE_INFORMATION  ("Starting script. Invocation Name:$($Invocation.InvocationName)`n Parameters`n $line") $TRACE_INFO
}


function Log-Event
{
	param($eventID, $eventType, $msg, $level)
	
	Write-Verbose ("Logging event. " + $SCRIPT_NAME + " EventID: " + $eventID + " eventType: " + $eventType + " Version:" + $SCRIPT_VERSION + " --> " + $msg)
	if($level -le $P_TraceLevel)
	{
		Write-Host ("Logging event. " + $SCRIPT_NAME + " EventID: " + $eventID + " eventType: " + $eventType + " Version:" + $SCRIPT_VERSION + " --> " + $msg)
		$g_API.LogScriptEvent($SCRIPT_NAME,$eventID,$eventType, ($msg + "`n" + "Version :" + $SCRIPT_VERSION))
	}
}

Function Throw-EmptyDiscovery
{
	param($SourceId, $ManagedEntityId)

	$oDiscoveryData = $g_API.CreateDiscoveryData(0, $SourceId, $ManagedEntityId)
	Log-Event $FAILURE_EVENT_ID $EVENT_TYPE_WARNING "Exiting with empty discovery data" $TRACE_INFO
	$oDiscoveryData
	If($traceLevel -eq $TRACE_DEBUG)
	{
		#just for debug proposes when launched from command line does nothing when run inside OpsMgr Agent
		$g_API.Return($oDiscoveryData)
	}
}

Function Throw-KeepDiscoveryInfo
{
param($SourceId, $ManagedEntityId)
	$oDiscoveryData = $g_API.CreateDiscoveryData(0,$SourceId,$ManagedEntityId)
	#Instead of Snapshot discovery, submit Incremental discovery data
	$oDiscoveryData.IsSnapshot = $false
	Log-Event $FAILURE_EVENT_ID $EVENT_TYPE_WARNING "Exiting with null non snapshot discovery data" $TRACE_INFO
	$oDiscoveryData    
	If($traceLevel -eq $TRACE_DEBUG)
	{
		#just for debug proposes when launched from command line does nothing when run inside OpsMgr Agent	
		$g_API.Return($oDiscoveryData)
	}
}
#endregion


#Start by setting up API object.
	$P_TraceLevel = $TRACE_VERBOSE
	$g_Api = New-Object -comObject 'MOM.ScriptAPI'

	$dtStart = Get-Date
	$P_TraceLevel = $traceLevel
	Log-Params $MyInvocation

try
{
	if (!(get-Module -Name Hyper-v)) {Import-Module Hyper-v}


	if (!(get-command -Module Hyper-V -Name Get-VM -ErrorAction SilentlyContinue)) {
		Log-Event $START_EVENT_ID $EVENT_TYPE_WARNING ("Get-VM Commandlet doesn't exist.") $TRACE_WARNING
		Exit 1;
	}
	$vm = Get-VM -Id $VMId
	if(! $vm) {write-host 'Virtual Machine with id:$VMId not found'; exit;}
	$vm | fl *
	Write-Host '-----------------------------------'
	$vm.NetworkAdapters | fl *
	Write-Host '-----------------------------------'
	$vm.HardDrives | fl *
	Log-Event $STOP_EVENT_ID $EVENT_TYPE_SUCCESS ("has completed successfully in " + ((Get-Date)- ($dtstart)).TotalSeconds + " seconds.") $TRACE_INFO
}
Catch [Exception] {
	Log-Event $FAILURE_EVENT_ID $EVENT_TYPE_WARNING ("Main " + $Error) $TRACE_WARNING	
	write-Verbose $("TRAPPED: " + $_.Exception.GetType().FullName); 
	Write-Verbose $("TRAPPED: " + $_.Exception.Message); 
}
]]>
                </ScriptBody>
                <Parameters>
                  <Parameter>
                    <Name>TraceLevel</Name>
                    <Value>$Config/TraceLevel$</Value>
                  </Parameter>
                  <Parameter>
                    <Name>VMId</Name>
                    <Value>$Config/VMId$</Value>
                  </Parameter>
                </Parameters>
                <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
                <StrictErrorHandling>true</StrictErrorHandling>
                <!-- true only for Tasks -->
              </ProbeAction>
            </MemberModules>
            <Composition>
              <Node ID="Stats" />
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>Windows!Microsoft.Windows.SerializedObjectData</OutputType>
        <InputType>System!System.BaseData</InputType>
      </ProbeActionModuleType>
      <ProbeActionModuleType ID="QND.Hyperv2012R2.VMSnapshotAge.PT" Accessibility="Public" Batching="false">
        <Configuration>
          <xsd:element name="TimeoutSeconds" type="xsd:int" minOccurs="0" maxOccurs="1" default="60" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="TraceLevel" type="xsd:int" minOccurs="0" maxOccurs="1" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
          <OverrideableParameter ID="TraceLevel" ParameterType="int" Selector="$Config/TraceLevel$" />
        </OverrideableParameters>
        <ModuleImplementation>
          <Composite>
            <MemberModules>
              <ProbeAction ID="Stats" TypeID="Windows!Microsoft.Windows.PowerShellPropertyBagProbe">
                <ScriptName>Get-VMSnapshotAge.ps1</ScriptName>
                <ScriptBody>
                  <![CDATA[#TO SHOW VERBOSE MESSAGES SET $VerbosePreference="continue"
#SET ErrorLevel to 5 so show discovery info

#*************************************************************************
# Script Name - Get-VMSnapShotAge.ps1
# Author	  - Daniele Grandini - Progel spa
# Version  - 1.0 27/02/2015
# Purpose     - 
#               
# Assumptions - 
#				
#               
# Parameters  - TraceLevel
#             - ComputerName
#				- SourceId
#				- ManagedEntityId
# Command Line - .\test.ps1 4 "serverName" '{1860E0EB-8C21-41DA-9F35-2FE9343CCF36}' '{1860E0EB-8C21-41DA-9F35-2FE9343CCF36}'
# If discovery must be added the followinf parameters
#				SourceId ($ MPElement $ )
#				ManagedEntityId ($ Target/Id $)
#
# Output properties
#
# Status
#
# Version History
#	  1.0 21.02.2015 DG First Release
#     
#
# (c) Copyright 2015, Progel spa, All Rights Reserved
# Proprietary and confidential to Progel srl              
#
#*************************************************************************


# Get the named parameters
param([int]$traceLevel=$(throw 'must have a value'))

	[Threading.Thread]::CurrentThread.CurrentCulture = "en-US"        
	[Threading.Thread]::CurrentThread.CurrentUICulture = "en-US"
	
#Constants used for event logging
$SCRIPT_NAME			= "Get-VMSnapshotAge.ps1"
$SCRIPT_ARGS = 1
$SCRIPT_STARTED			= 831
$PROPERTYBAG_CREATED	= 832
$SCRIPT_ENDED			= 835
$SCRIPT_VERSION = "1.01"

#region Constants
#Trace Level Costants
$TRACE_NONE 	= 0
$TRACE_ERROR 	= 1
$TRACE_WARNING = 2
$TRACE_INFO 	= 3
$TRACE_VERBOSE = 4
$TRACE_DEBUG = 5

#Event Type Constants
$EVENT_TYPE_SUCCESS      = 0
$EVENT_TYPE_ERROR        = 1
$EVENT_TYPE_WARNING      = 2
$EVENT_TYPE_INFORMATION  = 4
$EVENT_TYPE_AUDITSUCCESS = 8
$EVENT_TYPE_AUDITFAILURE = 16

#Standard Event IDs
$FAILURE_EVENT_ID = 4000		#errore generico nello script
$SUCCESS_EVENT_ID = 1101
$START_EVENT_ID = 1102
$STOP_EVENT_ID = 1103

#TypedPropertyBag
$AlertDataType = 0
$EventDataType	= 2
$PerformanceDataType = 2
$StateDataType       = 3
#endregion

#region Helper Functions
function Log-Params
{
	param($Invocation)
	$line=''
	foreach($key in $Invocation.BoundParameters.Keys) {$line += "$key=$($Invocation.BoundParameters[$key])  "}
	Log-Event $START_EVENT_ID $EVENT_TYPE_INFORMATION  ("Starting script. Invocation Name:$($Invocation.InvocationName)`n Parameters`n $line") $TRACE_INFO
}


function Log-Event
{
	param($eventID, $eventType, $msg, $level)
	
	Write-Verbose ("Logging event. " + $SCRIPT_NAME + " EventID: " + $eventID + " eventType: " + $eventType + " Version:" + $SCRIPT_VERSION + " --> " + $msg)
	if($level -le $P_TraceLevel)
	{
		Write-Host ("Logging event. " + $SCRIPT_NAME + " EventID: " + $eventID + " eventType: " + $eventType + " Version:" + $SCRIPT_VERSION + " --> " + $msg)
		$g_API.LogScriptEvent($SCRIPT_NAME,$eventID,$eventType, ($msg + "`n" + "Version :" + $SCRIPT_VERSION))
	}
}

Function Throw-EmptyDiscovery
{
	param($SourceId, $ManagedEntityId)

	$oDiscoveryData = $g_API.CreateDiscoveryData(0, $SourceId, $ManagedEntityId)
	Log-Event $FAILURE_EVENT_ID $EVENT_TYPE_WARNING "Exiting with empty discovery data" $TRACE_INFO
	$oDiscoveryData
	If($traceLevel -eq $TRACE_DEBUG)
	{
		#just for debug proposes when launched from command line does nothing when run inside OpsMgr Agent
		$g_API.Return($oDiscoveryData)
	}
}

Function Throw-KeepDiscoveryInfo
{
param($SourceId, $ManagedEntityId)
	$oDiscoveryData = $g_API.CreateDiscoveryData(0,$SourceId,$ManagedEntityId)
	#Instead of Snapshot discovery, submit Incremental discovery data
	$oDiscoveryData.IsSnapshot = $false
	Log-Event $FAILURE_EVENT_ID $EVENT_TYPE_WARNING "Exiting with null non snapshot discovery data" $TRACE_INFO
	$oDiscoveryData    
	If($traceLevel -eq $TRACE_DEBUG)
	{
		#just for debug proposes when launched from command line does nothing when run inside OpsMgr Agent	
		$g_API.Return($oDiscoveryData)
	}
}
#endregion

Function Get-SnapshotTree()
{
	param($vm,[hashtable] $tree=@{})
	if ($vm.ParentSnapshotId -ne $null) {
		#$tree += $vm.ParentSnapShotId
		$parent = Get-VMSnapshot -Id $vm.ParentSnapShotId
		$tree.Add($vm.ParentSnapshotId, @($parent.CreationTime,$parent.Name))
		Get-SnapshotTree -vm $parent -tree $tree | Out-Null
		#$parentTree = Get-SnapshotTree -vm $parent -tree @{}
		#$tree += $parentTree
		# or 
		# Get-SnapshotTree -vm $parent -tree $tree
		#
		#
	}
	return $tree
}

#Start by setting up API object.
	$P_TraceLevel = $TRACE_VERBOSE
	$g_Api = New-Object -comObject 'MOM.ScriptAPI'
	#$g_RegistryStatePath = "HKLM\" + $g_API.GetScriptStateKeyPath($SCRIPT_NAME)

	$dtStart = Get-Date
	$P_TraceLevel = $traceLevel
	Log-Params $MyInvocation

try
{
		if (!(get-Module -Name Hyper-v)) {Import-Module Hyper-v}

	if (!(get-command -Module Hyper-V -Name Get-VM -ErrorAction SilentlyContinue)) {
		Log-Event $START_EVENT_ID $EVENT_TYPE_WARNING ("Get-VM Commandlet doesn't exist.") $TRACE_WARNING
		Exit 1;
	}

	$vms = get-vm # | where {$_.ParentSnapshotId -ne $null}


	foreach($vm in $vms) {
		$snapshotAgeHours = 0
		$message=''
		if ($vm.ParentSnapshotID -ne $null) {
			$snapshots = Get-SnapshotTree -VM $vm
			foreach($snapKey in $snapshots.Keys) {
				if ($snapshots[$snapKey][0] -le [DateTime]'1900-01-01') {
					$snapConfig = Get-Item -Path "$($vm.ConfigurationLocation)\Snapshots\$($snapKey).xml"
					$snapshots[$snapKey][0] = $snapCOnfig.CreationTime
				}
				$message+="$($snapshots[$snapKey][1]) - $($snapshots[$snapKey][0]) `n"
				if ( $snapshotAgeHours -lt ([DateTime]::Now - $snapshots[$snapKey][0]).TotalHours) {$snapshotAgeHours=([DateTime]::Now - $snapshots[$snapKey][0]).TotalHours }
			}
		}
		$bag = $g_api.CreatePropertyBag()
		$bag.AddValue('VMId',$vm.VMId.ToString())
		$bag.AddValue('OldestSnapshotAgeHours',$snapshotAgeHours ) 
		$bag.AddValue('SnapshotHistory',$message)
		$bag
		Log-Event $START_EVENT_ID $EVENT_TYPE_INFO ("$($vm.VMName) has been processed `n $message") $TRACE_DEBUG
	}
	Log-Event $STOP_EVENT_ID $EVENT_TYPE_SUCCESS ("has completed successfully in " + ((Get-Date)- ($dtstart)).TotalSeconds + " seconds.") $TRACE_INFO
}
Catch [Exception] {
	Log-Event $FAILURE_EVENT_ID $EVENT_TYPE_WARNING ("Main " + $Error) $TRACE_WARNING	
	write-Verbose $("TRAPPED: " + $_.Exception.GetType().FullName); 
	Write-Verbose $("TRAPPED: " + $_.Exception.Message); 
}








#$snapshotFile=$vm.SnapshotFileLocation
#$configFileLocartion="$($vm.ConfigurationsFileLocation)\Snapshots"


foreach($v in $vms) {
	$snapshots = Get-SnapshotTree -VM $v
	$snapConfig = Get-Item -Path "$($vm.ConfigurationLocation)\Snapshots\$($snap.Id).xml"
	$snapCOnfig.CreationTime
}

]]>
                </ScriptBody>
                <Parameters>
                  <Parameter>
                    <Name>TraceLevel</Name>
                    <Value>$Config/TraceLevel$</Value>
                  </Parameter>
                </Parameters>
                <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
                <StrictErrorHandling>false</StrictErrorHandling>
                <!-- true only for Tasks -->
              </ProbeAction>
            </MemberModules>
            <Composition>
              <Node ID="Stats" />
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.PropertyBagData</OutputType>
        <InputType>System!System.BaseData</InputType>
      </ProbeActionModuleType>
      <ProbeActionModuleType ID="QND.Hyperv2012R2.VMISStatus.PT" Accessibility="Public" Batching="false">
        <Configuration>
          <xsd:element name="TimeoutSeconds" type="xsd:int" minOccurs="0" maxOccurs="1" default="60" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="TraceLevel" type="xsd:int" minOccurs="0" maxOccurs="1" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
          <OverrideableParameter ID="TraceLevel" ParameterType="int" Selector="$Config/TraceLevel$" />
        </OverrideableParameters>
        <ModuleImplementation>
          <Composite>
            <MemberModules>
              <ProbeAction ID="Stats" TypeID="Windows!Microsoft.Windows.PowerShellPropertyBagProbe">
                <ScriptName>Get-VMISStatus.ps1</ScriptName>
                <ScriptBody>
                  <![CDATA[#TO SHOW VERBOSE MESSAGES SET $VerbosePreference="continue"
#SET ErrorLevel to 5 so show discovery info

#*************************************************************************
# Script Name - Get-VMISStaus.ps1
# Author	  -  Daniele Grandini - Progel spa
# Version  - 1.0 01.03.2015
# Purpose     - 
#               
# Assumptions - 
#				
#               
# Parameters  - TraceLevel
#             - ComputerName
#				- SourceId
#				- ManagedEntityId
# Command Line - .\test.ps1 4 "serverName" '{1860E0EB-8C21-41DA-9F35-2FE9343CCF36}' '{1860E0EB-8C21-41DA-9F35-2FE9343CCF36}'
# If discovery must be added the followinf parameters
#				SourceId ($ MPElement $ )
#				ManagedEntityId ($ Target/Id $)
#
# Output properties
#
# Status
#
# Version History
#	  1.0 01.03.2015 DG First Release
#     
#
# (c) Copyright 2015, Progel spa, All Rights Reserved
# Proprietary and confidential to Progel srl              
#
#*************************************************************************


# Get the named parameters
param([int]$traceLevel=$(throw 'must have a value'))

	[Threading.Thread]::CurrentThread.CurrentCulture = "en-US"        
	[Threading.Thread]::CurrentThread.CurrentUICulture = "en-US"
	
#Constants used for event logging
$SCRIPT_NAME			= "Get-VMISStatus.ps1"
$SCRIPT_ARGS = 1
$SCRIPT_STARTED			= 831
$PROPERTYBAG_CREATED	= 832
$SCRIPT_ENDED			= 835
$SCRIPT_VERSION = "1.0"

#region Constants
#Trace Level Costants
$TRACE_NONE 	= 0
$TRACE_ERROR 	= 1
$TRACE_WARNING = 2
$TRACE_INFO 	= 3
$TRACE_VERBOSE = 4
$TRACE_DEBUG = 5

#Event Type Constants
$EVENT_TYPE_SUCCESS      = 0
$EVENT_TYPE_ERROR        = 1
$EVENT_TYPE_WARNING      = 2
$EVENT_TYPE_INFORMATION  = 4
$EVENT_TYPE_AUDITSUCCESS = 8
$EVENT_TYPE_AUDITFAILURE = 16

#Standard Event IDs
$FAILURE_EVENT_ID = 4000		#errore generico nello script
$SUCCESS_EVENT_ID = 1101
$START_EVENT_ID = 1102
$STOP_EVENT_ID = 1103

#TypedPropertyBag
$AlertDataType = 0
$EventDataType	= 2
$PerformanceDataType = 2
$StateDataType       = 3
#endregion

#region Helper Functions
function Log-Params
{
	param($Invocation)
	$line=''
	foreach($key in $Invocation.BoundParameters.Keys) {$line += "$key=$($Invocation.BoundParameters[$key])  "}
	Log-Event $START_EVENT_ID $EVENT_TYPE_INFORMATION  ("Starting script. Invocation Name:$($Invocation.InvocationName)`n Parameters`n $line") $TRACE_INFO
}


function Log-Event
{
	param($eventID, $eventType, $msg, $level)
	
	Write-Verbose ("Logging event. " + $SCRIPT_NAME + " EventID: " + $eventID + " eventType: " + $eventType + " Version:" + $SCRIPT_VERSION + " --> " + $msg)
	if($level -le $P_TraceLevel)
	{
		Write-Host ("Logging event. " + $SCRIPT_NAME + " EventID: " + $eventID + " eventType: " + $eventType + " Version:" + $SCRIPT_VERSION + " --> " + $msg)
		$g_API.LogScriptEvent($SCRIPT_NAME,$eventID,$eventType, ($msg + "`n" + "Version :" + $SCRIPT_VERSION))
	}
}

Function Throw-EmptyDiscovery
{
	param($SourceId, $ManagedEntityId)

	$oDiscoveryData = $g_API.CreateDiscoveryData(0, $SourceId, $ManagedEntityId)
	Log-Event $FAILURE_EVENT_ID $EVENT_TYPE_WARNING "Exiting with empty discovery data" $TRACE_INFO
	$oDiscoveryData
	If($traceLevel -eq $TRACE_DEBUG)
	{
		#just for debug proposes when launched from command line does nothing when run inside OpsMgr Agent
		$g_API.Return($oDiscoveryData)
	}
}

Function Throw-KeepDiscoveryInfo
{
param($SourceId, $ManagedEntityId)
	$oDiscoveryData = $g_API.CreateDiscoveryData(0,$SourceId,$ManagedEntityId)
	#Instead of Snapshot discovery, submit Incremental discovery data
	$oDiscoveryData.IsSnapshot = $false
	Log-Event $FAILURE_EVENT_ID $EVENT_TYPE_WARNING "Exiting with null non snapshot discovery data" $TRACE_INFO
	$oDiscoveryData    
	If($traceLevel -eq $TRACE_DEBUG)
	{
		#just for debug proposes when launched from command line does nothing when run inside OpsMgr Agent	
		$g_API.Return($oDiscoveryData)
	}
}
#endregion


#Start by setting up API object.
	$P_TraceLevel = $TRACE_VERBOSE
	$g_Api = New-Object -comObject 'MOM.ScriptAPI'
	$g_RegistryStatePath = "HKLM:\" + $g_API.GetScriptStateKeyPath($SCRIPT_NAME)

	$dtStart = Get-Date
	$P_TraceLevel = $traceLevel
	Log-Params $MyInvocation

try
{
	if (!(get-Module -Name Hyper-v)) {Import-Module Hyper-v}


	if (!(get-command -Module Hyper-V -Name Get-VM -ErrorAction SilentlyContinue)) {
		Log-Event $START_EVENT_ID $EVENT_TYPE_WARNING ("Get-VM Commandlet doesn't exist.") $TRACE_WARNING
		Exit 1;
	}
	$store = Get-Item -Path Registry::$g_RegistryStatePath
	$ISPersisted = @{}
	foreach($value in $store.GetValueNames()) {
		$ISPersisted.Add($value,$store.GetValue($value))
		Remove-ItemProperty -Path Registry::$g_RegistryStatePath -Name $value
	}
	$vms = Get-VM
	foreach($vm in $vms) {
		Log-Event $START_EVENT_ID $EVENT_TYPE_INFO ("Processing $($vm.VMName)") $TRACE_DEBUG

		$ISVersion = $vm.IntegrationServicesVersion
		$ISState= $vm.IntegrationServicesState
		$ISStateCode = switch($ISState) {
			'Up to date' {1}
			'Update required' {2}
			default: {0}
		}

		if ([String]::IsNullOrEmpty($ISVersion) -or $ISState -eq $null) {
			if($ISPersisted.ContainsKey($vm.VMId)) {
				$ISVersion = [String]::Split(',',$ISPersisted[$vm.VMId])[0]
				$ISStateCode = [String]::Split(',',$ISPersisted[$vm.VMId])[1]
			}
		}
		if ([String]::IsNullOrEmpty($ISVersion) -or $ISState -eq $null) {
			Log-Event $START_EVENT_ID $EVENT_TYPE_INFO ("Integration Services Info MIssing for $($vm.VMName)") $TRACE_INFO
			continue
		}
		New-ItemProperty -Path Registry::$g_RegistryStatePath -Name $vm.VMId -PropertyType String -Value ([String]::Join(',',$ISVersion,$ISStateCode))

		$bag = $g_api.CreatePropertyBag()
		$bag.AddValue('VMId',$vm.VMId.ToString())
		$bag.AddValue('ISVersion', $ISVersion) #to be used in filters, we just monitor primary replica side ==1
		$bag.AddValue('ISStateCode',$ISStateCode)
		$bag.AddValue('ISState',$ISState)
		$bag

		$message="$($vm.VMName) IS State is: $ISStateCode Version is: $ISVersion"
		Log-Event $START_EVENT_ID $EVENT_TYPE_INFO ("$($vm.VMName) has been processed `n $message") $TRACE_DEBUG

	}

	Log-Event $STOP_EVENT_ID $EVENT_TYPE_SUCCESS ("has completed successfully in " + ((Get-Date)- ($dtstart)).TotalSeconds + " seconds.") $TRACE_INFO
}
Catch [Exception] {
	Log-Event $FAILURE_EVENT_ID $EVENT_TYPE_WARNING ("Main " + $Error) $TRACE_WARNING	
	write-Verbose $("TRAPPED: " + $_.Exception.GetType().FullName); 
	Write-Verbose $("TRAPPED: " + $_.Exception.Message); 
}
]]>
                </ScriptBody>
                <Parameters>
                  <Parameter>
                    <Name>TraceLevel</Name>
                    <Value>$Config/TraceLevel$</Value>
                  </Parameter>
                </Parameters>
                <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
                <StrictErrorHandling>false</StrictErrorHandling>
                <!-- true only for Tasks -->
              </ProbeAction>
            </MemberModules>
            <Composition>
              <Node ID="Stats" />
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.PropertyBagData</OutputType>
        <InputType>System!System.BaseData</InputType>
      </ProbeActionModuleType>
      <ProbeActionModuleType ID="QND.Hyperv2012R2.GetVMMemoryStatus.PT" Accessibility="Public" Batching="false">
        <Configuration>
          <xsd:element name="TimeoutSeconds" type="xsd:int" minOccurs="0" maxOccurs="1" default="60" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="TraceLevel" type="xsd:int" minOccurs="0" maxOccurs="1" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
          <OverrideableParameter ID="TraceLevel" ParameterType="int" Selector="$Config/TraceLevel$" />
        </OverrideableParameters>
        <ModuleImplementation>
          <Composite>
            <MemberModules>
              <ProbeAction ID="Stats" TypeID="Windows!Microsoft.Windows.PowerShellPropertyBagProbe">
                <ScriptName>Get-VMISStatus.ps1</ScriptName>
                <ScriptBody>
                  <![CDATA[#TO SHOW VERBOSE MESSAGES SET $VerbosePreference="continue"
#SET ErrorLevel to 5 so show discovery info

#*************************************************************************
# Script Name - Get-VMMemoryStatus.ps1
# Author	  -  Daniele Grandini - Progel spa
# Version  - 1.0 01.03.2015
# Purpose     - 
#               
# Assumptions - 
#				
#               
# Parameters  - TraceLevel
#             - ComputerName
#				- SourceId
#				- ManagedEntityId
# Command Line - .\test.ps1 4 "serverName" '{1860E0EB-8C21-41DA-9F35-2FE9343CCF36}' '{1860E0EB-8C21-41DA-9F35-2FE9343CCF36}'
# If discovery must be added the followinf parameters
#				SourceId ($ MPElement $ )
#				ManagedEntityId ($ Target/Id $)
#
# Output properties
#
# Status
#
# Version History
#	  1.0 01.03.2015 DG First Release
#     
#
# (c) Copyright 2015, Progel spa, All Rights Reserved
# Proprietary and confidential to Progel srl              
#
#*************************************************************************


# Get the named parameters
param([int]$traceLevel=$(throw 'must have a value'))

	[Threading.Thread]::CurrentThread.CurrentCulture = "en-US"        
	[Threading.Thread]::CurrentThread.CurrentUICulture = "en-US"
	
#Constants used for event logging
$SCRIPT_NAME			= "Get-VMMemoryStatus.ps1"
$SCRIPT_ARGS = 1
$SCRIPT_STARTED			= 831
$PROPERTYBAG_CREATED	= 832
$SCRIPT_ENDED			= 835
$SCRIPT_VERSION = "1.0"

#region Constants
#Trace Level Costants
$TRACE_NONE 	= 0
$TRACE_ERROR 	= 1
$TRACE_WARNING = 2
$TRACE_INFO 	= 3
$TRACE_VERBOSE = 4
$TRACE_DEBUG = 5

#Event Type Constants
$EVENT_TYPE_SUCCESS      = 0
$EVENT_TYPE_ERROR        = 1
$EVENT_TYPE_WARNING      = 2
$EVENT_TYPE_INFORMATION  = 4
$EVENT_TYPE_AUDITSUCCESS = 8
$EVENT_TYPE_AUDITFAILURE = 16

#Standard Event IDs
$FAILURE_EVENT_ID = 4000		#errore generico nello script
$SUCCESS_EVENT_ID = 1101
$START_EVENT_ID = 1102
$STOP_EVENT_ID = 1103

#TypedPropertyBag
$AlertDataType = 0
$EventDataType	= 2
$PerformanceDataType = 2
$StateDataType       = 3
#endregion

#region Helper Functions
function Log-Params
{
	param($Invocation)
	$line=''
	foreach($key in $Invocation.BoundParameters.Keys) {$line += "$key=$($Invocation.BoundParameters[$key])  "}
	Log-Event $START_EVENT_ID $EVENT_TYPE_INFORMATION  ("Starting script. Invocation Name:$($Invocation.InvocationName)`n Parameters`n $line") $TRACE_INFO
}


function Log-Event
{
	param($eventID, $eventType, $msg, $level)
	
	Write-Verbose ("Logging event. " + $SCRIPT_NAME + " EventID: " + $eventID + " eventType: " + $eventType + " Version:" + $SCRIPT_VERSION + " --> " + $msg)
	if($level -le $P_TraceLevel)
	{
		Write-Host ("Logging event. " + $SCRIPT_NAME + " EventID: " + $eventID + " eventType: " + $eventType + " Version:" + $SCRIPT_VERSION + " --> " + $msg)
		$g_API.LogScriptEvent($SCRIPT_NAME,$eventID,$eventType, ($msg + "`n" + "Version :" + $SCRIPT_VERSION))
	}
}

Function Throw-EmptyDiscovery
{
	param($SourceId, $ManagedEntityId)

	$oDiscoveryData = $g_API.CreateDiscoveryData(0, $SourceId, $ManagedEntityId)
	Log-Event $FAILURE_EVENT_ID $EVENT_TYPE_WARNING "Exiting with empty discovery data" $TRACE_INFO
	$oDiscoveryData
	If($traceLevel -eq $TRACE_DEBUG)
	{
		#just for debug proposes when launched from command line does nothing when run inside OpsMgr Agent
		$g_API.Return($oDiscoveryData)
	}
}

Function Throw-KeepDiscoveryInfo
{
param($SourceId, $ManagedEntityId)
	$oDiscoveryData = $g_API.CreateDiscoveryData(0,$SourceId,$ManagedEntityId)
	#Instead of Snapshot discovery, submit Incremental discovery data
	$oDiscoveryData.IsSnapshot = $false
	Log-Event $FAILURE_EVENT_ID $EVENT_TYPE_WARNING "Exiting with null non snapshot discovery data" $TRACE_INFO
	$oDiscoveryData    
	If($traceLevel -eq $TRACE_DEBUG)
	{
		#just for debug proposes when launched from command line does nothing when run inside OpsMgr Agent	
		$g_API.Return($oDiscoveryData)
	}
}
#endregion


#Start by setting up API object.
	$P_TraceLevel = $TRACE_VERBOSE
	$g_Api = New-Object -comObject 'MOM.ScriptAPI'
	#$g_RegistryStatePath = "HKLM:\" + $g_API.GetScriptStateKeyPath($SCRIPT_NAME)

	$dtStart = Get-Date
	$P_TraceLevel = $traceLevel
	Log-Params $MyInvocation

try
{
	if (!(get-Module -Name Hyper-v)) {Import-Module Hyper-v}


	if (!(get-command -Module Hyper-V -Name Get-VM -ErrorAction SilentlyContinue)) {
		Log-Event $START_EVENT_ID $EVENT_TYPE_WARNING ("Get-VM Commandlet doesn't exist.") $TRACE_WARNING
		Exit 1;
	}
	$vms = Get-VM
	foreach($vm in $vms) {
		Log-Event $START_EVENT_ID $EVENT_TYPE_INFO ("Processing $($vm.VMName)") $TRACE_DEBUG
		try {
		if($vm.DynamicMemoryEnabled ) {
			if([String]::IsNullOrEmpty($vm.MemoryStatus)) {$status='OK'}
			else {$status=$vm.MemoryStatus}
			if($vm.MemoryDemand -eq 0) {$pressure=0}
			else {$pressure = [math]::Round(($vm.MemoryDemand/$vm.MemoryAssigned)*100,0)}
		}
		else {
			$status='OK'
			$pressure=0
		}
		
		$bag = $g_api.CreatePropertyBag()
		$bag.AddValue('VMId',$vm.VMId.ToString())
		$bag.AddValue('MemStatus', $status) 
		$bag.AddValue('Pressure',$pressure)
		$bag.AddValue('Demand',[math]::Round($vm.MemoryDemand/1MB,0))
		$bag.AddValue('Assigned',[math]::Round($vm.MemoryAssigned/1MB,0))
		$bag

		$message="$($vm.VMName) IS State is: $ISStateCode Version is: $ISVersion"
		Log-Event $START_EVENT_ID $EVENT_TYPE_INFO ("$($vm.VMName) has been processed `n $message") $TRACE_DEBUG
		}
		catch [Exception] {
			Log-Event $START_EVENT_ID $EVENT_TYPE_WARNING ("$($vm.Name) error getting memory status $($Error[0].Exception)") $TRACE_WARNING
		}

	}

	Log-Event $STOP_EVENT_ID $EVENT_TYPE_SUCCESS ("has completed successfully in " + ((Get-Date)- ($dtstart)).TotalSeconds + " seconds.") $TRACE_INFO
}
Catch [Exception] {
	Log-Event $FAILURE_EVENT_ID $EVENT_TYPE_WARNING ("Main " + $Error) $TRACE_WARNING	
	write-Verbose $("TRAPPED: " + $_.Exception.GetType().FullName); 
	Write-Verbose $("TRAPPED: " + $_.Exception.Message); 
}
]]>
                </ScriptBody>
                <Parameters>
                  <Parameter>
                    <Name>TraceLevel</Name>
                    <Value>$Config/TraceLevel$</Value>
                  </Parameter>
                </Parameters>
                <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
                <StrictErrorHandling>false</StrictErrorHandling>
                <!-- true only for Tasks -->
              </ProbeAction>
            </MemberModules>
            <Composition>
              <Node ID="Stats" />
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.PropertyBagData</OutputType>
        <InputType>System!System.BaseData</InputType>
      </ProbeActionModuleType>
      <ProbeActionModuleType ID="QND.Hyperv2012R2.GetVMSize.PT" Accessibility="Public" Batching="false">
        <Configuration>
          <xsd:element name="TimeoutSeconds" type="xsd:int" minOccurs="0" maxOccurs="1" default="60" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="TraceLevel" type="xsd:int" minOccurs="0" maxOccurs="1" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
          <OverrideableParameter ID="TraceLevel" ParameterType="int" Selector="$Config/TraceLevel$" />
        </OverrideableParameters>
        <ModuleImplementation>
          <Composite>
            <MemberModules>
              <ProbeAction ID="Stats" TypeID="Windows!Microsoft.Windows.PowerShellPropertyBagProbe">
                <ScriptName>Get-VHDSizePerVM.ps1</ScriptName>
                <ScriptBody>
                  <![CDATA[#TO SHOW VERBOSE MESSAGES SET $VerbosePreference="continue"
#SET ErrorLevel to 5 so show discovery info

#*************************************************************************
# Script Name - Get-VHDSizePerVM.ps1
# Author	  -  - Tao Yang (based on Get-VHDStats.ps1 from Progel spa)
# Version  - 1.0 24.09.2007
# Purpose     - 
#               
# Assumptions - 
#				
#               
# Parameters  - TraceLevel
#             - ComputerName
#				- SourceId
#				- ManagedEntityId
# Command Line - .\test.ps1 4 "serverName" '{1860E0EB-8C21-41DA-9F35-2FE9343CCF36}' '{1860E0EB-8C21-41DA-9F35-2FE9343CCF36}'
# If discovery must be added the followinf parameters
#				SourceId ($ MPElement $ )
#				ManagedEntityId ($ Target/Id $)
#
# Output properties
#
# Status
#
# Version History
#	  1.0 21.02.2015 DG First Release
#     
#
# (c) Copyright 2015, Progel spa, All Rights Reserved
# Proprietary and confidential to Progel srl              
#
#*************************************************************************


# Get the named parameters
param([int]$traceLevel=$(throw 'must have a value'))

	[Threading.Thread]::CurrentThread.CurrentCulture = "en-US"        
	[Threading.Thread]::CurrentThread.CurrentUICulture = "en-US"
	
#Constants used for event logging
$SCRIPT_NAME			= "Get-VHDSizePerVM.ps1"
$SCRIPT_ARGS = 1
$SCRIPT_STARTED			= 831
$PROPERTYBAG_CREATED	= 832
$SCRIPT_ENDED			= 835
$SCRIPT_VERSION = "1.0"

#region Constants
#Trace Level Costants
$TRACE_NONE 	= 0
$TRACE_ERROR 	= 1
$TRACE_WARNING = 2
$TRACE_INFO 	= 3
$TRACE_VERBOSE = 4
$TRACE_DEBUG = 5

#Event Type Constants
$EVENT_TYPE_SUCCESS      = 0
$EVENT_TYPE_ERROR        = 1
$EVENT_TYPE_WARNING      = 2
$EVENT_TYPE_INFORMATION  = 4
$EVENT_TYPE_AUDITSUCCESS = 8
$EVENT_TYPE_AUDITFAILURE = 16

#Standard Event IDs
$FAILURE_EVENT_ID = 4000		#errore generico nello script
$SUCCESS_EVENT_ID = 1101
$START_EVENT_ID = 1102
$STOP_EVENT_ID = 1103

#TypedPropertyBag
$AlertDataType = 0
$EventDataType	= 2
$PerformanceDataType = 2
$StateDataType       = 3
#endregion

#region Helper Functions
function Log-Params
{
	param($Invocation)
	$line=''
	foreach($key in $Invocation.BoundParameters.Keys) {$line += "$key=$($Invocation.BoundParameters[$key])  "}
	Log-Event $START_EVENT_ID $EVENT_TYPE_INFORMATION  ("Starting script. Invocation Name:$($Invocation.InvocationName)`n Parameters`n $line") $TRACE_INFO
}


function Log-Event
{
	param($eventID, $eventType, $msg, $level)
	
	Write-Verbose ("Logging event. " + $SCRIPT_NAME + " EventID: " + $eventID + " eventType: " + $eventType + " Version:" + $SCRIPT_VERSION + " --> " + $msg)
	if($level -le $P_TraceLevel)
	{
		Write-Host ("Logging event. " + $SCRIPT_NAME + " EventID: " + $eventID + " eventType: " + $eventType + " Version:" + $SCRIPT_VERSION + " --> " + $msg)
		$g_API.LogScriptEvent($SCRIPT_NAME,$eventID,$eventType, ($msg + "`n" + "Version :" + $SCRIPT_VERSION))
	}
}

Function Throw-EmptyDiscovery
{
	param($SourceId, $ManagedEntityId)

	$oDiscoveryData = $g_API.CreateDiscoveryData(0, $SourceId, $ManagedEntityId)
	Log-Event $FAILURE_EVENT_ID $EVENT_TYPE_WARNING "Exiting with empty discovery data" $TRACE_INFO
	$oDiscoveryData
	If($traceLevel -eq $TRACE_DEBUG)
	{
		#just for debug proposes when launched from command line does nothing when run inside OpsMgr Agent
		$g_API.Return($oDiscoveryData)
	}
}

Function Throw-KeepDiscoveryInfo
{
param($SourceId, $ManagedEntityId)
	$oDiscoveryData = $g_API.CreateDiscoveryData(0,$SourceId,$ManagedEntityId)
	#Instead of Snapshot discovery, submit Incremental discovery data
	$oDiscoveryData.IsSnapshot = $false
	Log-Event $FAILURE_EVENT_ID $EVENT_TYPE_WARNING "Exiting with null non snapshot discovery data" $TRACE_INFO
	$oDiscoveryData    
	If($traceLevel -eq $TRACE_DEBUG)
	{
		#just for debug proposes when launched from command line does nothing when run inside OpsMgr Agent	
		$g_API.Return($oDiscoveryData)
	}
}
#endregion

Function NullIsZero
{
	param($value)
	if(! $value) {return 0}
	return $value
}
#Start by setting up API object.
	$P_TraceLevel = $TRACE_VERBOSE
	$g_Api = New-Object -comObject 'MOM.ScriptAPI'
	#$g_RegistryStatePath = "HKLM\" + $g_API.GetScriptStateKeyPath($SCRIPT_NAME)

	$dtStart = Get-Date
	$P_TraceLevel = $traceLevel
	Log-Params $MyInvocation

try
{
	if (!(get-Module -Name Hyper-v)) {Import-Module Hyper-v}


	if (!(get-command -Module Hyper-V -Name Get-VM -ErrorAction SilentlyContinue)) {
		Log-Event $START_EVENT_ID $EVENT_TYPE_WARNING ("Get-VM Commandlet doesn't exist.") $TRACE_WARNING
		Exit 1;
	}

	#$vms = @(gwmi Msvm_ComputerSystem -namespace "root\virtualization\v2" | where {$_.ReplicationMode -ne 0 -and $_.ReplicationMode -ne $null})
	$vms=Get-VM
	foreach($vm in $vms) {
		try {
			$HardDrives = $vm.HardDrives
			$VHDs = Get-VHD -VMId $vm.VMId -ErrorAction SilentlyContinue
			$TotalCurrentSize = 0
			$TotalMaxSize = 0
			$TotalMinSize = 0
			foreach($hd in $HardDrives) {
				$vhd = $VHDs | where {$_.Path -ieq $hd.Path}
				
				if($vhd) {
					$TotalCurrentSize = $TotalCurrentSize + $vhd.FileSize
					$TotalMaxSize = $TotalMaxSize + $vhd.Size
					$TotalMinSize = $TotalMinSize + $vhd.MinimumSize
					$minSizeGB = [math]::Round((NullIsZero ($vhd.MinimumSize/1GB)),2)					
				}
			}
				$TotalCurrentSizeGB = [math]::Round((NullIsZero ($TotalCurrentSize/1GB)),2)
				$TotalMaxSizeGB = [math]::Round((NullIsZero ($TotalMaxSize/1GB)),2)
				$TotalMinSizeGB = [math]::Round((NullIsZero ($TotalMinSize/1GB)),2)
				$bag = $g_api.CreatePropertyBag()
				$bag.AddValue('VMId',$VM.VMId.ToString())
				$bag.AddValue('VMName',$VM.VMName)
				$bag.AddValue('CurrentSizeGB', $TotalCurrentSizeGB)
				$bag.AddValue('MaxSizeGB',$TotalMaxSizeGB)
				$bag.AddValue('MinSizeGB',$TotalMinSizeGB)				
				$bag
			Log-Event $START_EVENT_ID $EVENT_TYPE_INFO ("$($vm.Name) has been processed") $TRACE_VERBOSE
		}
		Catch [Exception] {
			Log-Event $START_EVENT_ID $EVENT_TYPE_WARNING ("$($vm.Name) error getting disk info $($Error[0].Exception)") $TRACE_WARNING
		}
	}

	Log-Event $STOP_EVENT_ID $EVENT_TYPE_SUCCESS ("has completed successfully in " + ((Get-Date)- ($dtstart)).TotalSeconds + " seconds.") $TRACE_INFO
}
Catch [Exception] {
	Log-Event $FAILURE_EVENT_ID $EVENT_TYPE_WARNING ("Main " + $($Error[0].Exception)) $TRACE_WARNING	
	write-Verbose $("TRAPPED: " + $_.Exception.GetType().FullName); 
	Write-Verbose $("TRAPPED: " + $_.Exception.Message); 
}
]]>
                </ScriptBody>
                <Parameters>
                  <Parameter>
                    <Name>TraceLevel</Name>
                    <Value>$Config/TraceLevel$</Value>
                  </Parameter>
                </Parameters>
                <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
                <StrictErrorHandling>false</StrictErrorHandling>
                <!-- true only for Tasks -->
              </ProbeAction>
            </MemberModules>
            <Composition>
              <Node ID="Stats" />
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.PropertyBagData</OutputType>
        <InputType>System!System.BaseData</InputType>
      </ProbeActionModuleType>
      <ProbeActionModuleType ID="QND.Hyperv2012R2.GetVHDStats.PT" Accessibility="Public" Batching="false">
        <Configuration>
          <xsd:element name="TimeoutSeconds" type="xsd:int" minOccurs="0" maxOccurs="1" default="60" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="TraceLevel" type="xsd:int" minOccurs="0" maxOccurs="1" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
          <OverrideableParameter ID="TraceLevel" ParameterType="int" Selector="$Config/TraceLevel$" />
        </OverrideableParameters>
        <ModuleImplementation>
          <Composite>
            <MemberModules>
              <ProbeAction ID="Stats" TypeID="Windows!Microsoft.Windows.PowerShellPropertyBagProbe">
                <ScriptName>Get-VHDStats.ps1</ScriptName>
                <ScriptBody>
                  <![CDATA[#TO SHOW VERBOSE MESSAGES SET $VerbosePreference="continue"
#SET ErrorLevel to 5 so show discovery info

#*************************************************************************
# Script Name - Get-VHDStats.ps1
# Author	  -  - Progel spa
# Version  - 1.0 24.09.2007
# Purpose     - 
#               
# Assumptions - 
#				
#               
# Parameters  - TraceLevel
#             - ComputerName
#				- SourceId
#				- ManagedEntityId
# Command Line - .\test.ps1 4 "serverName" '{1860E0EB-8C21-41DA-9F35-2FE9343CCF36}' '{1860E0EB-8C21-41DA-9F35-2FE9343CCF36}'
# If discovery must be added the followinf parameters
#				SourceId ($ MPElement $ )
#				ManagedEntityId ($ Target/Id $)
#
# Output properties
#
# Status
#
# Version History
#	  1.0 21.02.2015 DG First Release
#     
#
# (c) Copyright 2015, Progel spa, All Rights Reserved
# Proprietary and confidential to Progel srl              
#
#*************************************************************************


# Get the named parameters
param([int]$traceLevel=$(throw 'must have a value'),
	[string]$VMGuid)

	[Threading.Thread]::CurrentThread.CurrentCulture = "en-US"        
	[Threading.Thread]::CurrentThread.CurrentUICulture = "en-US"
	
#Constants used for event logging
$SCRIPT_NAME			= "Get-VHDStats.ps1"
$SCRIPT_ARGS = 1
$SCRIPT_STARTED			= 831
$PROPERTYBAG_CREATED	= 832
$SCRIPT_ENDED			= 835
$SCRIPT_VERSION = "1.0"

#region Constants
#Trace Level Costants
$TRACE_NONE 	= 0
$TRACE_ERROR 	= 1
$TRACE_WARNING = 2
$TRACE_INFO 	= 3
$TRACE_VERBOSE = 4
$TRACE_DEBUG = 5

#Event Type Constants
$EVENT_TYPE_SUCCESS      = 0
$EVENT_TYPE_ERROR        = 1
$EVENT_TYPE_WARNING      = 2
$EVENT_TYPE_INFORMATION  = 4
$EVENT_TYPE_AUDITSUCCESS = 8
$EVENT_TYPE_AUDITFAILURE = 16

#Standard Event IDs
$FAILURE_EVENT_ID = 4000		#errore generico nello script
$SUCCESS_EVENT_ID = 1101
$START_EVENT_ID = 1102
$STOP_EVENT_ID = 1103

#TypedPropertyBag
$AlertDataType = 0
$EventDataType	= 2
$PerformanceDataType = 2
$StateDataType       = 3
#endregion

#region Helper Functions
function Log-Params
{
	param($Invocation)
	$line=''
	foreach($key in $Invocation.BoundParameters.Keys) {$line += "$key=$($Invocation.BoundParameters[$key])  "}
	Log-Event $START_EVENT_ID $EVENT_TYPE_INFORMATION  ("Starting script. Invocation Name:$($Invocation.InvocationName)`n Parameters`n $line") $TRACE_INFO
}


function Log-Event
{
	param($eventID, $eventType, $msg, $level)
	
	Write-Verbose ("Logging event. " + $SCRIPT_NAME + " EventID: " + $eventID + " eventType: " + $eventType + " Version:" + $SCRIPT_VERSION + " --> " + $msg)
	if($level -le $P_TraceLevel)
	{
		Write-Host ("Logging event. " + $SCRIPT_NAME + " EventID: " + $eventID + " eventType: " + $eventType + " Version:" + $SCRIPT_VERSION + " --> " + $msg)
		$g_API.LogScriptEvent($SCRIPT_NAME,$eventID,$eventType, ($msg + "`n" + "Version :" + $SCRIPT_VERSION))
	}
}

Function Throw-EmptyDiscovery
{
	param($SourceId, $ManagedEntityId)

	$oDiscoveryData = $g_API.CreateDiscoveryData(0, $SourceId, $ManagedEntityId)
	Log-Event $FAILURE_EVENT_ID $EVENT_TYPE_WARNING "Exiting with empty discovery data" $TRACE_INFO
	$oDiscoveryData
	If($traceLevel -eq $TRACE_DEBUG)
	{
		#just for debug proposes when launched from command line does nothing when run inside OpsMgr Agent
		$g_API.Return($oDiscoveryData)
	}
}

Function Throw-KeepDiscoveryInfo
{
param($SourceId, $ManagedEntityId)
	$oDiscoveryData = $g_API.CreateDiscoveryData(0,$SourceId,$ManagedEntityId)
	#Instead of Snapshot discovery, submit Incremental discovery data
	$oDiscoveryData.IsSnapshot = $false
	Log-Event $FAILURE_EVENT_ID $EVENT_TYPE_WARNING "Exiting with null non snapshot discovery data" $TRACE_INFO
	$oDiscoveryData    
	If($traceLevel -eq $TRACE_DEBUG)
	{
		#just for debug proposes when launched from command line does nothing when run inside OpsMgr Agent	
		$g_API.Return($oDiscoveryData)
	}
}
#endregion

Function NullIsZero
{
	param($value)
	if(! $value) {return 0}
	return $value
}
#Start by setting up API object.
	$P_TraceLevel = $TRACE_VERBOSE
	$g_Api = New-Object -comObject 'MOM.ScriptAPI'
	#$g_RegistryStatePath = "HKLM\" + $g_API.GetScriptStateKeyPath($SCRIPT_NAME)

	$dtStart = Get-Date
	$P_TraceLevel = $traceLevel
	Log-Params $MyInvocation

try
{
	if (!(get-Module -Name Hyper-v)) {Import-Module Hyper-v}


	if (!(get-command -Module Hyper-V -Name Get-VM -ErrorAction SilentlyContinue)) {
		Log-Event $START_EVENT_ID $EVENT_TYPE_WARNING ("Get-VM Commandlet doesn't exist.") $TRACE_WARNING
		Exit 1;
	}

	if ($VMGuid -ine 'ignore') {	#here we're in atask targeted at a specific VM
		$vm = Get-VM | where {$_.VMId -ieq $VMGuid}
		Write-Host "NYI!"
		exit;
	}

	#$vms = @(gwmi Msvm_ComputerSystem -namespace "root\virtualization\v2" | where {$_.ReplicationMode -ne 0 -and $_.ReplicationMode -ne $null})
	$vms=Get-VM
	foreach($vm in $vms) {
		try {
			$HardDrives = $vm.HardDrives
			$VHDs = Get-VHD -VMId $vm.VMId -ErrorAction SilentlyContinue
			foreach($hd in $HardDrives) {
				$vhd = $VHDs| where {$_.Path -ieq $hd.Path}
				if($vhd) {
					$currentSizeGB = [math]::Round((NullIsZero ($vhd.FileSize/1GB)),2)
					$maxSizeGB = [math]::Round((NullIsZero ($vhd.Size/1GB)),2)
					$minSizeGB = [math]::Round((NullIsZero ($vhd.MinimumSize/1GB)),2)
					$fragPerc = NullIsZero ($vhd.FragmentationPercentage)
				}
				else {
					$currentSizeGB = -1
					$maxSizeGB = -1
					$minSizeGB = -1
					$fragPerc = -1
				}
				$bag = $g_api.CreatePropertyBag()
				$bag.AddValue('VirtualDiskId',$hd.Id)
				$bag.AddValue('SizeGB', $currentSizeGB)
				$bag.AddValue('MaxSizeGB',$maxSizeGB)
				$bag.AddValue('MinSizeGB',$minSizeGB)
				$bag.AddValue('FragPerc',$fragPerc)
				$bag
				Log-Event $START_EVENT_ID $EVENT_TYPE_INFO ("$($vm.Name) - $($hd.Id) frag level $fragPerc") $TRACE_VERBOSE
			}
			Log-Event $START_EVENT_ID $EVENT_TYPE_INFO ("$($vm.Name) has been processed") $TRACE_VERBOSE
		}
		Catch [Exception] {
			Log-Event $START_EVENT_ID $EVENT_TYPE_WARNING ("$($vm.Name) error getting disk info $($Error[0].Exception)") $TRACE_WARNING
		}
	}

	Log-Event $STOP_EVENT_ID $EVENT_TYPE_SUCCESS ("has completed successfully in " + ((Get-Date)- ($dtstart)).TotalSeconds + " seconds.") $TRACE_INFO
}
Catch [Exception] {
	Log-Event $FAILURE_EVENT_ID $EVENT_TYPE_WARNING ("Main " + $($Error[0].Exception)) $TRACE_WARNING	
	write-Verbose $("TRAPPED: " + $_.Exception.GetType().FullName); 
	Write-Verbose $("TRAPPED: " + $_.Exception.Message); 
}
]]>
                </ScriptBody>
                <Parameters>
                  <Parameter>
                    <Name>TraceLevel</Name>
                    <Value>$Config/TraceLevel$</Value>
                  </Parameter>
                  <Parameter>
                    <Name>VMGuid</Name>
                    <Value>ignore</Value>
                  </Parameter>
                </Parameters>
                <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
                <StrictErrorHandling>false</StrictErrorHandling>
                <!-- true only for Tasks -->
              </ProbeAction>
            </MemberModules>
            <Composition>
              <Node ID="Stats" />
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.PropertyBagData</OutputType>
        <InputType>System!System.BaseData</InputType>
      </ProbeActionModuleType>
      <ProbeActionModuleType ID="QND.Hyperv.2012R2.GetVMMeasures.PT" Accessibility="Public" Batching="false">
        <Configuration>
          <xsd:element name="TimeoutSeconds" type="xsd:int" minOccurs="0" maxOccurs="1" default="60" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="TraceLevel" type="xsd:int" minOccurs="0" maxOccurs="1" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="VMGuid" type="xsd:string" minOccurs="0" maxOccurs="1" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="ResetDays" type="xsd:int" minOccurs="0" maxOccurs="1" default="30" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
          <OverrideableParameter ID="TraceLevel" ParameterType="int" Selector="$Config/TraceLevel$" />
          <OverrideableParameter ID="ResetDays" Selector="$Config/ResetDays$" ParameterType="int" />
        </OverrideableParameters>
        <ModuleImplementation>
          <Composite>
            <MemberModules>
              <ProbeAction ID="Stats" TypeID="Windows!Microsoft.Windows.PowerShellPropertyBagProbe">
                <ScriptName>Get-VMMeasure.ps1</ScriptName>
                <ScriptBody>
                  <![CDATA[#TO SHOW VERBOSE MESSAGES SET $VerbosePreference="continue"
#SET ErrorLevel to 5 so show discovery info

#*************************************************************************
# Script Name - Get-VMMeasure.ps1
# Author	  -  - Progel spa
# Version  - 1.0 24.09.2007
# Purpose     - 
#               
# Assumptions - 
#				
#               
# Parameters  - TraceLevel
#             - ComputerName
#				- SourceId
#				- ManagedEntityId
# Command Line - .\test.ps1 4 "serverName" '{1860E0EB-8C21-41DA-9F35-2FE9343CCF36}' '{1860E0EB-8C21-41DA-9F35-2FE9343CCF36}'
# If discovery must be added the followinf parameters
#				SourceId ($ MPElement $ )
#				ManagedEntityId ($ Target/Id $)
#
# Output properties
#
# Status
#
# Version History
#	  1.0 21.02.2015 DG First Release
#     
#
# (c) Copyright 2015, Progel spa, All Rights Reserved
# Proprietary and confidential to Progel srl              
#
#*************************************************************************


# Get the named parameters
param([int]$traceLevel=$(throw 'must have a value'),
	[string]$VMGuid,
	[int]$ResetDays)

	[Threading.Thread]::CurrentThread.CurrentCulture = "en-US"        
	[Threading.Thread]::CurrentThread.CurrentUICulture = "en-US"
	
#Constants used for event logging
$SCRIPT_NAME			= "Get-VMMeasure.ps1"
$SCRIPT_ARGS = 1
$SCRIPT_STARTED			= 831
$PROPERTYBAG_CREATED	= 832
$SCRIPT_ENDED			= 835
$SCRIPT_VERSION = "1.0"

#region Constants
#Trace Level Costants
$TRACE_NONE 	= 0
$TRACE_ERROR 	= 1
$TRACE_WARNING = 2
$TRACE_INFO 	= 3
$TRACE_VERBOSE = 4
$TRACE_DEBUG = 5

#Event Type Constants
$EVENT_TYPE_SUCCESS      = 0
$EVENT_TYPE_ERROR        = 1
$EVENT_TYPE_WARNING      = 2
$EVENT_TYPE_INFORMATION  = 4
$EVENT_TYPE_AUDITSUCCESS = 8
$EVENT_TYPE_AUDITFAILURE = 16

#Standard Event IDs
$FAILURE_EVENT_ID = 4000		#errore generico nello script
$SUCCESS_EVENT_ID = 1101
$START_EVENT_ID = 1102
$STOP_EVENT_ID = 1103

#TypedPropertyBag
$AlertDataType = 0
$EventDataType	= 2
$PerformanceDataType = 2
$StateDataType       = 3
#endregion

#region Helper Functions
function Log-Params
{
	param($Invocation)
	$line=''
	foreach($key in $Invocation.BoundParameters.Keys) {$line += "$key=$($Invocation.BoundParameters[$key])  "}
	Log-Event $START_EVENT_ID $EVENT_TYPE_INFORMATION  ("Starting script. Invocation Name:$($Invocation.InvocationName)`n Parameters`n $line") $TRACE_INFO
}


function Log-Event
{
	param($eventID, $eventType, $msg, $level)
	
	Write-Verbose ("Logging event. " + $SCRIPT_NAME + " EventID: " + $eventID + " eventType: " + $eventType + " Version:" + $SCRIPT_VERSION + " --> " + $msg)
	if($level -le $P_TraceLevel)
	{
		Write-Host ("Logging event. " + $SCRIPT_NAME + " EventID: " + $eventID + " eventType: " + $eventType + " Version:" + $SCRIPT_VERSION + " --> " + $msg)
		$g_API.LogScriptEvent($SCRIPT_NAME,$eventID,$eventType, ($msg + "`n" + "Version :" + $SCRIPT_VERSION))
	}
}

Function Throw-EmptyDiscovery
{
	param($SourceId, $ManagedEntityId)

	$oDiscoveryData = $g_API.CreateDiscoveryData(0, $SourceId, $ManagedEntityId)
	Log-Event $FAILURE_EVENT_ID $EVENT_TYPE_WARNING "Exiting with empty discovery data" $TRACE_INFO
	$oDiscoveryData
	If($traceLevel -eq $TRACE_DEBUG)
	{
		#just for debug proposes when launched from command line does nothing when run inside OpsMgr Agent
		$g_API.Return($oDiscoveryData)
	}
}

Function Throw-KeepDiscoveryInfo
{
param($SourceId, $ManagedEntityId)
	$oDiscoveryData = $g_API.CreateDiscoveryData(0,$SourceId,$ManagedEntityId)
	#Instead of Snapshot discovery, submit Incremental discovery data
	$oDiscoveryData.IsSnapshot = $false
	Log-Event $FAILURE_EVENT_ID $EVENT_TYPE_WARNING "Exiting with null non snapshot discovery data" $TRACE_INFO
	$oDiscoveryData    
	If($traceLevel -eq $TRACE_DEBUG)
	{
		#just for debug proposes when launched from command line does nothing when run inside OpsMgr Agent	
		$g_API.Return($oDiscoveryData)
	}
}
#endregion

Function NullZero
{
	param($value)
	if(! $value) {return 0}
	return $value
}

Function Process-VM
{
	param($measure)
	$bag = $g_api.CreatePropertyBag()
	$bag.AddValue('VMId',$measure.VMId.ToString())
	$bag.AddValue('Type','VM')
	$bag.AddValue('AvgCPU', (NullZero $measure.AverageProcessorUsage))
	$bag.AddValue('AvgMemory',(NullZero $measure.AverageMemoryUsage))
	$bag.AddValue('MaxMemory',(NullZero $measure.MaximumMemoryUsage))
	$bag.AddValue('DiskAllocation',(NullZero $measure.TotalDiskAllocation))
	$bag.AddValue('NormalizedIOPS',(NullZero $measure.AggregatedAverageNormalizedIOPS))
	$bag.AddValue('AvgDiskLatency',(NullZero $measure.AggregatedAverageLatency))
	#the following metrics are an absolute value so if collected they need to be collected in delta
	$bag.AddValue('DiskDataRead',(NullZero $measure.AggregatedDiskDataRead))
	$bag.AddValue('DiskDataWritten',(NullZero $measure.AggregatedDiskDataWritten))

	#try to transform in Avg, but sometime the metering time is null
	if($measure.MeteringDuration) {
		$DataPerSecSignificant=1
		$DiskDataReadPerSec = (NullZero $measure.AggregatedDiskDataRead) / $measure.MeteringDuration.TotalSeconds
		$DiskDataWrittendPerSec = (NullZero $measure.AggregatedDiskDataWritten) / $measure.MeteringDuration.TotalSeconds
	}
	else {
		$DataPerSecSignificant=0
		$DiskDataReadPerSec = 0
		$DiskDataWrittenPerSec = 0
	}
	$bag.AddValue('DiskDataWrittenPerSec',(NullZero $DiskDataWrittendPerSec))
	$bag.AddValue('DiskDataReadPerSec',(NullZero $DiskDataReadPerSec))
	$bag.AddValue('DiskDataPerSecSignificant',$DataPerSecSignificant)

	#now return aggregated Network Data if any
	$outboundTraffic = ($measure.NetworkMeteredTrafficReport | where {$_.Direction -ieq 'Outbound'} | Measure-Object -Property TotalTraffic -Sum).Sum
	$inboundTraffic = ($measure.NetworkMeteredTrafficReport | where {$_.Direction -ieq 'Inbound'} | Measure-Object -Property TotalTraffic -Sum).Sum
	$bag.AddValue("OutboundTraffic",(NullZero $outboundTraffic))
	$bag.AddValue("InboundTraffic",(NullZero $inboundTraffic))
	#try to transform in Avg, but sometime the metering time is null
	if($measure.MeteringDuration) {
		$DataPerSecSignificant=1
		$OutboundPerSec = (NullZero $outboundTraffic) / $measure.MeteringDuration.TotalSeconds
		$InboundPerSec = (NullZero $inboundTraffic) / $measure.MeteringDuration.TotalSeconds
	}
	else {
		Log-Event $START_EVENT_ID $EVENT_TYPE_INFO ("$($measure.VMName) doesn't report Metering Duration. Some Perf counters will be missing.") $TRACE_VERBOSE
		$DataPerSecSignificant=0
		$OutboundPerSec = 0
		$InboundPerSec = 0
	}
	$bag.AddValue("OutboundTrafficPerSec",(NullZero $OutboundPerSec))
	$bag.AddValue("InboundTrafficPerSec",(NullZero $InboundPerSec))
	$bag.AddValue("TrafficPerSecSignificant",$DataPerSecSignificant)

	#now we can return the data
	$bag
	
	#now return the disk data if we have any

	foreach($disk in $measure.HardDiskMetrics) {
		$bag = $g_api.CreatePropertyBag()
		
		$diskId = $disk.VirtualHardDisk.Id
		$bag.AddValue('VMId',$measure.VMId.ToString())
		$bag.AddValue('DiskId',$diskId)
		$bag.AddValue('Type','Disk')
		$bag.AddValue("NormalizedIOPS",(NullZero $disk.AverageNormalizedIOPS))
		$bag.AddValue("AvgDiskLatency",(NullZero $disk.AverageLatency))
		$bag.AddValue("DiskDataRead",(NullZero $disk.DataRead))
		$bag.AddValue("DiskDataWritten",(NullZero $disk.DataWritten))
		#try to transform in Avg, but sometime the metering time is null
		if($measure.MeteringDuration) {
			$DataPerSecSignificant=1
			$DiskDataReadPerSec = (NullZero $disk.DataRead) / $measure.MeteringDuration.TotalSeconds
			$DiskDataWrittendPerSec = (NullZero $disk.DataWritten) / $measure.MeteringDuration.TotalSeconds
		}
		else {

			$DataPerSecSignificant=0
			$DiskDataReadPerSec = 0
			$DiskDataWrittenPerSec = 0
		}
		$bag.AddValue("DiskDataWrittenPerSec",(NullZero $DiskDataWrittendPerSec))
		$bag.AddValue("DiskDataReadPerSec",(NullZero $DiskDataReadPerSec))
		$bag.AddValue("DiskDataPerSecSignificant",$DataPerSecSignificant)
		$bag
	}
	#end reset the statistics
	#Reset-VMResourceMetering -VMName $measure.VMName
	Log-Event $START_EVENT_ID $EVENT_TYPE_INFO ("$($measure.VMName) has been processed") $TRACE_VERBOSE
}
#Start by setting up API object.
	$P_TraceLevel = $TRACE_VERBOSE
	$g_Api = New-Object -comObject 'MOM.ScriptAPI'
	$g_RegistryStatePath = "HKLM:\" + $g_API.GetScriptStateKeyPath($SCRIPT_NAME)

	$dtStart = Get-Date
	$P_TraceLevel = $traceLevel
	Log-Params $MyInvocation

try
{
	if (!(get-Module -Name Hyper-v)) {Import-Module Hyper-v}

	if (!(get-command -Module Hyper-V -Name Get-VM -ErrorAction SilentlyContinue)) {
		Log-Event $START_EVENT_ID $EVENT_TYPE_WARNING ("Get-VM Commandlet doesn't exist.") $TRACE_WARNING
		Exit 1;
	}

	
	if ($VMGuid -ine 'ignore') {	#here we're in atask targeted at a specific VM
		$measure = Get-VM | where {$_.VMId -ieq $VMGuid -and $_.ResourceMeteringEnabled -eq $true} | Measure-VM
		if($measure) {Process-VM $measure}
		exit;
	}

	#$vms = @(gwmi Msvm_ComputerSystem -namespace "root\virtualization\v2" | where {$_.ReplicationMode -ne 0 -and $_.ReplicationMode -ne $null})

	$measures=Get-VM | where {$_.ResourceMeteringEnabled -eq $true} | Measure-VM
	foreach($measure in $measures) {
		try {
			Process-VM $measure
		}
		Catch [Exception] {
			Log-Event $START_EVENT_ID $EVENT_TYPE_WARNING ("$($measure.VMName) error getting performace info $($Error[0].Exception)") $TRACE_WARNING
		}
	}

	#check if we need to reset measures
	if($ResetDays -gt 0) {
		$regVault = Get-Item $g_RegistryStatePath
		if($regVault.GetValueNames() -contains 'LastReset') {
			$lastReset = [DateTime] (Get-ItemProperty -Path $g_RegistryStatePath -Name LastReset).LastReset
			if(([DateTime]::Now-$lastReset).TotalDays -gt $ResetDays) {
				Get-VM | where {$_.ResourceMeteringEnabled -eq $true} | Reset-VMResourceMetering
				Set-ItemProperty -Path $g_RegistryStatePath -Name LastReset -Value ([DateTime]::Now)
			}
		}
		else {Set-ItemProperty -Path $g_RegistryStatePath -Name LastReset -Value ([DateTime]::Now)}
	}
	Log-Event $STOP_EVENT_ID $EVENT_TYPE_SUCCESS ("has completed successfully in " + ((Get-Date)- ($dtstart)).TotalSeconds + " seconds.") $TRACE_INFO
}
Catch [Exception] {
	Log-Event $FAILURE_EVENT_ID $EVENT_TYPE_WARNING ("Main " + $($Error[0].Exception)) $TRACE_WARNING	
	write-Verbose $("TRAPPED: " + $_.Exception.GetType().FullName); 
	Write-Verbose $("TRAPPED: " + $_.Exception.Message); 
}
]]>
                </ScriptBody>
                <Parameters>
                  <Parameter>
                    <Name>TraceLevel</Name>
                    <Value>$Config/TraceLevel$</Value>
                  </Parameter>
                  <Parameter>
                    <Name>VMGuid</Name>
                    <Value>$Config/VMGuid$</Value>
                  </Parameter>
                  <Parameter>
                    <Name>ResetDays</Name>
                    <Value>$Config/ResetDays$</Value>
                  </Parameter>
                </Parameters>
                <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
                <StrictErrorHandling>false</StrictErrorHandling>
                <!-- true only for Tasks -->
              </ProbeAction>
            </MemberModules>
            <Composition>
              <Node ID="Stats" />
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.PropertyBagData</OutputType>
        <InputType>System!System.BaseData</InputType>
      </ProbeActionModuleType>
      <ProbeActionModuleType ID="QND.Hyperv.2012R2.GetVMUptime.PT" Accessibility="Public" Batching="false">
        <Configuration>
          <xsd:element name="TimeoutSeconds" type="xsd:int" minOccurs="0" maxOccurs="1" default="3000" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="TraceLevel" type="xsd:int" minOccurs="0" maxOccurs="1" default="2" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="VMGuid" type="xsd:string" minOccurs="0" maxOccurs="1" default="ignore" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
          <OverrideableParameter ID="TraceLevel" ParameterType="int" Selector="$Config/TraceLevel$" />
        </OverrideableParameters>
        <ModuleImplementation>
          <Composite>
            <MemberModules>
              <ProbeAction ID="Stats" TypeID="Windows!Microsoft.Windows.PowerShellPropertyBagProbe">
                <ScriptName>Get-VMUptime.ps1</ScriptName>
                <ScriptBody>
                  <![CDATA[#TO SHOW VERBOSE MESSAGES SET $VerbosePreference="continue"
#SET ErrorLevel to 5 so show discovery info

#*************************************************************************
# Script Name - Get-VMUptime.ps1
# Author	  -  - Progel spa
# Version  - 1.0 24.09.2007
# Purpose     - 
#               
# Assumptions - 
#				
#               
# Parameters  - TraceLevel
#             - ComputerName
#				- SourceId
#				- ManagedEntityId
# Command Line - .\test.ps1 4 "serverName" '{1860E0EB-8C21-41DA-9F35-2FE9343CCF36}' '{1860E0EB-8C21-41DA-9F35-2FE9343CCF36}'
# If discovery must be added the followinf parameters
#				SourceId ($ MPElement $ )
#				ManagedEntityId ($ Target/Id $)
#
# Output properties
#
# Status
#
# Version History
#	  1.0 21.02.2015 DG First Release
#     
#
# (c) Copyright 2015, Progel spa, All Rights Reserved
# Proprietary and confidential to Progel srl              
#
#*************************************************************************


# Get the named parameters
param([int]$traceLevel=$(throw 'must have a value'),
	[string]$MGGuid,
	[string]$VMGuid)


	[Threading.Thread]::CurrentThread.CurrentCulture = "en-US"        
	[Threading.Thread]::CurrentThread.CurrentUICulture = "en-US"
	
#Constants used for event logging
$SCRIPT_NAME			= "Get-VMUptime.ps1"
$SCRIPT_ARGS = 1
$SCRIPT_STARTED			= 831
$PROPERTYBAG_CREATED	= 832
$SCRIPT_ENDED			= 835
$SCRIPT_VERSION = "1.0"

#region Constants
#Trace Level Costants
$TRACE_NONE 	= 0
$TRACE_ERROR 	= 1
$TRACE_WARNING = 2
$TRACE_INFO 	= 3
$TRACE_VERBOSE = 4
$TRACE_DEBUG = 5

#Event Type Constants
$EVENT_TYPE_SUCCESS      = 0
$EVENT_TYPE_ERROR        = 1
$EVENT_TYPE_WARNING      = 2
$EVENT_TYPE_INFORMATION  = 4
$EVENT_TYPE_AUDITSUCCESS = 8
$EVENT_TYPE_AUDITFAILURE = 16

#Standard Event IDs
$FAILURE_EVENT_ID = 4000		#errore generico nello script
$SUCCESS_EVENT_ID = 1101
$START_EVENT_ID = 1102
$STOP_EVENT_ID = 1103

#TypedPropertyBag
$AlertDataType = 0
$EventDataType	= 2
$PerformanceDataType = 2
$StateDataType       = 3
#endregion

#region Helper Functions
function Log-Params
{
	param($Invocation)
	$line=''
	foreach($key in $Invocation.BoundParameters.Keys) {$line += "$key=$($Invocation.BoundParameters[$key])  "}
	Log-Event $START_EVENT_ID $EVENT_TYPE_INFORMATION  ("Starting script. Invocation Name:$($Invocation.InvocationName)`n Parameters`n $line") $TRACE_INFO
}


function Log-Event
{
	param($eventID, $eventType, $msg, $level)
	
	Write-Verbose ("Logging event. " + $SCRIPT_NAME + " EventID: " + $eventID + " eventType: " + $eventType + " Version:" + $SCRIPT_VERSION + " --> " + $msg)
	if($level -le $P_TraceLevel)
	{
		Write-Host ("Logging event. " + $SCRIPT_NAME + " EventID: " + $eventID + " eventType: " + $eventType + " Version:" + $SCRIPT_VERSION + " --> " + $msg)
		$g_API.LogScriptEvent($SCRIPT_NAME,$eventID,$eventType, ($msg + "`n" + "Version :" + $SCRIPT_VERSION))
	}
}

Function Throw-EmptyDiscovery
{
	param($SourceId, $ManagedEntityId)

	$oDiscoveryData = $g_API.CreateDiscoveryData(0, $SourceId, $ManagedEntityId)
	Log-Event $FAILURE_EVENT_ID $EVENT_TYPE_WARNING "Exiting with empty discovery data" $TRACE_INFO
	$oDiscoveryData
	If($traceLevel -eq $TRACE_DEBUG)
	{
		#just for debug proposes when launched from command line does nothing when run inside OpsMgr Agent
		$g_API.Return($oDiscoveryData)
	}
}

Function Throw-KeepDiscoveryInfo
{
param($SourceId, $ManagedEntityId)
	$oDiscoveryData = $g_API.CreateDiscoveryData(0,$SourceId,$ManagedEntityId)
	#Instead of Snapshot discovery, submit Incremental discovery data
	$oDiscoveryData.IsSnapshot = $false
	Log-Event $FAILURE_EVENT_ID $EVENT_TYPE_WARNING "Exiting with null non snapshot discovery data" $TRACE_INFO
	$oDiscoveryData    
	If($traceLevel -eq $TRACE_DEBUG)
	{
		#just for debug proposes when launched from command line does nothing when run inside OpsMgr Agent	
		$g_API.Return($oDiscoveryData)
	}
}
#endregion

Function NullIsZero
{
	param($value)
	if(! $value) {return 0}
	return $value
}

Function Process-VM
{
	param($vm)
	$lastCheck = [xml] (Get-Content -Path "$($vm.Path)\$MGGuid-UpTimeCheck.xml" -ErrorAction SilentlyContinue)
	$vmUpTime = NullIsZero $vm.Uptime.TotalHours
	if(! $lastCheck) {
		$lastCheck = "<LastUptimeCheck><Uptime>$vmUpTime</Uptime><Check>$timeNow</Check></LastUptimeCheck>"
		Log-Event $START_EVENT_ID $EVENT_TYPE_INFORMATION ("No previous uptime data exists for $($vm.Name)") $TRACE_INFO
		$lastCheck | Out-File -FilePath "$($vm.Path)\$MGGuid-UpTimeCheck.xml" -Force
		return;
	}
	$lastTotalHours = [double] ($lastCheck.LastUptimeCheck.Uptime)
	$lastDateCheck = [DateTime] ($lastCheck.LastUptimeCheck.Check)
			
	$uptimeInperiod = $vm.Uptime.TotalHours - $lastTotalHours
	if($uptimeInPeriod -le 0) {$uptimeInPeriod = $vm.Uptime.TotalHours}
	$elapsedInPeriod = ($timeNow - $lastDateCheck).TotalHours
	$percUptime = [math]::Round($uptimeInperiod/$elapsedInPeriod * 100,2)
	if($percUptime -gt 100){$percUptime=100.00}
	$lastCheck = "<LastUptimeCheck><Uptime>$vmUpTime</Uptime><Check>$TimeNow</Check></LastUptimeCheck>"
	$lastCheck | Out-File -FilePath "$($vm.Path)\$MGGuid-UpTimeCheck.xml" -Force

	$bag = $g_api.CreatePropertyBag()
	$bag.AddValue('VMId',$vm.VMId.ToString())
	$bag.AddValue('PercUptime', (NullIsZero $percUptime))
	$bag.AddValue('TotalUptime',(NullIsZero $vm.Uptime.TotalHours))
	$bag.AddValue('UptimeInPeriod',(NullIsZero $uptimeInperiod))
	#now return the disk data if we have any
	$bag
	Log-Event $START_EVENT_ID $EVENT_TYPE_INFO ("$($vm.Name) has been processed, uptime perc is $percUptime") $TRACE_VERBOSE
}
#Start by setting up API object.
	$P_TraceLevel = $TRACE_VERBOSE
	$g_Api = New-Object -comObject 'MOM.ScriptAPI'
	$g_RegistryStatePath = "HKLM\" + $g_API.GetScriptStateKeyPath($SCRIPT_NAME) + "\$MGGuid"

	$dtStart = Get-Date
	$P_TraceLevel = $traceLevel
	Log-Params $MyInvocation

try
{
	if (!(get-Module -Name Hyper-v)) {Import-Module Hyper-v}


	if (!(get-command -Module Hyper-V -Name Get-VM -ErrorAction SilentlyContinue)) {
		Log-Event $START_EVENT_ID $EVENT_TYPE_WARNING ("Get-VM Commandlet doesn't exist.") $TRACE_WARNING
		Exit 1;
	}

	if ($VMGuid -ine 'ignore') {	#here we're in atask targeted at a specific VM
		$vm = Get-VM | where {$_.VMId -ieq $VMGuid}
		if($vm) {Process-VM $vm}
		exit;
	}

	#$vms = @(gwmi Msvm_ComputerSystem -namespace "root\virtualization\v2" | where {$_.ReplicationMode -ne 0 -and $_.ReplicationMode -ne $null})
	$timeNow = [DateTime]::Now
	$VMs=Get-VM
	foreach($vm in $VMs) {
		try {
			Process-VM $vm
		}
		Catch [Exception] {
			Log-Event $START_EVENT_ID $EVENT_TYPE_WARNING ("$($vm.Name) error getting Uptime info $($Error[0].Exception)") $TRACE_WARNING
		}
	}

	Log-Event $STOP_EVENT_ID $EVENT_TYPE_SUCCESS ("has completed successfully in " + ((Get-Date)- ($dtstart)).TotalSeconds + " seconds.") $TRACE_INFO
}
Catch [Exception] {
	Log-Event $FAILURE_EVENT_ID $EVENT_TYPE_WARNING ("Main " + $($Error[0].Exception)) $TRACE_WARNING	
	write-Verbose $("TRAPPED: " + $_.Exception.GetType().FullName); 
	Write-Verbose $("TRAPPED: " + $_.Exception.Message); 
}
]]>
                </ScriptBody>
                <Parameters>
                  <Parameter>
                    <Name>TraceLevel</Name>
                    <Value>$Config/TraceLevel$</Value>
                  </Parameter>
                  <Parameter>
                    <Name>MGGuid</Name>
                    <Value>$Target/ManagementGroup/Id$</Value>
                  </Parameter>
                  <Parameter>
                    <Name>VMGuid</Name>
                    <Value>$Config/VMGuid$</Value>
                  </Parameter>
                </Parameters>
                <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
                <StrictErrorHandling>false</StrictErrorHandling>
                <!-- true only for Tasks -->
              </ProbeAction>
            </MemberModules>
            <Composition>
              <Node ID="Stats" />
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.PropertyBagData</OutputType>
        <InputType>System!System.BaseData</InputType>
      </ProbeActionModuleType>
      <ProbeActionModuleType ID="QND.Hyperv2012R2.VM.Cluster.Resource.WMI.PT" Accessibility="Internal" Batching="false" PassThrough="false">
        <Configuration>
          <xsd:element minOccurs="1" name="TimeoutSeconds" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
        </OverrideableParameters>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <ProbeAction ID="Probe" TypeID="Windows!Microsoft.Windows.PowerShellPropertyBagTriggerOnlyProbe">
                <ScriptName>VMPreferredHostWMIProbe.ps1</ScriptName>
                <ScriptBody><![CDATA[#===========================================================================================
# AUTHOR:         	Tao Yang
# Script Name:    	VMPreferredHostWMIProbe.ps1
# DATE:           	03/07/2012
# Version:        	1.5
# COMMENT:			- Script to check if Hyper-V guest VM is located on the preferred host
#===========================================================================================
#get host name
$HostName = $env:COMPUTERNAME

#This Script
$ScriptName = "VMPreferredHostWMIProbe.ps1"
#MOM API
$oAPI = New-Object -ComObject "MOM.ScriptAPI"

#Debugging Log
$OAPI.LogScriptEvent($ScriptName,11000,0,"Hyper-V Cluster VM Preferred Host Probe script is being executed on $HostName`...")

#PS array for virtual machines that are located on the wrong host
$arrVMsOnWrongHost = @()
$arrVMsOnPreferredHost = @()
$arrPreferredHostsNotConfigured = @()
#$arrIncorrectPreferredOwner = @()

#Get virtual machines cluster resources that are currently hosted on the local cluster node (this computer)
$arrVirtualMachines = Get-WmiObject -Namespace root\MSCluster -Query "Select * from MSCluster_Resource Where Type = 'Virtual Machine'"
$bAllVMsOnPreferredHost = $true
$bAllVMsPreferredHostConfigured = $true

foreach ($VirtualMachine in $arrVirtualMachines)
{
    $VMResourceGroup = Get-WmiObject -Namespace root\MSCluster -Query "Associators of {MSCluster_Resource.Name='$($VirtualMachine.Name)'} WHERE AssocClass = MSCluster_ResourceGroupToResource"
	$VirtualMachineName = $VMResourceGroup.Name
	$CurrentResourceOwner = Get-WmiObject -Namespace root\MSCluster -Query "Associators of {MSCluster_ResourceGroup.Name='$($VMResourceGroup.Name)'} WHERE AssocClass = MSCluster_NodeToActiveGroup"
	$arrPreferredOwners = Get-WmiObject -Namespace root\MSCluster -Query "Associators of {MSCluster_ResourceGroup.Name='$($VMResourceGroup.Name)'} WHERE AssocClass = MSCluster_ResourceGroupToPreferredNode"
	#Determine if the current resource owner is one of the preferred owners
	if ($arrPreferredOwners)
	{
		$IsOnPreferredHost = $false
		Foreach ($PreferredOwner in $arrPreferredOwners)
		{
			if ($PreferredOwner.Name -ieq $CurrentResourceOwner.Name)
			{
				$IsOnPreferredHost = $true
				#add the VM to $arrVMsOnPreferredHost
				$arrVMsOnPreferredHost += $VirtualMachineName
				$bAllVMsPreferredHostConfigured = $false
			}
		}
	} else {
		#Preferred host not configured for this VM. consider as is on preferred host
		$IsOnPreferredHost = $true
		#Add the VM to $arrPreferredHostsNotConfigured
		$arrPreferredHostsNotConfigured += $VirtualMachineName
	}
	
	#If the VM is not on the preferred owner, add to the $arrVMsOnWrongHost array and change $bAllVMsOnPreferredOwner to False
	If (!$IsOnPreferredHost)
	{
		$bAllVMsOnPreferredHost = $false
		$arrVMsOnWrongHost += $VirtualMachineName
	}
}

#Convert VM On Wrong Host array to string - separated by ";"
$strVMsOnWrongHost = [system.String]::Join(";", $arrVMsOnWrongHost)

#Convert VM On Preferred Host array to string - separated by ";"
$strVMsOnPreferredHost = [system.String]::Join(";", $arrVMsOnPreferredHost)

#Convert Preferred Host Not Set array to string - separated by ";"
$strPreferredHostsNotConfigured = [system.String]::Join(";", $arrPreferredHostsNotConfigured)

#MOM API PropertyBag
$oBag = $oAPI.CreatePropertyBag()
$oBag.AddValue('VMsOnWrongHost', $strVMsOnWrongHost)
$oBag.AddValue('VMsOnPreferredHost', $strVMsOnPreferredHost)
$oBag.AddValue('PreferredHostsNotConfigured', $strPreferredHostsNotConfigured)
$oBag.AddValue('AllVMsOnPreferredHost', $bAllVMsOnPreferredHost)
$oBag.AddValue('AllVMsPreferredHostConfigured', $bAllVMsPreferredHostConfigured)

#Debugging Log
if ($bAllVMsOnPreferredHost)
{
	$OAPI.LogScriptEvent($ScriptName,11001,0,"All virtual machines are on preferred hosts: $strVMsOnPreferredHost")
} else {
	$OAPI.LogScriptEvent($ScriptName,11003,2,"At least 1 virtual machine is not on preferred hosts")
}

if ($strVMsOnPreferredHost.length -gt 0)
{
	$OAPI.LogScriptEvent($ScriptName,11002,0,"The following virtual machines are on the preferred host: $strVMsOnPreferredHost")
}

if ($strVMsOnWrongHost.length -gt 0)
{
	$OAPI.LogScriptEvent($ScriptName,11004,2,"The following virtual machines are NOT on the preferred host: $strVMsOnWrongHost")
}

#return property bag
$oBag
#$oAPI.Return($oBag)
]]></ScriptBody>
                <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
              </ProbeAction>
            </MemberModules>
            <Composition>
              <Node ID="Probe" />
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.PropertyBagData</OutputType>
        <TriggerOnly>true</TriggerOnly>
      </ProbeActionModuleType>
      <ProbeActionModuleType ID="QND.Hyperv2012R2.HyperV.Cluster.Node.Status.PT" Accessibility="Internal" Batching="false" PassThrough="false">
        <Configuration>
          <xsd:element minOccurs="1" name="ClusterName" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" name="VMsOnWrongHost" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" name="TimeoutSeconds" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
        </OverrideableParameters>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <ProbeAction ID="PassThru" TypeID="System!System.PassThroughProbe" />
              <ProbeAction ID="Script" TypeID="Windows!Microsoft.Windows.ScriptPropertyBagProbe">
                <ScriptName>ClusterNodesStatusProbe.vbs</ScriptName>
                <Arguments>$Config/ClusterName$ $Config/VMsOnWrongHost$</Arguments>
                <ScriptBody><![CDATA['===================================================================================
' AUTHOR:         	Tao Yang
' Script Name:    	ClusterNodesStatusProbe.vbs
' DATE:           	11/07/2012
' Version:        	1.0
' COMMENT:			- Script Check the status of cluster nodes
'===================================================================================
'ON ERROR RESUME NEXT
strComputer = Wscript.Arguments(0)
VMsOnWrongHost = Wscript.Arguments(1)
Set oAPI = CreateObject("MOM.ScriptAPI")
Set oBag = oAPI.CreatePropertyBag()
Set objWMICluster = GetObject("winmgmts:\\" & strComputer & "\root\MSCluster")
bHealthyCluster = TRUE
WMIQuery = "select Name,State from MSCluster_Node"
Set colClusterNodes = objWMICluster.ExecQuery (WMIQuery)

For Each objClusterNode in colClusterNodes
	IF objClusterNode.State <> 0 THEN
		bHealthyCluster = FALSE
	END IF
Next
'Overall result
Set oBag = oAPI.CreatePropertyBag()
oBag.AddValue "ClusterName", strComputer
oBag.AddValue "VMsOnWrongHost", VMsOnWrongHost
oBag.AddValue "Healthy", bHealthyCluster
oAPI.Return(oBag)
]]></ScriptBody>
                <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
              </ProbeAction>
            </MemberModules>
            <Composition>
              <Node ID="Script">
                <Node ID="PassThru" />
              </Node>
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.PropertyBagData</OutputType>
        <TriggerOnly>true</TriggerOnly>
      </ProbeActionModuleType>
      <ConditionDetectionModuleType ID="QND.Hyperv.2012R2.DeltaPerSecAndFilter" Accessibility="Public" Batching="false" Stateful="true" PassThrough="false">
        <Configuration>
          <xsd:element minOccurs="1" maxOccurs="1" name="NumSamples" type="xsd:unsignedInt" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="InstanceFilter" type="xsd:string" minOccurs="1" maxOccurs="1" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <ModuleImplementation>
          <Composite>
            <MemberModules>
              <ConditionDetection ID="Filter" TypeID="System!System.ExpressionFilter">
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">/DataItem/InstanceName</XPathQuery>
                    </ValueExpression>
                    <Operator>MatchesRegularExpression</Operator>
                    <Pattern>$Config/InstanceFilter$</Pattern>
                  </RegExExpression>
                </Expression>
              </ConditionDetection>
              <ConditionDetection ID="DeltaPerSec" TypeID="Perf!System.Performance.DeltaValueCondition">
                <NumSamples>$Config/NumSamples$</NumSamples>
                <Rate>PerSecond</Rate>
              </ConditionDetection>
            </MemberModules>
            <Composition>
              <Node ID="DeltaPerSec">
                <Node ID="Filter"></Node>
              </Node>
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>Perf!System.Performance.Data</OutputType>
        <InputTypes>
          <InputType>Perf!System.Performance.Data</InputType>
        </InputTypes>
      </ConditionDetectionModuleType>
      <ConditionDetectionModuleType ID="QND.Hyperv.2012R2.DeltaAbsAndFilter" Accessibility="Public" Batching="false" Stateful="true" PassThrough="false">
        <Configuration>
          <xsd:element minOccurs="1" maxOccurs="1" name="NumSamples" type="xsd:unsignedInt" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="InstanceFilter" type="xsd:string" minOccurs="1" maxOccurs="1" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <ModuleImplementation>
          <Composite>
            <MemberModules>
              <ConditionDetection ID="Filter" TypeID="System!System.ExpressionFilter">
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">/DataItem/InstanceName</XPathQuery>
                    </ValueExpression>
                    <Operator>MatchesRegularExpression</Operator>
                    <Pattern>$Config/InstanceFilter$</Pattern>
                  </RegExExpression>
                </Expression>
              </ConditionDetection>
              <ConditionDetection ID="Delta" TypeID="Perf!System.Performance.DeltaValueCondition">
                <NumSamples>$Config/NumSamples$</NumSamples>
                <Absolute>true</Absolute>
              </ConditionDetection>
            </MemberModules>
            <Composition>
              <Node ID="Delta">
                <Node ID="Filter"></Node>
              </Node>
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>Perf!System.Performance.Data</OutputType>
        <InputTypes>
          <InputType>Perf!System.Performance.Data</InputType>
        </InputTypes>
      </ConditionDetectionModuleType>
      <ConditionDetectionModuleType ID="QND.Hyperv.2012R2.PerfAvgAndFilter" Accessibility="Public" Batching="false" Stateful="true" PassThrough="false">
        <Configuration>
          <xsd:element minOccurs="1" maxOccurs="1" name="NumSamples" type="xsd:unsignedInt" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="InstanceFilter" type="xsd:string" minOccurs="1" maxOccurs="1" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <ModuleImplementation>
          <Composite>
            <MemberModules>
              <ConditionDetection ID="Filter" TypeID="System!System.ExpressionFilter">
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">/DataItem/InstanceName</XPathQuery>
                    </ValueExpression>
                    <Operator>MatchesRegularExpression</Operator>
                    <Pattern>$Config/InstanceFilter$</Pattern>
                  </RegExExpression>
                </Expression>
              </ConditionDetection>
              <ConditionDetection ID="Avg" TypeID="Perf!System.Performance.AveragerCondition">
                <NumSamples>$Config/NumSamples$</NumSamples>
              </ConditionDetection>
            </MemberModules>
            <Composition>
              <Node ID="Avg">
                <Node ID="Filter"></Node>
              </Node>
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>Perf!System.Performance.Data</OutputType>
        <InputTypes>
          <InputType>Perf!System.Performance.Data</InputType>
        </InputTypes>
      </ConditionDetectionModuleType>
      <WriteActionModuleType ID="QND.Hyperv.2012R2.WriteTriggerEvent.WAT" Accessibility="Internal">
        <Configuration>
          <xsd:element name="Source" type="xsd:string" minOccurs="1" maxOccurs="1" default="Schedule" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <ModuleImplementation>
          <Composite>
            <MemberModules>
              <WriteAction ID="WA" TypeID="Windows!Microsoft.Windows.PowerShellWriteAction">
                <ScriptName>Write-TriggerEvent.ps1</ScriptName>
                <ScriptBody>
                  <![CDATA[
#quick and dirty
param([string] $source)

New-EventLog –LogName 'Operations Manager' –Source 'Hyper-V Dynamic Discovery' -ErrorAction SilentlyContinue

Write-EventLog -LogName 'Operations Manager' -Source 'Hyper-V Dynamic Discovery' -EntryType Information -EventId 62002 -Message $source]]>
                </ScriptBody>
                <Parameters>
                  <Parameter>
                    <Name>Source</Name>
                    <Value>$Config/Source$</Value>
                  </Parameter>
                </Parameters>
                <TimeoutSeconds>60</TimeoutSeconds>
                <StrictErrorHandling>false</StrictErrorHandling>
                <!-- true only for Tasks -->
              </WriteAction>
            </MemberModules>
            <Composition>
              <Node ID="WA" />
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>Windows!Microsoft.Windows.SerializedObjectData</OutputType>
        <InputType>System!System.BaseData</InputType>
      </WriteActionModuleType>
      <WriteActionModuleType ID="QND.Hyperv2012R2.ResumeReplica.WAT" Accessibility="Public">
        <Configuration>
          <xsd:element name="TimeoutSeconds" type="xsd:int" minOccurs="0" maxOccurs="1" default="60" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="TraceLevel" type="xsd:int" minOccurs="0" maxOccurs="1" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="VMId" type="xsd:string" minOccurs="1" maxOccurs="1" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
          <OverrideableParameter ID="TraceLevel" ParameterType="int" Selector="$Config/TraceLevel$" />
        </OverrideableParameters>
        <ModuleImplementation>
          <Composite>
            <MemberModules>
              <WriteAction ID="Stats" TypeID="Windows!Microsoft.Windows.PowerShellWriteAction">
                <ScriptName>Get-VMReplicaStatus.ps1</ScriptName>
                <ScriptBody>
                  <![CDATA[#TO SHOW VERBOSE MESSAGES SET $VerbosePreference="continue"
#SET ErrorLevel to 5 so show discovery info

#*************************************************************************
# Script Name - Resume-VMReplicaWA.ps1
# Author	  -  - Progel spa
# Version  - 1.0 24.09.2007
# Purpose     - 
#               
# Assumptions - 
#				
#               
# Parameters  - TraceLevel
#             - ComputerName
#				- SourceId
#				- ManagedEntityId
# Command Line - .\test.ps1 4 "serverName" '{1860E0EB-8C21-41DA-9F35-2FE9343CCF36}' '{1860E0EB-8C21-41DA-9F35-2FE9343CCF36}'
# If discovery must be added the followinf parameters
#				SourceId ($ MPElement $ )
#				ManagedEntityId ($ Target/Id $)
#
# Output properties
#
# Status
#
# Version History
#	  1.0 21.02.2015 DG First Release
#     
#
# (c) Copyright 2015, Progel spa, All Rights Reserved
# Proprietary and confidential to Progel srl              
#
#*************************************************************************


# Get the named parameters
param([int]$traceLevel=$(throw 'must have a value'),
	[string]$VMGuid)

	[Threading.Thread]::CurrentThread.CurrentCulture = "en-US"        
	[Threading.Thread]::CurrentThread.CurrentUICulture = "en-US"
	
#Constants used for event logging
$SCRIPT_NAME			= "Get-VMReplicaStatus.ps1"
$SCRIPT_ARGS = 1
$SCRIPT_STARTED			= 831
$PROPERTYBAG_CREATED	= 832
$SCRIPT_ENDED			= 835
$SCRIPT_VERSION = "1.0"

#region Constants
#Trace Level Costants
$TRACE_NONE 	= 0
$TRACE_ERROR 	= 1
$TRACE_WARNING = 2
$TRACE_INFO 	= 3
$TRACE_VERBOSE = 4
$TRACE_DEBUG = 5

#Event Type Constants
$EVENT_TYPE_SUCCESS      = 0
$EVENT_TYPE_ERROR        = 1
$EVENT_TYPE_WARNING      = 2
$EVENT_TYPE_INFORMATION  = 4
$EVENT_TYPE_AUDITSUCCESS = 8
$EVENT_TYPE_AUDITFAILURE = 16

#Standard Event IDs
$FAILURE_EVENT_ID = 4000		#errore generico nello script
$SUCCESS_EVENT_ID = 1101
$START_EVENT_ID = 1102
$STOP_EVENT_ID = 1103

#TypedPropertyBag
$AlertDataType = 0
$EventDataType	= 2
$PerformanceDataType = 2
$StateDataType       = 3
#endregion

#region Helper Functions
function Log-Params
{
	param($Invocation)
	$line=''
	foreach($key in $Invocation.BoundParameters.Keys) {$line += "$key=$($Invocation.BoundParameters[$key])  "}
	Log-Event $START_EVENT_ID $EVENT_TYPE_INFORMATION  ("Starting script. Invocation Name:$($Invocation.InvocationName)`n Parameters`n $line") $TRACE_INFO
}


function Log-Event
{
	param($eventID, $eventType, $msg, $level)
	
	Write-Verbose ("Logging event. " + $SCRIPT_NAME + " EventID: " + $eventID + " eventType: " + $eventType + " Version:" + $SCRIPT_VERSION + " --> " + $msg)
	if($level -le $P_TraceLevel)
	{
		Write-Host ("Logging event. " + $SCRIPT_NAME + " EventID: " + $eventID + " eventType: " + $eventType + " Version:" + $SCRIPT_VERSION + " --> " + $msg)
		$g_API.LogScriptEvent($SCRIPT_NAME,$eventID,$eventType, ($msg + "`n" + "Version :" + $SCRIPT_VERSION))
	}
}

Function Throw-EmptyDiscovery
{
	param($SourceId, $ManagedEntityId)

	$oDiscoveryData = $g_API.CreateDiscoveryData(0, $SourceId, $ManagedEntityId)
	Log-Event $FAILURE_EVENT_ID $EVENT_TYPE_WARNING "Exiting with empty discovery data" $TRACE_INFO
	$oDiscoveryData
	If($traceLevel -eq $TRACE_DEBUG)
	{
		#just for debug proposes when launched from command line does nothing when run inside OpsMgr Agent
		$g_API.Return($oDiscoveryData)
	}
}

Function Throw-KeepDiscoveryInfo
{
param($SourceId, $ManagedEntityId)
	$oDiscoveryData = $g_API.CreateDiscoveryData(0,$SourceId,$ManagedEntityId)
	#Instead of Snapshot discovery, submit Incremental discovery data
	$oDiscoveryData.IsSnapshot = $false
	Log-Event $FAILURE_EVENT_ID $EVENT_TYPE_WARNING "Exiting with null non snapshot discovery data" $TRACE_INFO
	$oDiscoveryData    
	If($traceLevel -eq $TRACE_DEBUG)
	{
		#just for debug proposes when launched from command line does nothing when run inside OpsMgr Agent	
		$g_API.Return($oDiscoveryData)
	}
}
#endregion


#Start by setting up API object.
	$P_TraceLevel = $TRACE_VERBOSE
	$g_Api = New-Object -comObject 'MOM.ScriptAPI'
	#$g_RegistryStatePath = "HKLM\" + $g_API.GetScriptStateKeyPath($SCRIPT_NAME)

	$dtStart = Get-Date
	$P_TraceLevel = $traceLevel
	Log-Params $MyInvocation

try
{
	if (!(get-Module -Name Hyper-v)) {Import-Module Hyper-v}


	if (!(get-command -Module Hyper-V -Name Get-VM -ErrorAction SilentlyContinue)) {
		Log-Event $START_EVENT_ID $EVENT_TYPE_WARNING ("Get-VM Commandlet doesn't exist.") $TRACE_WARNING
		Exit 1;
	}
		$vm = Get-VM | where {$_.VMId -ieq $VMGuid}
		if ($vm) {
			Reset-VMReplicationStatistics -VM $vm
			Resume-VMReplication -VM $vm
			Start-Sleep -Seconds 60
			$replica = Get-VMReplication -VM $vm
			Write-Host "$($vm.Name) Replication mode: $($vm.ReplicationMode.ToString())"
			Write-Host "Replication Health: $($replica.ReplicationHealth.ToString()) State: $($replica.ReplicationState.ToString())"
			Write-Host "Last replication: $($replica.LastReplicationTime)"
			Write-Host "Replica state dump: "
			$replica | fl *
			Write-Host "Replica measure dump: "
			Measure-VMReplica -VM $vm | fl *
		}
		else {
			Write-Host "VM with Guid $VMGuid not found on host!"
		}

	Log-Event $STOP_EVENT_ID $EVENT_TYPE_SUCCESS ("has completed successfully in " + ((Get-Date)- ($dtstart)).TotalSeconds + " seconds.") $TRACE_INFO
}
Catch [Exception] {
	Log-Event $FAILURE_EVENT_ID $EVENT_TYPE_WARNING ("Main " + $Error) $TRACE_WARNING	
	write-Verbose $("TRAPPED: " + $_.Exception.GetType().FullName); 
	Write-Verbose $("TRAPPED: " + $_.Exception.Message); 
}
]]>
                </ScriptBody>
                <Parameters>
                  <Parameter>
                    <Name>TraceLevel</Name>
                    <Value>$Config/TraceLevel$</Value>
                  </Parameter>
                  <Parameter>
                    <Name>VMGuid</Name>
                    <Value>$Config/VMId$</Value>
                  </Parameter>
                </Parameters>
                <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
                <StrictErrorHandling>true</StrictErrorHandling>
                <!-- true only for Tasks -->
              </WriteAction>
            </MemberModules>
            <Composition>
              <Node ID="Stats" />
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>Windows!Microsoft.Windows.SerializedObjectData</OutputType>
        <InputType>System!System.BaseData</InputType>
      </WriteActionModuleType>
      <WriteActionModuleType ID="QND.Hyperv.2012R2.VMActions.WAT" Accessibility="Public">
        <Configuration>
          <xsd:element name="TimeoutSeconds" type="xsd:int" minOccurs="0" maxOccurs="1" default="60" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="TraceLevel" type="xsd:int" minOccurs="0" maxOccurs="1" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="VMId" type="xsd:string" minOccurs="1" maxOccurs="1" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="Action" type="xsd:string" minOccurs="1" maxOccurs="1" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="Param1" type="xsd:string" minOccurs="1" maxOccurs="1" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
          <OverrideableParameter ID="TraceLevel" ParameterType="int" Selector="$Config/TraceLevel$" />
        </OverrideableParameters>
        <ModuleImplementation>
          <Composite>
            <MemberModules>
              <WriteAction ID="WA" TypeID="Windows!Microsoft.Windows.PowerShellWriteAction">
                <ScriptName>Start-VMAction.ps1</ScriptName>
                <ScriptBody>
                  <![CDATA[#TO SHOW VERBOSE MESSAGES SET $VerbosePreference="continue"
#SET ErrorLevel to 5 so show discovery info

#*************************************************************************
# Script Name - Start-VMAction.ps1
# Author	  -  - Progel spa
# Version  - 1.0 24.09.2007
# Purpose     - 
#               
# Assumptions - 
#				
#               
# Parameters  - TraceLevel
#             - ComputerName
#				- SourceId
#				- ManagedEntityId
# Command Line - .\test.ps1 4 "serverName" '{1860E0EB-8C21-41DA-9F35-2FE9343CCF36}' '{1860E0EB-8C21-41DA-9F35-2FE9343CCF36}'
# If discovery must be added the followinf parameters
#				SourceId ($ MPElement $ )
#				ManagedEntityId ($ Target/Id $)
#
# Output properties
#
# Status
#
# Version History
#	  1.0 21.02.2015 DG First Release
#     
#
# (c) Copyright 2015, Progel spa, All Rights Reserved
# Proprietary and confidential to Progel srl              
#
#*************************************************************************


# Get the named parameters
param([int]$traceLevel=$(throw 'must have a value'),
	[string]$VMId,
	[String] $op,
	[string] $param1)


	[Threading.Thread]::CurrentThread.CurrentCulture = "en-US"        
	[Threading.Thread]::CurrentThread.CurrentUICulture = "en-US"
	
#Constants used for event logging
$SCRIPT_NAME			= "Get-VMUptime.ps1"
$SCRIPT_ARGS = 1
$SCRIPT_STARTED			= 831
$PROPERTYBAG_CREATED	= 832
$SCRIPT_ENDED			= 835
$SCRIPT_VERSION = "1.0"

#region Constants
#Trace Level Costants
$TRACE_NONE 	= 0
$TRACE_ERROR 	= 1
$TRACE_WARNING = 2
$TRACE_INFO 	= 3
$TRACE_VERBOSE = 4
$TRACE_DEBUG = 5

#Event Type Constants
$EVENT_TYPE_SUCCESS      = 0
$EVENT_TYPE_ERROR        = 1
$EVENT_TYPE_WARNING      = 2
$EVENT_TYPE_INFORMATION  = 4
$EVENT_TYPE_AUDITSUCCESS = 8
$EVENT_TYPE_AUDITFAILURE = 16

#Standard Event IDs
$FAILURE_EVENT_ID = 4000		#errore generico nello script
$SUCCESS_EVENT_ID = 1101
$START_EVENT_ID = 1102
$STOP_EVENT_ID = 1103

#TypedPropertyBag
$AlertDataType = 0
$EventDataType	= 2
$PerformanceDataType = 2
$StateDataType       = 3
#endregion

#region Helper Functions
function Log-Params
{
	param($Invocation)
	$line=''
	foreach($key in $Invocation.BoundParameters.Keys) {$line += "$key=$($Invocation.BoundParameters[$key])  "}
	Log-Event $START_EVENT_ID $EVENT_TYPE_INFORMATION  ("Starting script. Invocation Name:$($Invocation.InvocationName)`n Parameters`n $line") $TRACE_INFO
}


function Log-Event
{
	param($eventID, $eventType, $msg, $level)
	
	Write-Verbose ("Logging event. " + $SCRIPT_NAME + " EventID: " + $eventID + " eventType: " + $eventType + " Version:" + $SCRIPT_VERSION + " --> " + $msg)
	if($level -le $P_TraceLevel)
	{
		Write-Host ("Logging event. " + $SCRIPT_NAME + " EventID: " + $eventID + " eventType: " + $eventType + " Version:" + $SCRIPT_VERSION + " --> " + $msg)
		$g_API.LogScriptEvent($SCRIPT_NAME,$eventID,$eventType, ($msg + "`n" + "Version :" + $SCRIPT_VERSION))
	}
}

Function Throw-EmptyDiscovery
{
	param($SourceId, $ManagedEntityId)

	$oDiscoveryData = $g_API.CreateDiscoveryData(0, $SourceId, $ManagedEntityId)
	Log-Event $FAILURE_EVENT_ID $EVENT_TYPE_WARNING "Exiting with empty discovery data" $TRACE_INFO
	$oDiscoveryData
	If($traceLevel -eq $TRACE_DEBUG)
	{
		#just for debug proposes when launched from command line does nothing when run inside OpsMgr Agent
		$g_API.Return($oDiscoveryData)
	}
}

Function Throw-KeepDiscoveryInfo
{
param($SourceId, $ManagedEntityId)
	$oDiscoveryData = $g_API.CreateDiscoveryData(0,$SourceId,$ManagedEntityId)
	#Instead of Snapshot discovery, submit Incremental discovery data
	$oDiscoveryData.IsSnapshot = $false
	Log-Event $FAILURE_EVENT_ID $EVENT_TYPE_WARNING "Exiting with null non snapshot discovery data" $TRACE_INFO
	$oDiscoveryData    
	If($traceLevel -eq $TRACE_DEBUG)
	{
		#just for debug proposes when launched from command line does nothing when run inside OpsMgr Agent	
		$g_API.Return($oDiscoveryData)
	}
}
#endregion

$vm = get-VM -Id $VMId
if (!$vm) {
	Throw '$VMId Not Found' #so the task terminates in error
}

#jobs don't work in OpMgr POSH environment so I start the commands synchronously
Log-Event $SUCCESS_EVENT_ID $EVENT_TYPE_INFORMATION "Applying action $op to $($vm.Name)" $TRACE_INFO
Write-Host "Applying action $op to $($vm.Name)"
try {
	switch ($op) {
		'restart' {
			Write-Host 'Stopping VM'
			Stop-VM -VM $vm -Verbose -Force
			do {
				Start-Sleep -Seconds 30
				$status = Get-VM -Id $vm.Id
			} while ([int] ($status.state) -ne 3) #3 = Off
			Write-Host 'Starting VM'
			Start-VM -VM $vm -Verbose
		}
		'stop' {
			if($param1 -ieq 'force'){Stop-VM -VM $vm -Verbose -Force}
			else {Stop-VM -VM $vm -Verbose}
		}
		'start' {Start-VM -VM $vm -Verbose}
		'save' {Stop-VM -VM $vm -Save -Verbose}
		'migrate' {
			if(! $vm.IsClustered) {
				throw 'VM $($vm.Name) is not clustered. Aborting'
			}
			if(!(get-module -Name FailoverClusters)) {Import-Module FailoverClusters}
			$groups = get-clustergroup | where {$_.GroupType -eq 'VirtualMachine'}
			$res=$null
			foreach($g in $groups) {
				$VMGuid = ($g | Get-ClusterResource | Get-ClusterParameter | where {$_.Name -ieq 'VMID'})[0].Value
				if($VMGuid -eq $vm.Id.ToString()) {
					if($param1 -ieq 'best') {$res = Move-ClusterVirtualMachineRole  -InputObject $g -Verbose}
					else {$res = Move-ClusterVirtualMachineRole  -InputObject $g -Node $param1 -Verbose}
				}
			}
			if(! $res) {throw "VM $($vm.name) not found in cluster resources. Aborting."}
			if ($error.Count -ne 0)
			{
				throw ([string]::Format("Migration was not successfull. Group state {0} and owner {1}. Error: {2}", $res.State, $res.OwnerNode.NodeName, $error[0]))
			}
		}
		'pause' {Suspend-VM -VM $vm -Verbose}
		'resume' {Resume-VM -VM $vm -Verbose}
		'turnoff' {Stop-VM -VM $vm -TurnOff -Verbose}
		'checkpoint' {Checkpoint-VM -VM $vm -SnapshotName $param1 -Verbose}
		'removecheckpoint' {Remove-VMSnapshot -VM $vm -Name $param1 -Verbose}
		'restorecheckpoint' {Restore-VMSnapshot -VM $vm -Name $param1 -Verbose}
		'listcheckpoints' {
			$snapshots = Get-VMSnapshot -VM $vm -Verbose
			$snapshots | fl *
		 }
		default {Write-Host 'Unknown Action'}
	}
	#return the status if we were not migrating
	if($op -ine 'migrate') {$vm = Get-VM -Id $VMId; $vm | fl *;}
	else {$res | fl *}
}
catch {
	Log-Event $FAILURE_EVENT_ID $EVENT_TYPE_WARNING ("Main " + $($Error[0].Exception)) $TRACE_WARNING	
	write-Verbose $("TRAPPED: " + $_.Exception.GetType().FullName); 
	Write-Verbose $("TRAPPED: " + $_.Exception.Message); 
	#relaunch the exception 
	throw ($_.Exception.Message)
}]]>
                </ScriptBody>
                <Parameters>
                  <Parameter>
                    <Name>TraceLevel</Name>
                    <Value>$Config/TraceLevel$</Value>
                  </Parameter>
                  <Parameter>
                    <Name>VMId</Name>
                    <Value>$Config/VMId$</Value>
                  </Parameter>
                  <Parameter>
                    <Name>op</Name>
                    <Value>$Config/Action$</Value>
                  </Parameter>
                  <Parameter>
                    <Name>Param1</Name>
                    <Value>$Config/Param1$</Value>
                  </Parameter>
                </Parameters>
                <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
                <StrictErrorHandling>true</StrictErrorHandling>
                <!-- true only for Tasks -->
              </WriteAction>
            </MemberModules>
            <Composition>
              <Node ID="WA" />
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>Windows!Microsoft.Windows.SerializedObjectData</OutputType>
        <InputType>System!System.BaseData</InputType>
      </WriteActionModuleType>
      <WriteActionModuleType ID="QND.Hyperv.2012R2.VMStop.WAT" Accessibility="Public">
        <Configuration>
          <xsd:element name="TimeoutSeconds" type="xsd:int" minOccurs="0" maxOccurs="1" default="60" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="TraceLevel" type="xsd:int" minOccurs="0" maxOccurs="1" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="VMId" type="xsd:string" minOccurs="1" maxOccurs="1" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="Action" type="xsd:string" minOccurs="1" maxOccurs="1" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="Param1" type="xsd:string" minOccurs="1" maxOccurs="1" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
          <OverrideableParameter ID="TraceLevel" ParameterType="int" Selector="$Config/TraceLevel$" />
          <OverrideableParameter ID="Param1" ParameterType="string" Selector="$Config/Param1$" />
        </OverrideableParameters>
        <ModuleImplementation>
          <Composite>
            <MemberModules>
              <WriteAction ID="WA" TypeID="QND.Hyperv.2012R2.VMActions.WAT">
                <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
                <TraceLevel>$Config/TraceLevel$</TraceLevel>
                <VMId>$Config/VMId$</VMId>
                <Action>$Config/Action$</Action>
                <Param1>$Config/Param1$</Param1>
              </WriteAction>
            </MemberModules>
            <Composition>
              <Node ID="WA" />
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>Windows!Microsoft.Windows.SerializedObjectData</OutputType>
        <InputType>System!System.BaseData</InputType>
      </WriteActionModuleType>
      <WriteActionModuleType ID="QND.Hyperv.2012R2.VMMigrate.WAT" Accessibility="Public">
        <Configuration>
          <xsd:element name="TimeoutSeconds" type="xsd:int" minOccurs="0" maxOccurs="1" default="60" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="TraceLevel" type="xsd:int" minOccurs="0" maxOccurs="1" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="VMId" type="xsd:string" minOccurs="1" maxOccurs="1" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="Action" type="xsd:string" minOccurs="1" maxOccurs="1" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="Param1" type="xsd:string" minOccurs="1" maxOccurs="1" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
          <OverrideableParameter ID="TraceLevel" ParameterType="int" Selector="$Config/TraceLevel$" />
          <OverrideableParameter ID="Param1" ParameterType="string" Selector="$Config/Param1$" />
        </OverrideableParameters>
        <ModuleImplementation>
          <Composite>
            <MemberModules>
              <WriteAction ID="WA" TypeID="QND.Hyperv.2012R2.VMActions.WAT">
                <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
                <TraceLevel>$Config/TraceLevel$</TraceLevel>
                <VMId>$Config/VMId$</VMId>
                <Action>$Config/Action$</Action>
                <Param1>$Config/Param1$</Param1>
              </WriteAction>
            </MemberModules>
            <Composition>
              <Node ID="WA" />
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>Windows!Microsoft.Windows.SerializedObjectData</OutputType>
        <InputType>System!System.BaseData</InputType>
      </WriteActionModuleType>
      <WriteActionModuleType ID="QND.Hyperv.2012R2.VMCheckpoint.WAT" Accessibility="Public">
        <Configuration>
          <xsd:element name="TimeoutSeconds" type="xsd:int" minOccurs="0" maxOccurs="1" default="60" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="TraceLevel" type="xsd:int" minOccurs="0" maxOccurs="1" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="VMId" type="xsd:string" minOccurs="1" maxOccurs="1" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="Action" type="xsd:string" minOccurs="1" maxOccurs="1" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="Param1" type="xsd:string" minOccurs="1" maxOccurs="1" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
          <OverrideableParameter ID="TraceLevel" ParameterType="int" Selector="$Config/TraceLevel$" />
          <OverrideableParameter ID="Param1" ParameterType="string" Selector="$Config/Param1$" />
        </OverrideableParameters>
        <ModuleImplementation>
          <Composite>
            <MemberModules>
              <WriteAction ID="WA" TypeID="QND.Hyperv.2012R2.VMActions.WAT">
                <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
                <TraceLevel>$Config/TraceLevel$</TraceLevel>
                <VMId>$Config/VMId$</VMId>
                <Action>$Config/Action$</Action>
                <Param1>$Config/Param1$</Param1>
              </WriteAction>
            </MemberModules>
            <Composition>
              <Node ID="WA" />
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>Windows!Microsoft.Windows.SerializedObjectData</OutputType>
        <InputType>System!System.BaseData</InputType>
      </WriteActionModuleType>
    </ModuleTypes>
    <MonitorTypes>
      <UnitMonitorType ID="QND.Hyperv2012R2.VMReplica.MT" Accessibility="Public">
        <MonitorTypeStates>
          <MonitorTypeState ID="Healthy" />
          <MonitorTypeState ID="Warning" />
          <MonitorTypeState ID="Error" />
        </MonitorTypeStates>
        <!-- See  https://msdn.microsoft.com/en-us/library/hh850116(v=vs.85).aspx -->
        <Configuration>
          <xsd:element name="IntervalSeconds" type="xsd:int" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="SyncTime" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="TimeoutSeconds" type="xsd:int" minOccurs="0" maxOccurs="1" default="60" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="TraceLevel" type="xsd:int" minOccurs="0" maxOccurs="1" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="VMId" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="ReplicaAgeHoursWarningThreshold" type="xsd:int" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="ReplicaAgeHoursErrorThreshold" type="xsd:int" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="StateHealthyCodes" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="StateWarningCodes" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="StateErrorCodes" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="HealthyCodes" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="WarningCodes" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="ErrorCodes" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" />
          <OverrideableParameter ID="SyncTime" Selector="$Config/SyncTime$" ParameterType="string" />
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
          <OverrideableParameter ID="TraceLevel" ParameterType="int" Selector="$Config/TraceLevel$" />
          <OverrideableParameter ID="ReplicaAgeHoursWarningThreshold" Selector="$Config/ReplicaAgeHoursWarningThreshold$" ParameterType="int" />
          <OverrideableParameter ID="ReplicaAgeHoursErrorThreshold" Selector="$Config/ReplicaAgeHoursErrorThreshold$" ParameterType="int" />
          <OverrideableParameter ID="StateHealthyCodes" Selector="$Config/StateHealthyCodes$" ParameterType="string" />
          <OverrideableParameter ID="StateWarningCodes" Selector="$Config/StateWarningCodes$" ParameterType="string" />
          <OverrideableParameter ID="StateErrorCodes" Selector="$Config/StateErrorCodes$" ParameterType="string" />
          <OverrideableParameter ID="HealthyCodes" Selector="$Config/HealthyCodes$" ParameterType="string" />
          <OverrideableParameter ID="WarningCodes" Selector="$Config/WarningCodes$" ParameterType="string" />
          <OverrideableParameter ID="ErrorCodes" Selector="$Config/ErrorCodes$" ParameterType="string" />
        </OverrideableParameters>
        <MonitorImplementation>
          <MemberModules>
            <DataSource ID="DS" TypeID="QND.Hyperv2012R2.GetVMReplicaStatus.DS">
              <IntervalSeconds>$Config/IntervalSeconds$</IntervalSeconds>
              <SyncTime>$Config/SyncTime$</SyncTime>
              <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
              <TraceLevel>$Config/TraceLevel$</TraceLevel>
            </DataSource>
            <ConditionDetection ID="FilterVM" TypeID="System!System.ExpressionFilter">
              <Expression>
                <And>
                  <Expression>
                    <SimpleExpression>
                      <ValueExpression>
                        <XPathQuery Type="String">Property[@Name='VMId']</XPathQuery>
                      </ValueExpression>
                      <Operator>Equal</Operator>
                      <ValueExpression>
                        <Value Type="String">$Config/VMId$</Value>
                      </ValueExpression>
                    </SimpleExpression>
                  </Expression>
                  <Expression>
                    <SimpleExpression>
                      <ValueExpression>
                        <XPathQuery Type="Integer">Property[@Name='ReplicationMode']</XPathQuery>
                      </ValueExpression>
                      <Operator>Equal</Operator>
                      <ValueExpression>
                        <Value Type="Integer">1</Value>
                      </ValueExpression>
                    </SimpleExpression>
                  </Expression>
                </And>
              </Expression>
            </ConditionDetection>
            <ConditionDetection ID="HealthyCD" TypeID="System!System.ExpressionFilter">
              <Expression>
                <And>
                  <Expression>
                    <RegExExpression>
                      <ValueExpression>
                        <XPathQuery Type="String">Property[@Name='ReplicationHealthCode']</XPathQuery>
                      </ValueExpression>
                      <Operator>MatchesRegularExpression</Operator>
                      <Pattern>$Config/HealthyCodes$</Pattern>
                    </RegExExpression>
                  </Expression>
                  <Expression>
                    <RegExExpression>
                      <ValueExpression>
                        <XPathQuery Type="String">Property[@Name='ReplicationStateCode']</XPathQuery>
                      </ValueExpression>
                      <Operator>MatchesRegularExpression</Operator>
                      <Pattern>$Config/StateHealthyCodes$</Pattern>
                    </RegExExpression>
                  </Expression>
                  <Expression>
                    <SimpleExpression>
                      <ValueExpression>
                        <XPathQuery Type="Double">Property[@Name='ReplicaAgeHours']</XPathQuery>
                      </ValueExpression>
                      <Operator>LessEqual</Operator>
                      <ValueExpression>
                        <Value Type="Integer">$Config/ReplicaAgeHoursWarningThreshold$</Value>
                      </ValueExpression>
                    </SimpleExpression>
                  </Expression>
                </And>
              </Expression>
            </ConditionDetection>
            <ConditionDetection ID="WarningCD" TypeID="System!System.ExpressionFilter">
              <Expression>
                <And>
                  <Expression>
                    <Or>
                      <Expression>
                        <RegExExpression>
                          <ValueExpression>
                            <XPathQuery Type="String">Property[@Name='ReplicationHealthCode']</XPathQuery>
                          </ValueExpression>
                          <Operator>MatchesRegularExpression</Operator>
                          <Pattern>$Config/WarningCodes$</Pattern>
                        </RegExExpression>
                      </Expression>
                      <Expression>
                        <RegExExpression>
                          <ValueExpression>
                            <XPathQuery Type="String">Property[@Name='ReplicationStateCode']</XPathQuery>
                          </ValueExpression>
                          <Operator>MatchesRegularExpression</Operator>
                          <Pattern>$Config/StateWarningCodes$</Pattern>
                        </RegExExpression>
                      </Expression>
                      <Expression>
                        <And>
                          <Expression>
                            <SimpleExpression>
                              <ValueExpression>
                                <XPathQuery Type="Double">Property[@Name='ReplicaAgeHours']</XPathQuery>
                              </ValueExpression>
                              <Operator>Greater</Operator>
                              <ValueExpression>
                                <Value Type="Integer">$Config/ReplicaAgeHoursWarningThreshold$</Value>
                              </ValueExpression>
                            </SimpleExpression>
                          </Expression>
                          <Expression>
                            <SimpleExpression>
                              <ValueExpression>
                                <XPathQuery Type="Double">Property[@Name='ReplicaAgeHours']</XPathQuery>
                              </ValueExpression>
                              <Operator>LessEqual</Operator>
                              <ValueExpression>
                                <Value Type="Integer">$Config/ReplicaAgeHoursErrorThreshold$</Value>
                              </ValueExpression>
                            </SimpleExpression>
                          </Expression>
                        </And>
                      </Expression>
                    </Or>
                  </Expression>
                  <Expression>
                    <Not>
                      <Expression>
                        <Or>
                          <Expression>
                            <RegExExpression>
                              <ValueExpression>
                                <XPathQuery Type="String">Property[@Name='ReplicationHealthCode']</XPathQuery>
                              </ValueExpression>
                              <Operator>MatchesRegularExpression</Operator>
                              <Pattern>$Config/ErrorCodes$</Pattern>
                            </RegExExpression>
                          </Expression>
                          <Expression>
                            <RegExExpression>
                              <ValueExpression>
                                <XPathQuery Type="String">Property[@Name='ReplicationStateCode']</XPathQuery>
                              </ValueExpression>
                              <Operator>MatchesRegularExpression</Operator>
                              <Pattern>$Config/StateErrorCodes$</Pattern>
                            </RegExExpression>
                          </Expression>
                        </Or>
                      </Expression>
                    </Not>
                  </Expression>
                </And>
              </Expression>
            </ConditionDetection>
            <ConditionDetection ID="ErrorCD" TypeID="System!System.ExpressionFilter">
              <Expression>
                <Or>
                  <Expression>
                    <RegExExpression>
                      <ValueExpression>
                        <XPathQuery Type="String">Property[@Name='ReplicationHealthCode']</XPathQuery>
                      </ValueExpression>
                      <Operator>MatchesRegularExpression</Operator>
                      <Pattern>$Config/ErrorCodes$</Pattern>
                    </RegExExpression>
                  </Expression>
                  <Expression>
                    <RegExExpression>
                      <ValueExpression>
                        <XPathQuery Type="String">Property[@Name='ReplicationStateCode']</XPathQuery>
                      </ValueExpression>
                      <Operator>MatchesRegularExpression</Operator>
                      <Pattern>$Config/StateErrorCodes$</Pattern>
                    </RegExExpression>
                  </Expression>
                  <Expression>
                    <SimpleExpression>
                      <ValueExpression>
                        <XPathQuery Type="Double">Property[@Name='ReplicaAgeHours']</XPathQuery>
                      </ValueExpression>
                      <Operator>Greater</Operator>
                      <ValueExpression>
                        <Value Type="Integer">$Config/ReplicaAgeHoursErrorThreshold$</Value>
                      </ValueExpression>
                    </SimpleExpression>
                  </Expression>
                </Or>
              </Expression>
            </ConditionDetection>
          </MemberModules>
          <RegularDetections>
            <RegularDetection MonitorTypeStateID="Healthy">
              <Node ID="HealthyCD">
                <Node ID="FilterVM">
                  <Node ID="DS" />
                </Node>
              </Node>
            </RegularDetection>
            <RegularDetection MonitorTypeStateID="Warning">
              <Node ID="WarningCD">
                <Node ID="FilterVM">
                  <Node ID="DS" />
                </Node>
              </Node>
            </RegularDetection>
            <RegularDetection MonitorTypeStateID="Error">
              <Node ID="ErrorCD">
                <Node ID="FilterVM">
                  <Node ID="DS" />
                </Node>
              </Node>
            </RegularDetection>
          </RegularDetections>
        </MonitorImplementation>
      </UnitMonitorType>
      <UnitMonitorType ID="QND.Hyperv2012R2.VMSnapshot.MT" Accessibility="Public">
        <MonitorTypeStates>
          <MonitorTypeState ID="Healthy" />
          <MonitorTypeState ID="Warning" />
          <MonitorTypeState ID="Error" />
        </MonitorTypeStates>
        <Configuration>
          <xsd:element name="IntervalSeconds" type="xsd:int" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="SyncTime" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="TimeoutSeconds" type="xsd:int" minOccurs="0" maxOccurs="1" default="60" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="TraceLevel" type="xsd:int" minOccurs="0" maxOccurs="1" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="VMId" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="SnapshotAgeHoursWarningThreshold" type="xsd:int" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="SnapshotAgeHoursErrorThreshold" type="xsd:int" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" />
          <OverrideableParameter ID="SyncTime" Selector="$Config/SyncTime$" ParameterType="string" />
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
          <OverrideableParameter ID="TraceLevel" ParameterType="int" Selector="$Config/TraceLevel$" />
          <OverrideableParameter ID="SnapshotAgeHoursWarningThreshold" Selector="$Config/SnapshotAgeHoursWarningThreshold$" ParameterType="int" />
          <OverrideableParameter ID="SnapshotAgeHoursErrorThreshold" Selector="$Config/SnapshotAgeHoursErrorThreshold$" ParameterType="int" />
        </OverrideableParameters>
        <MonitorImplementation>
          <MemberModules>
            <DataSource ID="DS" TypeID="QND.Hyperv2012R2.GetVMSnapshotAge.DS">
              <IntervalSeconds>$Config/IntervalSeconds$</IntervalSeconds>
              <SyncTime>$Config/SyncTime$</SyncTime>
              <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
              <TraceLevel>$Config/TraceLevel$</TraceLevel>
            </DataSource>
            <ConditionDetection ID="FilterVM" TypeID="System!System.ExpressionFilter">
              <Expression>
                <SimpleExpression>
                  <ValueExpression>
                    <XPathQuery Type="String">Property[@Name='VMId']</XPathQuery>
                  </ValueExpression>
                  <Operator>Equal</Operator>
                  <ValueExpression>
                    <Value Type="String">$Config/VMId$</Value>
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
            </ConditionDetection>
            <ConditionDetection ID="HealthyCD" TypeID="System!System.ExpressionFilter">
              <Expression>
                <SimpleExpression>
                  <ValueExpression>
                    <XPathQuery Type="Double">Property[@Name='OldestSnapshotAgeHours']</XPathQuery>
                  </ValueExpression>
                  <Operator>LessEqual</Operator>
                  <ValueExpression>
                    <Value Type="Integer">$Config/SnapshotAgeHoursWarningThreshold$</Value>
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
            </ConditionDetection>
            <ConditionDetection ID="WarningCD" TypeID="System!System.ExpressionFilter">
              <Expression>
                <And>
                  <Expression>
                    <SimpleExpression>
                      <ValueExpression>
                        <XPathQuery Type="Double">Property[@Name='OldestSnapshotAgeHours']</XPathQuery>
                      </ValueExpression>
                      <Operator>Greater</Operator>
                      <ValueExpression>
                        <Value Type="Integer">$Config/SnapshotAgeHoursWarningThreshold$</Value>
                      </ValueExpression>
                    </SimpleExpression>
                  </Expression>
                  <Expression>
                    <SimpleExpression>
                      <ValueExpression>
                        <XPathQuery Type="Double">Property[@Name='OldestSnapshotAgeHours']</XPathQuery>
                      </ValueExpression>
                      <Operator>LessEqual</Operator>
                      <ValueExpression>
                        <Value Type="Integer">$Config/SnapshotAgeHoursErrorThreshold$</Value>
                      </ValueExpression>
                    </SimpleExpression>
                  </Expression>
                </And>
              </Expression>
            </ConditionDetection>
            <ConditionDetection ID="ErrorCD" TypeID="System!System.ExpressionFilter">
              <Expression>
                <SimpleExpression>
                  <ValueExpression>
                    <XPathQuery Type="Double">Property[@Name='OldestSnapshotAgeHours']</XPathQuery>
                  </ValueExpression>
                  <Operator>Greater</Operator>
                  <ValueExpression>
                    <Value Type="Integer">$Config/SnapshotAgeHoursErrorThreshold$</Value>
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
            </ConditionDetection>
          </MemberModules>
          <RegularDetections>
            <RegularDetection MonitorTypeStateID="Healthy">
              <Node ID="HealthyCD">
                <Node ID="FilterVM">
                  <Node ID="DS" />
                </Node>
              </Node>
            </RegularDetection>
            <RegularDetection MonitorTypeStateID="Warning">
              <Node ID="WarningCD">
                <Node ID="FilterVM">
                  <Node ID="DS" />
                </Node>
              </Node>
            </RegularDetection>
            <RegularDetection MonitorTypeStateID="Error">
              <Node ID="ErrorCD">
                <Node ID="FilterVM">
                  <Node ID="DS" />
                </Node>
              </Node>
            </RegularDetection>
          </RegularDetections>
        </MonitorImplementation>
      </UnitMonitorType>
      <UnitMonitorType ID="QND.Hyperv2012R2.VMISStatus.MT" Accessibility="Public">
        <MonitorTypeStates>
          <MonitorTypeState ID="UpToDate" />
          <MonitorTypeState ID="NeedsUpdate" />
        </MonitorTypeStates>
        <Configuration>
          <xsd:element name="IntervalSeconds" type="xsd:int" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="SyncTime" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="TimeoutSeconds" type="xsd:int" minOccurs="0" maxOccurs="1" default="60" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="TraceLevel" type="xsd:int" minOccurs="0" maxOccurs="1" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="VMId" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" />
          <OverrideableParameter ID="SyncTime" Selector="$Config/SyncTime$" ParameterType="string" />
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
          <OverrideableParameter ID="TraceLevel" ParameterType="int" Selector="$Config/TraceLevel$" />
        </OverrideableParameters>
        <MonitorImplementation>
          <MemberModules>
            <DataSource ID="DS" TypeID="QND.Hyperv2012R2.GetVMISStatus.DS">
              <IntervalSeconds>$Config/IntervalSeconds$</IntervalSeconds>
              <SyncTime>$Config/SyncTime$</SyncTime>
              <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
              <TraceLevel>$Config/TraceLevel$</TraceLevel>
            </DataSource>
            <ConditionDetection ID="FilterVM" TypeID="System!System.ExpressionFilter">
              <Expression>
                <SimpleExpression>
                  <ValueExpression>
                    <XPathQuery Type="String">Property[@Name='VMId']</XPathQuery>
                  </ValueExpression>
                  <Operator>Equal</Operator>
                  <ValueExpression>
                    <Value Type="String">$Config/VMId$</Value>
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
            </ConditionDetection>
            <ConditionDetection ID="HealthyCD" TypeID="System!System.ExpressionFilter">
              <Expression>
                <SimpleExpression>
                  <ValueExpression>
                    <XPathQuery Type="String">Property[@Name='ISStateCode']</XPathQuery>
                  </ValueExpression>
                  <Operator>Equal</Operator>
                  <ValueExpression>
                    <Value Type="String">1</Value>
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
            </ConditionDetection>
            <ConditionDetection ID="WarningCD" TypeID="System!System.ExpressionFilter">
              <Expression>
                <SimpleExpression>
                  <ValueExpression>
                    <XPathQuery Type="String">Property[@Name='ISStateCode']</XPathQuery>
                  </ValueExpression>
                  <Operator>NotEqual</Operator>
                  <ValueExpression>
                    <Value Type="String">1</Value>
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
            </ConditionDetection>
          </MemberModules>
          <RegularDetections>
            <RegularDetection MonitorTypeStateID="UpToDate">
              <Node ID="HealthyCD">
                <Node ID="FilterVM">
                  <Node ID="DS" />
                </Node>
              </Node>
            </RegularDetection>
            <RegularDetection MonitorTypeStateID="NeedsUpdate">
              <Node ID="WarningCD">
                <Node ID="FilterVM">
                  <Node ID="DS" />
                </Node>
              </Node>
            </RegularDetection>
          </RegularDetections>
        </MonitorImplementation>
      </UnitMonitorType>
      <UnitMonitorType ID="QND.Hyperv.2012R2.VMMemoryStatus.MT" Accessibility="Public">
        <MonitorTypeStates>
          <MonitorTypeState ID="OK" />
          <MonitorTypeState ID="UnderPressure" />
        </MonitorTypeStates>
        <Configuration>
          <xsd:element name="IntervalSeconds" type="xsd:int" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="SyncTime" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="TimeoutSeconds" type="xsd:int" minOccurs="0" maxOccurs="1" default="60" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="TraceLevel" type="xsd:int" minOccurs="0" maxOccurs="1" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="VMId" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="PressureThreshold" type="xsd:int" minOccurs="0" maxOccurs="1" default="105" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" />
          <OverrideableParameter ID="SyncTime" Selector="$Config/SyncTime$" ParameterType="string" />
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
          <OverrideableParameter ID="TraceLevel" ParameterType="int" Selector="$Config/TraceLevel$" />
        </OverrideableParameters>
        <MonitorImplementation>
          <MemberModules>
            <DataSource ID="DS" TypeID="QND.Hyperv2012R2.GetVMMemoryStatus.DS">
              <IntervalSeconds>$Config/IntervalSeconds$</IntervalSeconds>
              <SyncTime>$Config/SyncTime$</SyncTime>
              <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
              <TraceLevel>$Config/TraceLevel$</TraceLevel>
            </DataSource>
            <ConditionDetection ID="FilterVM" TypeID="System!System.ExpressionFilter">
              <Expression>
                <SimpleExpression>
                  <ValueExpression>
                    <XPathQuery Type="String">Property[@Name='VMId']</XPathQuery>
                  </ValueExpression>
                  <Operator>Equal</Operator>
                  <ValueExpression>
                    <Value Type="String">$Config/VMId$</Value>
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
            </ConditionDetection>
            <ConditionDetection ID="HealthyCD" TypeID="System!System.ExpressionFilter">
              <Expression>
                <Or>
                  <Expression>
                    <SimpleExpression>
                      <ValueExpression>
                        <XPathQuery Type="String">Property[@Name='MemStatus']</XPathQuery>
                      </ValueExpression>
                      <Operator>Equal</Operator>
                      <ValueExpression>
                        <Value Type="String">OK</Value>
                      </ValueExpression>
                    </SimpleExpression>
                  </Expression>
                  <Expression>
                    <SimpleExpression>
                      <ValueExpression>
                        <XPathQuery Type="Double">Property[@Name='Pressure']</XPathQuery>
                      </ValueExpression>
                      <Operator>LessEqual</Operator>
                      <ValueExpression>
                        <Value Type="Double">$Config/PressureThreshold$</Value>
                      </ValueExpression>
                    </SimpleExpression>
                  </Expression>
                </Or>
              </Expression>
            </ConditionDetection>
            <ConditionDetection ID="WarningCD" TypeID="System!System.ExpressionFilter">
              <Expression>
                <And>
                  <Expression>
                    <SimpleExpression>
                      <ValueExpression>
                        <XPathQuery Type="String">Property[@Name='MemStatus']</XPathQuery>
                      </ValueExpression>
                      <Operator>NotEqual</Operator>
                      <ValueExpression>
                        <Value Type="String">OK</Value>
                      </ValueExpression>
                    </SimpleExpression>
                  </Expression>
                  <Expression>
                    <SimpleExpression>
                      <ValueExpression>
                        <XPathQuery Type="Double">Property[@Name='Pressure']</XPathQuery>
                      </ValueExpression>
                      <Operator>Greater</Operator>
                      <ValueExpression>
                        <Value Type="Double">$Config/PressureThreshold$</Value>
                      </ValueExpression>
                    </SimpleExpression>
                  </Expression>
                </And>
              </Expression>
            </ConditionDetection>
          </MemberModules>
          <RegularDetections>
            <RegularDetection MonitorTypeStateID="OK">
              <Node ID="HealthyCD">
                <Node ID="FilterVM">
                  <Node ID="DS" />
                </Node>
              </Node>
            </RegularDetection>
            <RegularDetection MonitorTypeStateID="UnderPressure">
              <Node ID="WarningCD">
                <Node ID="FilterVM">
                  <Node ID="DS" />
                </Node>
              </Node>
            </RegularDetection>
          </RegularDetections>
        </MonitorImplementation>
      </UnitMonitorType>
      <UnitMonitorType ID="QND.Hyperv2012R2.VHDFragmentation.MT" Accessibility="Public">
        <MonitorTypeStates>
          <MonitorTypeState ID="Healthy" />
          <MonitorTypeState ID="Warning" />
          <MonitorTypeState ID="Error" />
        </MonitorTypeStates>
        <Configuration>
          <xsd:element name="IntervalSeconds" type="xsd:int" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="SyncTime" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="TimeoutSeconds" type="xsd:int" minOccurs="0" maxOccurs="1" default="60" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="TraceLevel" type="xsd:int" minOccurs="0" maxOccurs="1" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="VirtualDiskId" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="FragmentationWarningThreshold" type="xsd:int" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="FragmentationErrorThreshold" type="xsd:int" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" />
          <OverrideableParameter ID="SyncTime" Selector="$Config/SyncTime$" ParameterType="string" />
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
          <OverrideableParameter ID="TraceLevel" ParameterType="int" Selector="$Config/TraceLevel$" />
          <OverrideableParameter ID="FragmentationWarningThreshold" Selector="$Config/FragmentationWarningThreshold$" ParameterType="int" />
          <OverrideableParameter ID="FragmentationErrorThreshold" Selector="$Config/FragmentationErrorThreshold$" ParameterType="int" />
        </OverrideableParameters>
        <MonitorImplementation>
          <MemberModules>
            <DataSource ID="DS" TypeID="QND.Hyperv2012R2.GetVHDStats.DS">
              <IntervalSeconds>$Config/IntervalSeconds$</IntervalSeconds>
              <SyncTime>$Config/SyncTime$</SyncTime>
              <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
              <TraceLevel>$Config/TraceLevel$</TraceLevel>
            </DataSource>
            <ConditionDetection ID="FilterVM" TypeID="System!System.ExpressionFilter">
              <Expression>
                <SimpleExpression>
                  <ValueExpression>
                    <XPathQuery Type="String">Property[@Name='VirtualDiskId']</XPathQuery>
                  </ValueExpression>
                  <Operator>Equal</Operator>
                  <ValueExpression>
                    <Value Type="String">$Config/VirtualDiskId$</Value>
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
            </ConditionDetection>
            <ConditionDetection ID="HealthyCD" TypeID="System!System.ExpressionFilter">
              <Expression>
                <SimpleExpression>
                  <ValueExpression>
                    <XPathQuery Type="Double">Property[@Name='FragPerc']</XPathQuery>
                  </ValueExpression>
                  <Operator>LessEqual</Operator>
                  <ValueExpression>
                    <Value Type="Integer">$Config/FragmentationWarningThreshold$</Value>
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
            </ConditionDetection>
            <ConditionDetection ID="WarningCD" TypeID="System!System.ExpressionFilter">
              <Expression>
                <And>
                  <Expression>
                    <SimpleExpression>
                      <ValueExpression>
                        <XPathQuery Type="Double">Property[@Name='FragPerc']</XPathQuery>
                      </ValueExpression>
                      <Operator>Greater</Operator>
                      <ValueExpression>
                        <Value Type="Integer">$Config/FragmentationWarningThreshold$</Value>
                      </ValueExpression>
                    </SimpleExpression>
                  </Expression>
                  <Expression>
                    <SimpleExpression>
                      <ValueExpression>
                        <XPathQuery Type="Double">Property[@Name='FragPerc']</XPathQuery>
                      </ValueExpression>
                      <Operator>LessEqual</Operator>
                      <ValueExpression>
                        <Value Type="Integer">$Config/FragmentationErrorThreshold$</Value>
                      </ValueExpression>
                    </SimpleExpression>
                  </Expression>
                </And>
              </Expression>
            </ConditionDetection>
            <ConditionDetection ID="ErrorCD" TypeID="System!System.ExpressionFilter">
              <Expression>
                <SimpleExpression>
                  <ValueExpression>
                    <XPathQuery Type="Double">Property[@Name='FragPerc']</XPathQuery>
                  </ValueExpression>
                  <Operator>Greater</Operator>
                  <ValueExpression>
                    <Value Type="Integer">$Config/FragmentationErrorThreshold$</Value>
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
            </ConditionDetection>
          </MemberModules>
          <RegularDetections>
            <RegularDetection MonitorTypeStateID="Healthy">
              <Node ID="HealthyCD">
                <Node ID="FilterVM">
                  <Node ID="DS" />
                </Node>
              </Node>
            </RegularDetection>
            <RegularDetection MonitorTypeStateID="Warning">
              <Node ID="WarningCD">
                <Node ID="FilterVM">
                  <Node ID="DS" />
                </Node>
              </Node>
            </RegularDetection>
            <RegularDetection MonitorTypeStateID="Error">
              <Node ID="ErrorCD">
                <Node ID="FilterVM">
                  <Node ID="DS" />
                </Node>
              </Node>
            </RegularDetection>
          </RegularDetections>
        </MonitorImplementation>
      </UnitMonitorType>
      <UnitMonitorType ID="QND.Hyperv2012R2.VMName.ComputerName.Match.MT" Accessibility="Public">
        <MonitorTypeStates>
          <MonitorTypeState ID="NamesMatch" NoDetection="false" />
          <MonitorTypeState ID="NamesDoNotMatch" NoDetection="false" />
        </MonitorTypeStates>
        <Configuration>
          <xsd:element minOccurs="1" name="IntervalSeconds" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="SyncTime" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" name="ComputerFQDN" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" name="VMName" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" name="TimeoutSeconds" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" />
          <OverrideableParameter ID="SyncTime" Selector="$Config/SyncTime$" ParameterType="string" />
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
        </OverrideableParameters>
        <MonitorImplementation>
          <MemberModules>
            <DataSource ID="DS" TypeID="System!System.SimpleScheduler">
              <IntervalSeconds>$Config/IntervalSeconds$</IntervalSeconds>
              <SyncTime>$Config/SyncTime$</SyncTime>
            </DataSource>
            <ProbeAction ID="Parse" TypeID="Windows!Microsoft.Windows.PowerShellPropertyBagProbe">
              <ScriptName>GetNetBIOSCOmputerName.vbs</ScriptName>
              <ScriptBody>
                  <![CDATA[param($vmName)

#MOM API
$oAPI = New-Object -ComObject "MOM.ScriptAPI"

$NBName = ($vmName.Split('.'))[0]
$oBag = $oAPI.CreatePropertyBag()
$oBag.AddValue('NetBIOSName', $NBName)
$obag]]>
                </ScriptBody>
              <Parameters>
                <Parameter>
                  <Name>VMName</Name>
                  <Value>$Config/ComputerFQDN$</Value>
                </Parameter>
              </Parameters>
              <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
            </ProbeAction>
            <ConditionDetection ID="FilterMatch" TypeID="System!System.ExpressionFilter">
              <Expression>
                <Or>
                  <Expression>
                    <SimpleExpression>
                      <ValueExpression>
                        <XPathQuery Type="String">Property[@Name='NetBIOSName']</XPathQuery>
                      </ValueExpression>
                      <Operator>Equal</Operator>
                      <ValueExpression>
                        <Value Type="String">$Config/VMName$</Value>
                      </ValueExpression>
                    </SimpleExpression>
                  </Expression>
                  <Expression>
                    <SimpleExpression>
                      <ValueExpression>
                        <Value Type="String">$Config/ComputerFQDN$</Value>
                      </ValueExpression>
                      <Operator>Equal</Operator>
                      <ValueExpression>
                        <Value Type="String">$Config/VMName$</Value>
                      </ValueExpression>
                    </SimpleExpression>
                  </Expression>
                </Or>
              </Expression>
            </ConditionDetection>
            <ConditionDetection ID="FilterNotMatch" TypeID="System!System.ExpressionFilter">
              <Expression>
                <And>
                  <Expression>
                    <SimpleExpression>
                      <ValueExpression>
                        <XPathQuery Type="String">Property[@Name='NetBIOSName']</XPathQuery>
                      </ValueExpression>
                      <Operator>NotEqual</Operator>
                      <ValueExpression>
                        <Value Type="String">$Config/VMName$</Value>
                      </ValueExpression>
                    </SimpleExpression>
                  </Expression>
                  <Expression>
                    <SimpleExpression>
                      <ValueExpression>
                        <Value Type="String">$Config/ComputerFQDN$</Value>
                      </ValueExpression>
                      <Operator>NotEqual</Operator>
                      <ValueExpression>
                        <Value Type="String">$Config/VMName$</Value>
                      </ValueExpression>
                    </SimpleExpression>
                  </Expression>
                </And>
              </Expression>
            </ConditionDetection>
          </MemberModules>
          <RegularDetections>
            <RegularDetection MonitorTypeStateID="NamesMatch">
              <Node ID="FilterMatch">
                <Node ID="Parse">
                  <Node ID="DS" />
                </Node>
              </Node>
            </RegularDetection>
            <RegularDetection MonitorTypeStateID="NamesDoNotMatch">
              <Node ID="FilterNotMatch">
                <Node ID="Parse">
                  <Node ID="DS" />
                </Node>
              </Node>
            </RegularDetection>
          </RegularDetections>
        </MonitorImplementation>
      </UnitMonitorType>
      <UnitMonitorType ID="QND.Hyperv2012R2.VM.Cluster.Resource.Owning.Node.MT" Accessibility="Internal">
        <MonitorTypeStates>
          <MonitorTypeState ID="ERROR" NoDetection="false" />
          <MonitorTypeState ID="OK" NoDetection="false" />
        </MonitorTypeStates>
        <Configuration>
          <xsd:element minOccurs="1" name="IntervalSeconds" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="SyncTime" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" name="TimeoutSeconds" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" />
          <OverrideableParameter ID="SyncTime" Selector="$Config/SyncTime$" ParameterType="string" />
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
        </OverrideableParameters>
        <MonitorImplementation>
          <MemberModules>
            <DataSource ID="DS" TypeID="QND.Hyperv2012R2.VM.Cluster.Resource.WMI.DS">
              <IntervalSeconds>$Config/IntervalSeconds$</IntervalSeconds>
              <SyncTime>$Config/SyncTime$</SyncTime>
              <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
            </DataSource>
            <ProbeAction ID="Probe" TypeID="QND.Hyperv2012R2.VM.Cluster.Resource.WMI.PT">
              <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
            </ProbeAction>
            <ConditionDetection ID="FilterOK" TypeID="System!System.ExpressionFilter">
              <Expression>
                <SimpleExpression>
                  <ValueExpression>
                    <XPathQuery Type="String">Property[@Name='AllVMsOnPreferredHost']</XPathQuery>
                  </ValueExpression>
                  <Operator>Equal</Operator>
                  <ValueExpression>
                    <Value Type="String">true</Value>
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
            </ConditionDetection>
            <ConditionDetection ID="FilterERROR" TypeID="System!System.ExpressionFilter">
              <Expression>
                <SimpleExpression>
                  <ValueExpression>
                    <XPathQuery Type="String">Property[@Name='AllVMsOnPreferredHost']</XPathQuery>
                  </ValueExpression>
                  <Operator>Equal</Operator>
                  <ValueExpression>
                    <Value Type="String">false</Value>
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
            </ConditionDetection>
          </MemberModules>
          <RegularDetections>
            <RegularDetection MonitorTypeStateID="ERROR">
              <Node ID="FilterERROR">
                <Node ID="DS" />
              </Node>
            </RegularDetection>
            <RegularDetection MonitorTypeStateID="OK">
              <Node ID="FilterOK">
                <Node ID="DS" />
              </Node>
            </RegularDetection>
          </RegularDetections>
          <OnDemandDetections>
            <OnDemandDetection MonitorTypeStateID="ERROR">
              <Node ID="FilterERROR">
                <Node ID="Probe" />
              </Node>
            </OnDemandDetection>
            <OnDemandDetection MonitorTypeStateID="OK">
              <Node ID="FilterOK">
                <Node ID="Probe" />
              </Node>
            </OnDemandDetection>
          </OnDemandDetections>
        </MonitorImplementation>
      </UnitMonitorType>
      <UnitMonitorType ID="Microsoft.Windows.HyperV.DiskFreeSpaceMonitorType" Accessibility="Public">
        <MonitorTypeStates>
          <MonitorTypeState ID="FreeSpaceAvailable" NoDetection="false" />
          <MonitorTypeState ID="PartialSpaceAvailable" NoDetection="false" />
          <MonitorTypeState ID="NoSpaceAvailable" NoDetection="false" />
        </MonitorTypeStates>
        <Configuration>
          <xsd:element minOccurs="1" name="VirtualDriveId" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" name="WarningSize" type="xsd:int" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" name="ErrorSize" type="xsd:int" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="WarningSize" Selector="$Config/WarningSize$" ParameterType="int" />
          <OverrideableParameter ID="ErrorSize" Selector="$Config/ErrorSize$" ParameterType="int" />
        </OverrideableParameters>
        <MonitorImplementation>
          <MemberModules>
            <DataSource ID="SpaceProvider" TypeID="Microsoft.Windows.HyperV.DiskPartitionSpaceProvider.Subscriber" />
            <ConditionDetection ID="EnoughSpaceCheck" TypeID="System!System.ExpressionFilter">
              <Expression>
                <Or>
                  <Expression>
                    <SimpleExpression>
                      <ValueExpression>
                        <XPathQuery Type="Integer">Property[@Name='$Config/VirtualDriveId$.FreeSpace']</XPathQuery>
                      </ValueExpression>
                      <Operator>Greater</Operator>
                      <ValueExpression>
                        <Value Type="Integer">$Config/WarningSize$</Value>
                      </ValueExpression>
                    </SimpleExpression>
                  </Expression>
                  <Expression>
                    <SimpleExpression>
                      <ValueExpression>
                        <XPathQuery Type="String">Property[@Name='$Config/VirtualDriveId$.Monitor']</XPathQuery>
                      </ValueExpression>
                      <Operator>Equal</Operator>
                      <ValueExpression>
                        <Value Type="String">false</Value>
                      </ValueExpression>
                    </SimpleExpression>
                  </Expression>
                </Or>
              </Expression>
            </ConditionDetection>
            <ConditionDetection ID="PartialSpaceCheck" TypeID="System!System.ExpressionFilter">
              <Expression>
                <And>
                  <Expression>
                    <SimpleExpression>
                      <ValueExpression>
                        <XPathQuery Type="Integer">Property[@Name='$Config/VirtualDriveId$.FreeSpace']</XPathQuery>
                      </ValueExpression>
                      <Operator>LessEqual</Operator>
                      <ValueExpression>
                        <Value Type="Integer">$Config/WarningSize$</Value>
                      </ValueExpression>
                    </SimpleExpression>
                  </Expression>
                  <Expression>
                    <SimpleExpression>
                      <ValueExpression>
                        <XPathQuery Type="Integer">Property[@Name='$Config/VirtualDriveId$.FreeSpace']</XPathQuery>
                      </ValueExpression>
                      <Operator>Greater</Operator>
                      <ValueExpression>
                        <Value Type="Integer">$Config/ErrorSize$</Value>
                      </ValueExpression>
                    </SimpleExpression>
                  </Expression>
                  <Expression>
                    <SimpleExpression>
                      <ValueExpression>
                        <XPathQuery Type="String">Property[@Name='$Config/VirtualDriveId$.Monitor']</XPathQuery>
                      </ValueExpression>
                      <Operator>Equal</Operator>
                      <ValueExpression>
                        <Value Type="String">true</Value>
                      </ValueExpression>
                    </SimpleExpression>
                  </Expression>
                </And>
              </Expression>
            </ConditionDetection>
            <ConditionDetection ID="NoSpaceCheck" TypeID="System!System.ExpressionFilter">
              <Expression>
                <And>
                  <Expression>
                    <SimpleExpression>
                      <ValueExpression>
                        <XPathQuery Type="Integer">Property[@Name='$Config/VirtualDriveId$.FreeSpace']</XPathQuery>
                      </ValueExpression>
                      <Operator>LessEqual</Operator>
                      <ValueExpression>
                        <Value Type="Integer">$Config/ErrorSize$</Value>
                      </ValueExpression>
                    </SimpleExpression>
                  </Expression>
                  <Expression>
                    <SimpleExpression>
                      <ValueExpression>
                        <XPathQuery Type="String">Property[@Name='$Config/VirtualDriveId$.Monitor']</XPathQuery>
                      </ValueExpression>
                      <Operator>Equal</Operator>
                      <ValueExpression>
                        <Value Type="String">true</Value>
                      </ValueExpression>
                    </SimpleExpression>
                  </Expression>
                </And>
              </Expression>
            </ConditionDetection>
          </MemberModules>
          <RegularDetections>
            <RegularDetection MonitorTypeStateID="FreeSpaceAvailable">
              <Node ID="EnoughSpaceCheck">
                <Node ID="SpaceProvider" />
              </Node>
            </RegularDetection>
            <RegularDetection MonitorTypeStateID="PartialSpaceAvailable">
              <Node ID="PartialSpaceCheck">
                <Node ID="SpaceProvider" />
              </Node>
            </RegularDetection>
            <RegularDetection MonitorTypeStateID="NoSpaceAvailable">
              <Node ID="NoSpaceCheck">
                <Node ID="SpaceProvider" />
              </Node>
            </RegularDetection>
          </RegularDetections>
        </MonitorImplementation>
      </UnitMonitorType>
    </MonitorTypes>
  </TypeDefinitions>
  <Categories>
    <Category ID="Cat.QND.Hyperv2012R2.VMConnect.ConsoleTask" Target="QND.Hyperv2012R2.VMConnect.ConsoleTask" Value="System!System.Internal.ManagementPack.ConsoleTasks.MonitoringObject" />
  </Categories>
  <Monitoring>
    <Discoveries>
      <Discovery ID="QND.Hyperv.2012R2.VirtualMachineDiscovery" Enabled="onEssentialMonitoring" Target="Hyperv2012R2!Microsoft.Windows.HyperV.2012.R2.ServerRole" ConfirmDelivery="false" Remotable="true" Priority="Normal">
        <Category>Discovery</Category>
        <DiscoveryTypes>
          <DiscoveryClass TypeID="Hyperv2012R2!Microsoft.Windows.HyperV.2012.R2.VirtualMachine">
            <Property TypeID="QND.Hyperv.2012R2.VM" PropertyID="VirtualMachineId" />
            <Property TypeID="QND.Hyperv.2012R2.VM" PropertyID="VirtualMachineName" />
            <Property TypeID="QND.Hyperv.2012R2.VM" PropertyID="HostName" />
            <Property TypeID="QND.Hyperv.2012R2.VM" PropertyID="VMComputerName" />
          </DiscoveryClass>
          <!--
          <DiscoveryClass TypeID="Hyperv2012R2!Microsoft.Windows.HyperV.2012.R2.VirtualDrive">
            <Property TypeID="Windows!Microsoft.Windows.Computer" PropertyID="PrincipalName" />
            <Property TypeID="HypervLib!Microsoft.Windows.HyperV.ServerRole" PropertyID="ServerId" />
            <Property TypeID="HypervLib!Microsoft.Windows.HyperV.VirtualMachine" PropertyID="VirtualMachineId" />
            <Property TypeID="HypervLib!Microsoft.Windows.HyperV.VirtualHardwareComponent" PropertyID="DeviceId" />
            <Property TypeID="HypervLib!Microsoft.Windows.HyperV.VirtualHardwareComponent" PropertyID="Name" />
            <Property TypeID="HypervLib!Microsoft.Windows.HyperV.VirtualHardwareComponent" PropertyID="VirtualMachineName" />
            <Property TypeID="HypervLib!Microsoft.Windows.HyperV.VirtualDrive" PropertyID="ConnectedControllerName" />
            <Property TypeID="HypervLib!Microsoft.Windows.HyperV.VirtualDrive" PropertyID="ImageFile" />
            <Property TypeID="HypervLib!Microsoft.Windows.HyperV.VirtualDrive" PropertyID="DriveType" />
          </DiscoveryClass>
          <DiscoveryClass TypeID="Hyperv2012R2!Microsoft.Windows.HyperV.2012.R2.VirtualNetworkAdapter">
            <Property TypeID="Windows!Microsoft.Windows.Computer" PropertyID="PrincipalName" />
            <Property TypeID="HypervLib!Microsoft.Windows.HyperV.ServerRole" PropertyID="ServerId" />
            <Property TypeID="HypervLib!Microsoft.Windows.HyperV.VirtualMachine" PropertyID="VirtualMachineId" />
            <Property TypeID="HypervLib!Microsoft.Windows.HyperV.VirtualHardwareComponent" PropertyID="DeviceId" />
            <Property TypeID="HypervLib!Microsoft.Windows.HyperV.VirtualHardwareComponent" PropertyID="Name" />
            <Property TypeID="HypervLib!Microsoft.Windows.HyperV.VirtualHardwareComponent" PropertyID="VirtualMachineName" />
            <Property TypeID="HypervLib!Microsoft.Windows.HyperV.VirtualNetworkAdapter" PropertyID="ConnectedNetworkId" />
            <Property TypeID="HypervLib!Microsoft.Windows.HyperV.VirtualNetworkAdapter" PropertyID="ConnectedNetworkName" />
          </DiscoveryClass> -->
          <!-- bogus entry to fool VSAE and force the inclusion of WSLib 
          <DiscoveryClass TypeID="WSLib!Microsoft.Windows.Server.6.2.Computer" /> -->
          <DiscoveryClass TypeID="SHL!System.ComputerHardware" />
          <DiscoveryRelationship TypeID="SC!Microsoft.SystemCenter.HealthServiceShouldManageEntity" />
        </DiscoveryTypes>
        <DataSource ID="DiscoveryDataSource" TypeID="QND.Hyperv.2012R2.VM.DynamicDiscovery.DSType">
          <TraceLevel>2</TraceLevel>
          <TimeoutSeconds>600</TimeoutSeconds>
          <TargetComputer>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/PrincipalName$</TargetComputer>
        </DataSource>
      </Discovery>
      <Discovery ID="QND.Hyperv.2012R2.UnixVM.Group.Discovery" Enabled="true" Target="QND.Hyperv.2012R2.UnixVM.Group" ConfirmDelivery="false" Remotable="true" Priority="Normal">
        <Category>Discovery</Category>
        <DiscoveryTypes>
          <DiscoveryRelationship TypeID="MSIL!Microsoft.SystemCenter.InstanceGroupContainsEntities" />
        </DiscoveryTypes>
        <DataSource ID="GroupPopulationDataSource" TypeID="SC!Microsoft.SystemCenter.GroupPopulator">
          <RuleId>$MPElement$</RuleId>
          <GroupInstanceId>$MPElement[Name="QND.Hyperv.2012R2.UnixVM.Group"]$</GroupInstanceId>
          <MembershipRules>
            <MembershipRule>
              <MonitoringClass>$MPElement[Name="QND.Hyperv.2012R2.VM"]$</MonitoringClass>
              <RelationshipClass>$MPElement[Name="MSIL!Microsoft.SystemCenter.InstanceGroupContainsEntities"]$</RelationshipClass>
              <Expression>
                <SimpleExpression>
                  <ValueExpression>
                    <Property>$MPElement[Name="QND.Hyperv.2012R2.VM"]/OSPlatformId$</Property>
                  </ValueExpression>
                  <Operator>NotEqual</Operator>
                  <ValueExpression>
                    <Value>2</Value>
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
            </MembershipRule>
          </MembershipRules>
        </DataSource>
      </Discovery>
      <Discovery ID="QND.HyperV.Server.Computer.And.Health.Service.Watcher.Group.Discovery" Enabled="true" Target="QND.HyperV.Server.Computer.And.Health.Service.Watcher.Group" ConfirmDelivery="false" Remotable="true" Priority="Normal">
        <Category>Discovery</Category>
        <DiscoveryTypes>
          <DiscoveryRelationship TypeID="MSIL!Microsoft.SystemCenter.InstanceGroupContainsEntities" />
        </DiscoveryTypes>
        <DataSource ID="DS" TypeID="SC!Microsoft.SystemCenter.GroupPopulator">
          <RuleId>$MPElement$</RuleId>
          <GroupInstanceId>$MPElement[Name="QND.HyperV.Server.Computer.And.Health.Service.Watcher.Group"]$</GroupInstanceId>
          <MembershipRules>
            <MembershipRule>
              <MonitoringClass>$MPElement[Name="Windows!Microsoft.Windows.Computer"]$</MonitoringClass>
              <RelationshipClass>$MPElement[Name="MSIL!Microsoft.SystemCenter.InstanceGroupContainsEntities"]$</RelationshipClass>
              <Expression>
                <Contains>
                  <MonitoringClass>$MPElement[Name="HVLib!Microsoft.Windows.HyperV.ServerRole"]$</MonitoringClass>
                </Contains>
              </Expression>
            </MembershipRule>
            <MembershipRule>
              <MonitoringClass>$MPElement[Name="SC!Microsoft.SystemCenter.HealthServiceWatcher"]$</MonitoringClass>
              <RelationshipClass>$MPElement[Name="MSIL!Microsoft.SystemCenter.InstanceGroupContainsEntities"]$</RelationshipClass>
              <Expression>
                <Contains>
                  <MonitoringClass>$MPElement[Name="SC!Microsoft.SystemCenter.HealthService"]$</MonitoringClass>
                  <Expression>
                    <Contained>
                      <MonitoringClass>$MPElement[Name="Windows!Microsoft.Windows.Computer"]$</MonitoringClass>
                      <Expression>
                        <Contained>
                          <MonitoringClass>$Target/Id$</MonitoringClass>
                        </Contained>
                      </Expression>
                    </Contained>
                  </Expression>
                </Contains>
              </Expression>
            </MembershipRule>
          </MembershipRules>
        </DataSource>
      </Discovery>
      <Discovery ID="QND.HyperV.Server.Role.Group.Discovery" Enabled="true" Target="QND.HyperV.Server.Role.Group" ConfirmDelivery="false" Remotable="true" Priority="Normal">
        <Category>Discovery</Category>
        <DiscoveryTypes>
          <DiscoveryRelationship TypeID="MSIL!Microsoft.SystemCenter.InstanceGroupContainsEntities" />
        </DiscoveryTypes>
        <DataSource ID="DS" TypeID="SC!Microsoft.SystemCenter.GroupPopulator">
          <RuleId>$MPElement$</RuleId>
          <GroupInstanceId>$MPElement[Name="QND.HyperV.Server.Role.Group"]$</GroupInstanceId>
          <MembershipRules>
            <MembershipRule>
              <MonitoringClass>$MPElement[Name="HVLib!Microsoft.Windows.HyperV.ServerRole"]$</MonitoringClass>
              <RelationshipClass>$MPElement[Name="MSIL!Microsoft.SystemCenter.InstanceGroupContainsEntities"]$</RelationshipClass>
            </MembershipRule>
          </MembershipRules>
        </DataSource>
      </Discovery>
      <Discovery ID="QND.HyperV.2012R2.WinVMs.Group.Discovery" Enabled="true" Target="QND.HyperV.2012R2.WinVMs.Group" ConfirmDelivery="false" Remotable="true" Priority="Normal">
        <Category>Discovery</Category>
        <DiscoveryTypes>
          <DiscoveryRelationship TypeID="MSIL!Microsoft.SystemCenter.InstanceGroupContainsEntities" />
        </DiscoveryTypes>
        <DataSource ID="GroupPopulationDataSource" TypeID="SC!Microsoft.SystemCenter.GroupPopulator">
          <RuleId>$MPElement$</RuleId>
          <GroupInstanceId>$MPElement[Name="QND.HyperV.2012R2.WinVMs.Group"]$</GroupInstanceId>
          <MembershipRules>
            <MembershipRule>
              <MonitoringClass>$MPElement[Name="QND.Hyperv.2012R2.VM"]$</MonitoringClass>
              <RelationshipClass>$MPElement[Name="MSIL!Microsoft.SystemCenter.InstanceGroupContainsEntities"]$</RelationshipClass>
              <Expression>
                <RegExExpression>
                  <ValueExpression>
                    <Property>$MPElement[Name="QND.Hyperv.2012R2.VM"]/VirtualMachineName$</Property>
                  </ValueExpression>
                  <Operator>MatchesWildcard</Operator>
                  <Pattern>*</Pattern>
                </RegExExpression>
              </Expression>
            </MembershipRule>
          </MembershipRules>
        </DataSource>
      </Discovery>
      <Discovery ID="QND.Hyperv2012R2.HyperV.Cluster.ComputerRole.Discovery" Target="Cluster!Microsoft.Windows.Cluster.VirtualServer" Enabled="false" ConfirmDelivery="false" Remotable="true" Priority="Normal">
        <Category>Discovery</Category>
        <DiscoveryTypes>
          <DiscoveryClass TypeID="QND.Hyperv2012R2.HyperV.Cluster.ComputerRole">
            <Property TypeID="QND.Hyperv2012R2.HyperV.Cluster.ComputerRole" PropertyID="ClusterName" />
          </DiscoveryClass>
        </DiscoveryTypes>
        <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.TimedScript.DiscoveryProvider">
          <IntervalSeconds>14400</IntervalSeconds>
          <SyncTime />
          <ScriptName>ClusterDiscovery.vbs</ScriptName>
          <Arguments>$MPElement$ $Target/Id$ $Target/Property[Type="Windows!Microsoft.Windows.Computer"]/PrincipalName$ "Virtual Machine" "%"</Arguments>
          <ScriptBody>
'========================================================
' AUTHOR:         	Tao Yang
' Script Name:    	ClusterDiscovery.vbs
' DATE:           	20/03/2014
' Version:        	1.0
' COMMENT:			Script to discover failover clusters
'========================================================
On Error Resume Next
SourceID = WScript.Arguments(0)
ManagedEntityID = WScript.Arguments(1)
strComputer = WScript.Arguments(2)
strCLResType = WScript.Arguments(3)
strCLResName = WScript.Arguments(4)

'Declare variables
const HKEY_LOCAL_MACHINE = &amp;H80000002

Set oAPI = CreateObject("MOM.ScriptAPI")
Set oDiscoveryData = oAPI.CreateDiscoveryData(0,SourceID,ManagedEntityID)

  'Check if Failover Cluster service exists
  strKeyPath = "SYSTEM\CurrentControlSet\Services\ClusSvc"
  'connect to the registry provider
  Set oReg=GetObject("winmgmts:{impersonationLevel=impersonate}!\\" &amp; strComputer &amp; "\root\default:StdRegProv")
  If oReg.EnumKey(HKEY_LOCAL_MACHINE, strKeyPath, arrSubKeys) = 0 Then
    'Cluster Service exists, continue, check if specified cluster resource exists
    bCLRes = False
    CLResWMIQuery = "Select * from MSCluster_Resource Where Type = '" &amp; strCLResType &amp;"' AND Name LIKE '" &amp; strCLResName &amp; "'"
    Set objWMICluster = GetObject("winmgmts:\\" &amp; strComputer &amp; "\root\MSCluster")
            Set ColCLRes = objWMICluster.ExecQuery (CLResWMIQuery)
            For Each objCLRes in ColCLRes
            bCLRes = TRUE
            Next

            'NetBIOS Computer Name
            ComputerName = Split(strComputer, ".", -1)(0)
            'Read Cluster name from registry
            strCLKeyPath = "SYSTEM\CurrentControlSet\Services\ClusSvc\Parameters"
            strCLNameValue = "ClusterName"
            oReg.GetStringValue HKEY_LOCAL_MACHINE,strCLKeyPath, strCLNameValue,strClusterName

            'Proceed if NetBIOS Computer Name equals to cluster name
            If UCase(ComputerName) = UCase(strClusterName) Then
            IF bCLRes = TRUE THEN
            Set oInstance = oDiscoveryData.CreateClassInstance("$MPElement[Name='QND.Hyperv2012R2.HyperV.Cluster.ComputerRole']$")
            oInstance.AddProperty "$MPElement[Name='Windows!Microsoft.Windows.Computer']/PrincipalName$", strComputer
            oInstance.AddProperty "$MPElement[Name='System!System.Entity']/DisplayName$", strComputer
            oInstance.AddProperty "$MPElement[Name='QND.Hyperv2012R2.HyperV.Cluster.ComputerRole']/ClusterName$", UCase(strClusterName)
            oDiscoveryData.AddInstance(oInstance)
            END IF
            END IF
            End If
            oAPI.Return oDiscoveryData
          </ScriptBody>
          <TimeoutSeconds>120</TimeoutSeconds>
        </DataSource>
      </Discovery>
      <Discovery ID="QND.Hyperv.2012R2.ReplicaVM.Discovery" ConfirmDelivery="false" Enabled="true" Priority="Normal" Remotable="false" Target="Hyperv2012R2!Microsoft.Windows.HyperV.2012.R2.ServerRole">
        <Category>Discovery</Category>
        <DiscoveryTypes>
          <DiscoveryClass TypeID="QND.Hyperv.2012R2.ReplicaVM"></DiscoveryClass>
        </DiscoveryTypes>
        <DataSource ID="DS" TypeID="QND.Hyperv.2012R2.ReplicaVM.Discovery.DSType">
          <TraceLevel>2</TraceLevel>
          <IntervalSeconds>43200</IntervalSeconds>
          <SyncTime></SyncTime>
          <TimeoutSeconds>300</TimeoutSeconds>
          <TargetComputer>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/PrincipalName$</TargetComputer>
        </DataSource>
      </Discovery>
    </Discoveries>
    <Rules>
      <Rule ID="QND.Hyperv.2012R2.TranslateNewPartitionEvent.Rule" ConfirmDelivery="false" DiscardLevel="100" Enabled="true" Priority="Normal" Remotable="false" Target="Hyperv2012R2!Microsoft.Windows.HyperV.2012.R2.ServerRole">
        <Category>Discovery</Category>
        <DataSources>
          <DataSource ID="GetAndConsolidate" TypeID="QND.Hyperv.2012R2.VMEventsConsolidator.DSType">
            <EventLatencySec>0</EventLatencySec>
            <EventConsolidationSec>600</EventConsolidationSec>
            <TargetComputer>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/PrincipalName$</TargetComputer>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="WriteEvent" TypeID="QND.Hyperv.2012R2.WriteTriggerEvent.WAT">
            <Source>ClusterLog</Source>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="QND.Hyperv.2012R2.VMDynamicDiscoveryTrigger.Rule" ConfirmDelivery="false" DiscardLevel="100" Enabled="true" Priority="Normal" Remotable="false" Target="Hyperv2012R2!Microsoft.Windows.HyperV.2012.R2.ServerRole">
        <Category>Discovery</Category>
        <DataSources>
          <DataSource ID="DS1" TypeID="System!System.Discovery.Scheduler">
            <Scheduler>
              <SimpleReccuringSchedule>
                <Interval Unit="Seconds">43200</Interval>
                <SyncTime />
              </SimpleReccuringSchedule>
              <ExcludeDates />
            </Scheduler>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="WriteEvent" TypeID="QND.Hyperv.2012R2.WriteTriggerEvent.WAT">
            <Source>Scheduled</Source>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="QND.Hyperv.2012R2.WhosMonitoringMe" Target="QND.Hyperv.2012R2.VM" ConfirmDelivery="false" DiscardLevel="100" Enabled="false" Remotable="true" Priority="Normal">
        <Category>Custom</Category>
        <DataSources>
          <DataSource ID="Scheduler" TypeID="System!System.SimpleScheduler">
            <IntervalSeconds>60</IntervalSeconds>
            <SyncTime />
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="WriteEvent" TypeID="Windows!Microsoft.Windows.PowerShellWriteAction">
            <ScriptName>Write-Me.ps1</ScriptName>
            <ScriptBody><![CDATA[param([string]$VMName=$(throw 'must have a value'))

	[Threading.Thread]::CurrentThread.CurrentCulture = "en-US"        
	[Threading.Thread]::CurrentThread.CurrentUICulture = "en-US"

	$g_Api = New-Object -comObject 'MOM.ScriptAPI'
	$HVHost= gwmi -Class win32_computersystem
			$g_API.LogScriptEvent('Write-Me.ps1',1022,4, "I'm $VMName and I'm being monitored by $($hvhost.name) in domain $($hvhost.domain)")]]></ScriptBody>
            <Parameters>
              <Parameter>
                <Name>VMName</Name>
                <Value>$Target/Property[Type='QND.Hyperv.2012R2.VM']/VirtualMachineName$</Value>
              </Parameter>
            </Parameters>
            <TimeoutSeconds>30</TimeoutSeconds>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="QND.Hyperv2012R2.HypervisorVirtualProcessors.Rule" Target="Hyperv2012R2!Microsoft.Windows.HyperV.2012.R2.ServerRole" Enabled="true" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>PerformanceCollection</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Perf!System.Performance.OptimizedDataProvider">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <CounterName>Virtual Processors</CounterName>
            <ObjectName>Hyper-V Hypervisor</ObjectName>
            <InstanceName></InstanceName>
            <AllInstances>false</AllInstances>
            <Frequency>3600</Frequency>
            <Tolerance>0</Tolerance>
            <ToleranceType>Absolute</ToleranceType>
            <MaximumSampleSeparation>1</MaximumSampleSeparation>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="CollectToDB" TypeID="SC!Microsoft.SystemCenter.CollectPerformanceData" />
          <WriteAction ID="CollectToDW" TypeID="MSDL!Microsoft.SystemCenter.DataWarehouse.PublishPerformanceData" />
        </WriteActions>
      </Rule>
      <Rule ID="QND.Hyperv2012R2.HypervisorTotalCPUTime.Rule" Target="Hyperv2012R2!Microsoft.Windows.HyperV.2012.R2.ServerRole" Enabled="true" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>PerformanceCollection</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Perf!System.Performance.OptimizedDataProvider">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <CounterName>% Total Run Time</CounterName>
            <ObjectName>Hyper-V Hypervisor Logical Processor</ObjectName>
            <InstanceName>_Total</InstanceName>
            <AllInstances>false</AllInstances>
            <Frequency>300</Frequency>
            <Tolerance>5</Tolerance>
            <ToleranceType>Absolute</ToleranceType>
            <MaximumSampleSeparation>10</MaximumSampleSeparation>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="CollectToDB" TypeID="SC!Microsoft.SystemCenter.CollectPerformanceData" />
          <WriteAction ID="CollectToDW" TypeID="MSDL!Microsoft.SystemCenter.DataWarehouse.PublishPerformanceData" />
        </WriteActions>
      </Rule>
      <Rule ID="QND.Hyperv2012R2.HypervisorAvgMemPressure.Rule" Target="Hyperv2012R2!Microsoft.Windows.HyperV.2012.R2.ServerRole" Enabled="true" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>PerformanceCollection</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Perf!System.Performance.OptimizedDataProvider">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <CounterName>Average Pressure</CounterName>
            <ObjectName>Hyper-V Dynamic Memory Balancer</ObjectName>
            <InstanceName>System Balancer</InstanceName>
            <AllInstances>false</AllInstances>
            <Frequency>300</Frequency>
            <Tolerance>5</Tolerance>
            <ToleranceType>Absolute</ToleranceType>
            <MaximumSampleSeparation>10</MaximumSampleSeparation>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="CollectToDB" TypeID="SC!Microsoft.SystemCenter.CollectPerformanceData" />
          <WriteAction ID="CollectToDW" TypeID="MSDL!Microsoft.SystemCenter.DataWarehouse.PublishPerformanceData" />
        </WriteActions>
      </Rule>
      <Rule ID="QND.Hyperv2012R2.HypervisorLogicalProcessors.Rule" Target="Hyperv2012R2!Microsoft.Windows.HyperV.2012.R2.ServerRole" Enabled="true" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>PerformanceCollection</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Perf!System.Performance.OptimizedDataProvider">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <CounterName>Logical Processors</CounterName>
            <ObjectName>Hyper-V Hypervisor</ObjectName>
            <InstanceName></InstanceName>
            <AllInstances>false</AllInstances>
            <Frequency>3600</Frequency>
            <Tolerance>0</Tolerance>
            <ToleranceType>Absolute</ToleranceType>
            <MaximumSampleSeparation>1</MaximumSampleSeparation>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="CollectToDB" TypeID="SC!Microsoft.SystemCenter.CollectPerformanceData" />
          <WriteAction ID="CollectToDW" TypeID="MSDL!Microsoft.SystemCenter.DataWarehouse.PublishPerformanceData" />
        </WriteActions>
      </Rule>
      <Rule ID="QND.Hyperv2012R2.HypervisorPartitions.Rule" Target="Hyperv2012R2!Microsoft.Windows.HyperV.2012.R2.ServerRole" Enabled="true" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>PerformanceCollection</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Perf!System.Performance.OptimizedDataProvider">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <CounterName>Partitions</CounterName>
            <ObjectName>Hyper-V Hypervisor</ObjectName>
            <InstanceName></InstanceName>
            <AllInstances>false</AllInstances>
            <Frequency>3600</Frequency>
            <Tolerance>0</Tolerance>
            <ToleranceType>Absolute</ToleranceType>
            <MaximumSampleSeparation>1</MaximumSampleSeparation>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="CollectToDB" TypeID="SC!Microsoft.SystemCenter.CollectPerformanceData" />
          <WriteAction ID="CollectToDW" TypeID="MSDL!Microsoft.SystemCenter.DataWarehouse.PublishPerformanceData" />
        </WriteActions>
      </Rule>
      <Rule ID="QND.Hyperv2012R2.HypervisorRDMActiveConnections.Rule" Target="WSLib!Microsoft.Windows.Server.NetworkAdapter" Enabled="false" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>PerformanceCollection</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Perf!System.Performance.OptimizedDataProvider">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <CounterName>RDMA Active Connections</CounterName>
            <ObjectName>RDMA Activity</ObjectName>
            <InstanceName></InstanceName>
            <AllInstances>true</AllInstances>
            <Frequency>3600</Frequency>
            <Tolerance>0</Tolerance>
            <ToleranceType>Absolute</ToleranceType>
            <MaximumSampleSeparation>1</MaximumSampleSeparation>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="CollectToDB" TypeID="SC!Microsoft.SystemCenter.CollectPerformanceData" />
          <WriteAction ID="CollectToDW" TypeID="MSDL!Microsoft.SystemCenter.DataWarehouse.PublishPerformanceData" />
        </WriteActions>
      </Rule>
      <Rule ID="QND.Hyperv2012R2.HypervisorRDMConnectionErrors.Rule" Target="WSLib!Microsoft.Windows.Server.NetworkAdapter" Enabled="false" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>PerformanceCollection</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Perf!System.Performance.OptimizedDataProvider">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <CounterName>RDMA Connection Errors</CounterName>
            <ObjectName>RDMA Activity</ObjectName>
            <InstanceName></InstanceName>
            <AllInstances>true</AllInstances>
            <Frequency>3600</Frequency>
            <Tolerance>0</Tolerance>
            <ToleranceType>Absolute</ToleranceType>
            <MaximumSampleSeparation>1</MaximumSampleSeparation>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="CollectToDB" TypeID="SC!Microsoft.SystemCenter.CollectPerformanceData" />
          <WriteAction ID="CollectToDW" TypeID="MSDL!Microsoft.SystemCenter.DataWarehouse.PublishPerformanceData" />
        </WriteActions>
      </Rule>
      <Rule ID="QND.Hyperv2012R2.SnapshotAgeCollect.Rule" Target="QND.Hyperv.2012R2.VM" Enabled="false" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>PerformanceCollection</Category>
        <DataSources>
          <DataSource ID="DSScript" TypeID="QND.Hyperv2012R2.GetVMSnapshotAge.Perf.DS">
            <IntervalSeconds>28800</IntervalSeconds>
            <SyncTime></SyncTime>
            <VMId>$Target/Property[Type="QND.Hyperv.2012R2.VM"]/VirtualMachineId$</VMId>
            <ObjectName>Virtual Machine</ObjectName>
            <CounterName>SnapshotAgeHours</CounterName>
            <InstanceProperty>$Target/Property[Type='QND.Hyperv.2012R2.VM']/VirtualMachineName$</InstanceProperty>
            <PropertyBagValue>OldestSnapshotAgeHours</PropertyBagValue>
            <TimeoutSeconds>300</TimeoutSeconds>
            <TraceLevel>2</TraceLevel>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="CollectToDB" TypeID="SC!Microsoft.SystemCenter.CollectPerformanceData" />
          <WriteAction ID="CollectToDW" TypeID="MSDL!Microsoft.SystemCenter.DataWarehouse.PublishPerformanceData" />
        </WriteActions>
      </Rule>
      <Rule ID="QND.Hyperv2012R2.FragmentationCollection.Rule" Target="QND.HyperV.2012R2.VirtualDrive" Enabled="false" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>PerformanceCollection</Category>
        <DataSources>
          <DataSource ID="ScriptDS" TypeID="QND.Hyperv2012R2.GetVHDFragment.Perf.DS">
            <IntervalSeconds>7200</IntervalSeconds>
            <SyncTime></SyncTime>
            <VirtualDiskId>$Target/Property[Type='QND.HyperV.VMHardwareComponent']/DeviceId$</VirtualDiskId>
            <ObjectName>Hyper-V Virtual Storage Device</ObjectName>
            <CounterName>Fragmentation</CounterName>
            <InstanceProperty>$Target/Property[Type='QND.HyperV.VMHardwareComponent']/PerfInstance$</InstanceProperty>
            <PropertyBagValue>FragPerc</PropertyBagValue>
            <TimeoutSeconds>300</TimeoutSeconds>
            <TraceLevel>2</TraceLevel>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="CollectToDB" TypeID="SC!Microsoft.SystemCenter.CollectPerformanceData" />
          <WriteAction ID="CollectToDW" TypeID="MSDL!Microsoft.SystemCenter.DataWarehouse.PublishPerformanceData" />
        </WriteActions>
      </Rule>
      <Rule ID="QND.Hyperv.2012R2.VMUptimePerc.Rule" Target="QND.Hyperv.2012R2.VM" Enabled="false" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>PerformanceCollection</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="QND.Hyperv.2012R2.GetVMUptimePerf.DS">
            <IntervalSeconds>3600</IntervalSeconds>
            <SyncTime />
            <TimeoutSeconds>300</TimeoutSeconds>
            <TraceLevel>2</TraceLevel>
            <ObjectName>Virtual Machine</ObjectName>
            <CounterName>Uptime %</CounterName>
            <InstanceProperty>VMId</InstanceProperty>
            <ValueProperty>PercUptime</ValueProperty>
          </DataSource>
        </DataSources>
        <ConditionDetection ID="FilterVM" TypeID="System!System.ExpressionFilter">
          <Expression>
            <SimpleExpression>
              <ValueExpression>
                <XPathQuery Type="String">/DataItem/InstanceName</XPathQuery>
              </ValueExpression>
              <Operator>Equal</Operator>
              <ValueExpression>
                <Value Type="String">$Target/Property[Type='QND.Hyperv.2012R2.VM']/VirtualMachineId$</Value>
              </ValueExpression>
            </SimpleExpression>
          </Expression>
        </ConditionDetection>
        <WriteActions>
          <WriteAction ID="CollectToDB" TypeID="SC!Microsoft.SystemCenter.CollectPerformanceData" />
          <WriteAction ID="CollectToDW" TypeID="MSDL!Microsoft.SystemCenter.DataWarehouse.PublishPerformanceData" />
        </WriteActions>
      </Rule>
      <Rule ID="QND.Hyperv.2012R2.VMCPUUsage.Rule" Target="QND.Hyperv.2012R2.VM" Enabled="false" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>PerformanceCollection</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="QND.Hyperv2012R2.GetVMMeasuresPerf.Opti.DS">
            <IntervalSeconds>3600</IntervalSeconds>
            <SyncTime></SyncTime>
            <TimeoutSeconds>300</TimeoutSeconds>
            <TraceLevel>2</TraceLevel>
            <ResetDays>30</ResetDays>
            <ObjectName>Virtual Machine</ObjectName>
            <CounterName>Average CPU</CounterName>
            <InstanceProperty>VMId</InstanceProperty>
            <ValueProperty>AvgCPU</ValueProperty>
            <Type>VM</Type>
            <Tolerance>0</Tolerance>
            <ToleranceType>Absolute</ToleranceType>
            <MaximumSampleSeparation>1</MaximumSampleSeparation>
          </DataSource>
        </DataSources>
        <ConditionDetection ID="Filter" TypeID="QND.Hyperv.2012R2.DeltaAbsAndFilter">
          <NumSamples>2</NumSamples>
          <InstanceFilter>$Target/Property[Type='QND.Hyperv.2012R2.VM']/VirtualMachineId$</InstanceFilter>
        </ConditionDetection>
        <WriteActions>
          <WriteAction ID="CollectToDB" TypeID="SC!Microsoft.SystemCenter.CollectPerformanceData" />
          <WriteAction ID="CollectToDW" TypeID="MSDL!Microsoft.SystemCenter.DataWarehouse.PublishPerformanceData" />
        </WriteActions>
      </Rule>
      <Rule ID="QND.Hyperv.2012R2.VMAvgMemoryUsage.Rule" Target="QND.Hyperv.2012R2.VM" Enabled="false" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>PerformanceCollection</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="QND.Hyperv2012R2.GetVMMeasuresPerf.Opti.DS">
            <IntervalSeconds>3600</IntervalSeconds>
            <SyncTime></SyncTime>
            <TimeoutSeconds>300</TimeoutSeconds>
            <TraceLevel>2</TraceLevel>
            <ResetDays>30</ResetDays>
            <ObjectName>Virtual Machine</ObjectName>
            <CounterName>Average Memory</CounterName>
            <InstanceProperty>VMId</InstanceProperty>
            <ValueProperty>AvgMemory</ValueProperty>
            <Type>VM</Type>
            <Tolerance>0</Tolerance>
            <ToleranceType>Absolute</ToleranceType>
            <MaximumSampleSeparation>1</MaximumSampleSeparation>
          </DataSource>
        </DataSources>
        <ConditionDetection ID="Filter" TypeID="QND.Hyperv.2012R2.DeltaAbsAndFilter">
          <NumSamples>2</NumSamples>
          <InstanceFilter>$Target/Property[Type='QND.Hyperv.2012R2.VM']/VirtualMachineId$</InstanceFilter>
        </ConditionDetection>
        <WriteActions>
          <WriteAction ID="CollectToDB" TypeID="SC!Microsoft.SystemCenter.CollectPerformanceData" />
          <WriteAction ID="CollectToDW" TypeID="MSDL!Microsoft.SystemCenter.DataWarehouse.PublishPerformanceData" />
        </WriteActions>
      </Rule>
      <Rule ID="QND.Hyperv.2012R2.VMMaxMemoryUsage.Rule" Target="QND.Hyperv.2012R2.VM" Enabled="false" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>PerformanceCollection</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="QND.Hyperv2012R2.GetVMMeasuresPerf.Opti.DS">
            <IntervalSeconds>3600</IntervalSeconds>
            <SyncTime></SyncTime>
            <TimeoutSeconds>300</TimeoutSeconds>
            <TraceLevel>2</TraceLevel>
            <ResetDays>30</ResetDays>
            <ObjectName>Virtual Machine</ObjectName>
            <CounterName>Max Memory</CounterName>
            <InstanceProperty>VMId</InstanceProperty>
            <ValueProperty>MaxMemory</ValueProperty>
            <Type>VM</Type>
            <Tolerance>0</Tolerance>
            <ToleranceType>Absolute</ToleranceType>
            <MaximumSampleSeparation>1</MaximumSampleSeparation>
          </DataSource>
        </DataSources>
        <ConditionDetection ID="Filter" TypeID="QND.Hyperv.2012R2.DeltaAbsAndFilter">
          <NumSamples>2</NumSamples>
          <InstanceFilter>$Target/Property[Type='QND.Hyperv.2012R2.VM']/VirtualMachineId$</InstanceFilter>
        </ConditionDetection>
        <WriteActions>
          <WriteAction ID="CollectToDB" TypeID="SC!Microsoft.SystemCenter.CollectPerformanceData" />
          <WriteAction ID="CollectToDW" TypeID="MSDL!Microsoft.SystemCenter.DataWarehouse.PublishPerformanceData" />
        </WriteActions>
      </Rule>
      <Rule ID="QND.Hyperv.2012R2.VMIOPS.Rule" Target="QND.Hyperv.2012R2.VM" Enabled="false" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>PerformanceCollection</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="QND.Hyperv2012R2.GetVMMeasuresPerf.Opti.DS">
            <IntervalSeconds>3600</IntervalSeconds>
            <SyncTime></SyncTime>
            <TimeoutSeconds>300</TimeoutSeconds>
            <TraceLevel>2</TraceLevel>
            <ResetDays>30</ResetDays>
            <ObjectName>Virtual Machine</ObjectName>
            <CounterName>Normalized IOPS</CounterName>
            <InstanceProperty>VMId</InstanceProperty>
            <ValueProperty>NormalizedIOPS</ValueProperty>
            <Type>VM</Type>
            <Tolerance>0</Tolerance>
            <ToleranceType>Absolute</ToleranceType>
            <MaximumSampleSeparation>1</MaximumSampleSeparation>
          </DataSource>
        </DataSources>
        <ConditionDetection ID="Filter" TypeID="QND.Hyperv.2012R2.DeltaAbsAndFilter">
          <NumSamples>2</NumSamples>
          <InstanceFilter>$Target/Property[Type='QND.Hyperv.2012R2.VM']/VirtualMachineId$</InstanceFilter>
        </ConditionDetection>
        <WriteActions>
          <WriteAction ID="CollectToDB" TypeID="SC!Microsoft.SystemCenter.CollectPerformanceData" />
          <WriteAction ID="CollectToDW" TypeID="MSDL!Microsoft.SystemCenter.DataWarehouse.PublishPerformanceData" />
        </WriteActions>
      </Rule>
      <Rule ID="QND.Hyperv.2012R2.VMDiskLatency.Rule" Target="QND.Hyperv.2012R2.VM" Enabled="false" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>PerformanceCollection</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="QND.Hyperv2012R2.GetVMMeasuresPerf.Opti.DS">
            <IntervalSeconds>3600</IntervalSeconds>
            <SyncTime></SyncTime>
            <TimeoutSeconds>300</TimeoutSeconds>
            <TraceLevel>2</TraceLevel>
            <ResetDays>30</ResetDays>
            <ObjectName>Virtual Machine</ObjectName>
            <CounterName>Average Disk Latency</CounterName>
            <InstanceProperty>VMId</InstanceProperty>
            <ValueProperty>AvgDiskLatency</ValueProperty>
            <Type>VM</Type>
            <Tolerance>0</Tolerance>
            <ToleranceType>Absolute</ToleranceType>
            <MaximumSampleSeparation>1</MaximumSampleSeparation>
          </DataSource>
        </DataSources>
        <ConditionDetection ID="Filter" TypeID="QND.Hyperv.2012R2.DeltaAbsAndFilter">
          <NumSamples>2</NumSamples>
          <InstanceFilter>$Target/Property[Type='QND.Hyperv.2012R2.VM']/VirtualMachineId$</InstanceFilter>
        </ConditionDetection>
        <WriteActions>
          <WriteAction ID="CollectToDB" TypeID="SC!Microsoft.SystemCenter.CollectPerformanceData" />
          <WriteAction ID="CollectToDW" TypeID="MSDL!Microsoft.SystemCenter.DataWarehouse.PublishPerformanceData" />
        </WriteActions>
      </Rule>
      <Rule ID="QND.Hyperv.2012R2.VMDiskDataReadPerSec.Rule" Target="QND.Hyperv.2012R2.VM" Enabled="false" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>PerformanceCollection</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="QND.Hyperv2012R2.GetVMMeasuresPerf.Opti.DS">
            <IntervalSeconds>3600</IntervalSeconds>
            <SyncTime></SyncTime>
            <TimeoutSeconds>300</TimeoutSeconds>
            <TraceLevel>2</TraceLevel>
            <ResetDays>30</ResetDays>
            <ObjectName>Virtual Machine</ObjectName>
            <CounterName>Disk Read per Sec MB</CounterName>
            <InstanceProperty>VMId</InstanceProperty>
            <ValueProperty>DiskDataRead</ValueProperty>
            <Type>VM</Type>
            <Tolerance>0</Tolerance>
            <ToleranceType>Absolute</ToleranceType>
            <MaximumSampleSeparation>1</MaximumSampleSeparation>
          </DataSource>
        </DataSources>
        <ConditionDetection ID="FilterVM" TypeID="QND.Hyperv.2012R2.DeltaPerSecAndFilter">
          <NumSamples>2</NumSamples>
          <InstanceFilter>$Target/Property[Type='QND.Hyperv.2012R2.VM']/VirtualMachineId$</InstanceFilter>
        </ConditionDetection>
        <WriteActions>
          <WriteAction ID="CollectToDB" TypeID="SC!Microsoft.SystemCenter.CollectPerformanceData" />
          <WriteAction ID="CollectToDW" TypeID="MSDL!Microsoft.SystemCenter.DataWarehouse.PublishPerformanceData" />
        </WriteActions>
      </Rule>
      <Rule ID="QND.Hyperv.2012R2.VMDiskDataWrittenPerSec.Rule" Target="QND.Hyperv.2012R2.VM" Enabled="false" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>PerformanceCollection</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="QND.Hyperv2012R2.GetVMMeasuresPerf.Opti.DS">
            <IntervalSeconds>3600</IntervalSeconds>
            <SyncTime></SyncTime>
            <TimeoutSeconds>300</TimeoutSeconds>
            <TraceLevel>2</TraceLevel>
            <ResetDays>30</ResetDays>
            <ObjectName>Virtual Machine</ObjectName>
            <CounterName>Disk Written per Sec MB</CounterName>
            <InstanceProperty>VMId</InstanceProperty>
            <ValueProperty>DiskDataWritten</ValueProperty>
            <Type>VM</Type>
            <Tolerance>0</Tolerance>
            <ToleranceType>Absolute</ToleranceType>
            <MaximumSampleSeparation>1</MaximumSampleSeparation>
          </DataSource>
        </DataSources>
        <ConditionDetection ID="FilterVM" TypeID="QND.Hyperv.2012R2.DeltaPerSecAndFilter">
          <NumSamples>2</NumSamples>
          <InstanceFilter>$Target/Property[Type='QND.Hyperv.2012R2.VM']/VirtualMachineId$</InstanceFilter>
        </ConditionDetection>
        <WriteActions>
          <WriteAction ID="CollectToDB" TypeID="SC!Microsoft.SystemCenter.CollectPerformanceData" />
          <WriteAction ID="CollectToDW" TypeID="MSDL!Microsoft.SystemCenter.DataWarehouse.PublishPerformanceData" />
        </WriteActions>
      </Rule>
      <Rule ID="QND.Hyperv.2012R2.VHDIOPS.Rule" Target="QND.HyperV.2012R2.VirtualDrive" Enabled="false" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>PerformanceCollection</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="QND.Hyperv2012R2.GetVMMeasuresPerf.Opti.DS">
            <IntervalSeconds>3600</IntervalSeconds>
            <SyncTime></SyncTime>
            <TimeoutSeconds>300</TimeoutSeconds>
            <TraceLevel>2</TraceLevel>
            <ResetDays>30</ResetDays>
            <ObjectName>Virtual Disk</ObjectName>
            <CounterName>Normalized IOPS</CounterName>
            <InstanceProperty>DiskId</InstanceProperty>
            <ValueProperty>NormalizedIOPS</ValueProperty>
            <Type>Disk</Type>
            <Tolerance>0</Tolerance>
            <ToleranceType>Absolute</ToleranceType>
            <MaximumSampleSeparation>1</MaximumSampleSeparation>
          </DataSource>
        </DataSources>
        <ConditionDetection ID="Filter" TypeID="QND.Hyperv.2012R2.DeltaAbsAndFilter">
          <NumSamples>2</NumSamples>
          <InstanceFilter>$Target/Property[Type='QND.HyperV.VMHardwareComponent']/DeviceId$</InstanceFilter>
        </ConditionDetection>
        <WriteActions>
          <WriteAction ID="CollectToDB" TypeID="SC!Microsoft.SystemCenter.CollectPerformanceData" />
          <WriteAction ID="CollectToDW" TypeID="MSDL!Microsoft.SystemCenter.DataWarehouse.PublishPerformanceData" />
        </WriteActions>
      </Rule>
      <Rule ID="QND.Hyperv.2012R2.VHDAvgLatency.Rule" Target="QND.HyperV.2012R2.VirtualDrive" Enabled="false" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>PerformanceCollection</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="QND.Hyperv2012R2.GetVMMeasuresPerf.Opti.DS">
            <IntervalSeconds>3600</IntervalSeconds>
            <SyncTime></SyncTime>
            <TimeoutSeconds>300</TimeoutSeconds>
            <TraceLevel>2</TraceLevel>
            <ResetDays>30</ResetDays>
            <ObjectName>Virtual Disk</ObjectName>
            <CounterName>Average Disk Latency</CounterName>
            <InstanceProperty>DiskId</InstanceProperty>
            <ValueProperty>AvgDiskLatency</ValueProperty>
            <Type>Disk</Type>
            <Tolerance>0</Tolerance>
            <ToleranceType>Absolute</ToleranceType>
            <MaximumSampleSeparation>1</MaximumSampleSeparation>
          </DataSource>
        </DataSources>
        <ConditionDetection ID="Filter" TypeID="QND.Hyperv.2012R2.DeltaAbsAndFilter">
          <NumSamples>2</NumSamples>
          <InstanceFilter>$Target/Property[Type='QND.HyperV.VMHardwareComponent']/DeviceId$</InstanceFilter>
        </ConditionDetection>
        <WriteActions>
          <WriteAction ID="CollectToDB" TypeID="SC!Microsoft.SystemCenter.CollectPerformanceData" />
          <WriteAction ID="CollectToDW" TypeID="MSDL!Microsoft.SystemCenter.DataWarehouse.PublishPerformanceData" />
        </WriteActions>
      </Rule>
      <Rule ID="QND.Hyperv2012R2.VHDWriteBytesSec.Rule" Target="QND.HyperV.2012R2.VirtualDrive" Enabled="false" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>PerformanceCollection</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Perf!System.Performance.OptimizedDataProvider">
            <ComputerName>$Target/Host/Property[Type='QND.Hyperv.2012R2.VM']/HostName$</ComputerName>
            <CounterName>Write Bytes/sec</CounterName>
            <ObjectName>Hyper-V Virtual Storage Device</ObjectName>
            <InstanceName>$Target/Property[Type='QND.HyperV.VMHardwareComponent']/PerfInstance$</InstanceName>
            <Frequency>300</Frequency>
            <Tolerance>5</Tolerance>
            <ToleranceType>Percentage</ToleranceType>
            <MaximumSampleSeparation>10</MaximumSampleSeparation>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="CollectToDB" TypeID="SC!Microsoft.SystemCenter.CollectPerformanceData" />
          <WriteAction ID="CollectToDW" TypeID="MSDL!Microsoft.SystemCenter.DataWarehouse.PublishPerformanceData" />
        </WriteActions>
      </Rule>
      <Rule ID="QND.Hyperv2012R2.VMMemoryPressure.Rule" Target="QND.Hyperv.2012R2.VM" Enabled="false" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>PerformanceCollection</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Perf!System.Performance.OptimizedDataProvider">
            <ComputerName>$Target/Property[Type='QND.Hyperv.2012R2.VM']/HostName$</ComputerName>
            <CounterName>Average Pressure</CounterName>
            <ObjectName>Hyper-V Dynamic Memory VM</ObjectName>
            <InstanceName>$Target/Property[Type='QND.Hyperv.2012R2.VM']/VirtualMachineName$</InstanceName>
            <Frequency>300</Frequency>
            <Tolerance>5</Tolerance>
            <ToleranceType>Percentage</ToleranceType>
            <MaximumSampleSeparation>10</MaximumSampleSeparation>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="CollectToDB" TypeID="SC!Microsoft.SystemCenter.CollectPerformanceData" />
          <WriteAction ID="CollectToDW" TypeID="MSDL!Microsoft.SystemCenter.DataWarehouse.PublishPerformanceData" />
        </WriteActions>
      </Rule>
      <Rule ID="QND.Hyperv2012R2.vNicBytesRcvPerSec.Rule" Target="QND.HyperV.2012R2.VirtualNetworkAdapter" Enabled="false" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>PerformanceCollection</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Perf!System.Performance.OptimizedDataProvider">
            <ComputerName>$Target/Host/Property[Type='QND.Hyperv.2012R2.VM']/HostName$</ComputerName>
            <CounterName>Bytes Received/sec</CounterName>
            <ObjectName>Hyper-V Virtual Network Adapter</ObjectName>
            <InstanceName>$Target/Property[Type='QND.HyperV.VMHardwareComponent']/PerfInstance$</InstanceName>
            <Frequency>300</Frequency>
            <Tolerance>5</Tolerance>
            <ToleranceType>Percentage</ToleranceType>
            <MaximumSampleSeparation>10</MaximumSampleSeparation>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="CollectToDB" TypeID="SC!Microsoft.SystemCenter.CollectPerformanceData" />
          <WriteAction ID="CollectToDW" TypeID="MSDL!Microsoft.SystemCenter.DataWarehouse.PublishPerformanceData" />
        </WriteActions>
      </Rule>
      <Rule ID="QND.Hyperv2012R2.VHDNormIOPS.Rule" Target="QND.HyperV.2012R2.VirtualDrive" Enabled="false" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>PerformanceCollection</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Perf!System.Performance.OptimizedDataProvider">
            <ComputerName>$Target/Host/Property[Type='QND.Hyperv.2012R2.VM']/HostName$</ComputerName>
            <CounterName>Normalized Throughput</CounterName>
            <ObjectName>Hyper-V Virtual Storage Device</ObjectName>
            <InstanceName>$Target/Property[Type='QND.HyperV.VMHardwareComponent']/PerfInstance$</InstanceName>
            <Frequency>300</Frequency>
            <Tolerance>5</Tolerance>
            <ToleranceType>Percentage</ToleranceType>
            <MaximumSampleSeparation>10</MaximumSampleSeparation>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="CollectToDB" TypeID="SC!Microsoft.SystemCenter.CollectPerformanceData" />
          <WriteAction ID="CollectToDW" TypeID="MSDL!Microsoft.SystemCenter.DataWarehouse.PublishPerformanceData" />
        </WriteActions>
      </Rule>
      <Rule ID="QND.Hyperv2012R2.VHDReadBytesSec.Rule" Target="QND.HyperV.2012R2.VirtualDrive" Enabled="false" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>PerformanceCollection</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Perf!System.Performance.OptimizedDataProvider">
            <ComputerName>$Target/Host/Property[Type='QND.Hyperv.2012R2.VM']/HostName$</ComputerName>
            <CounterName>Read Bytes/sec</CounterName>
            <ObjectName>Hyper-V Virtual Storage Device</ObjectName>
            <InstanceName>$Target/Property[Type='QND.HyperV.VMHardwareComponent']/PerfInstance$</InstanceName>
            <Frequency>300</Frequency>
            <Tolerance>5</Tolerance>
            <ToleranceType>Percentage</ToleranceType>
            <MaximumSampleSeparation>10</MaximumSampleSeparation>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="CollectToDB" TypeID="SC!Microsoft.SystemCenter.CollectPerformanceData" />
          <WriteAction ID="CollectToDW" TypeID="MSDL!Microsoft.SystemCenter.DataWarehouse.PublishPerformanceData" />
        </WriteActions>
      </Rule>
      <Rule ID="QND.Hyperv2012R2.vCoreTotalRunTime.Rule" Target="QND.Hyperv.2012R2.VM" Enabled="false" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>PerformanceCollection</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Perf!System.Performance.OptimizedDataProvider">
            <ComputerName>$Target/Property[Type='QND.Hyperv.2012R2.VM']/HostName$</ComputerName>
            <CounterName>% Total Run Time</CounterName>
            <ObjectName>Hyper-V Hypervisor Virtual Processor</ObjectName>
            <InstanceName />
            <AllInstances>true</AllInstances>
            <Frequency>120</Frequency>
            <Tolerance>0</Tolerance>
            <ToleranceType>Absolute</ToleranceType>
            <MaximumSampleSeparation>1</MaximumSampleSeparation>
          </DataSource>
        </DataSources>
        <ConditionDetection ID="CD" TypeID="QND.Hyperv.2012R2.PerfAvgAndFilter">
          <NumSamples>5</NumSamples>
          <InstanceFilter>$Target/Property[Type='QND.Hyperv.2012R2.VM']/VirtualMachineName$:Hv VP [0-9]+</InstanceFilter>
        </ConditionDetection>
        <WriteActions>
          <WriteAction ID="CollectToDB" TypeID="SC!Microsoft.SystemCenter.CollectPerformanceData" />
          <WriteAction ID="CollectToDW" TypeID="MSDL!Microsoft.SystemCenter.DataWarehouse.PublishPerformanceData" />
        </WriteActions>
      </Rule>
      <Rule ID="QND.Hyperv2012R2.VMMemory.Rule" Target="QND.Hyperv.2012R2.VM" Enabled="false" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>PerformanceCollection</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Perf!System.Performance.OptimizedDataProvider">
            <ComputerName>$Target/Property[Type='QND.Hyperv.2012R2.VM']/HostName$</ComputerName>
            <CounterName>Physical Memory</CounterName>
            <ObjectName>Hyper-V Dynamic Memory VM</ObjectName>
            <InstanceName>$Target/Property[Type='QND.Hyperv.2012R2.VM']/VirtualMachineName$</InstanceName>
            <Frequency>1800</Frequency>
            <Tolerance>5</Tolerance>
            <ToleranceType>Percentage</ToleranceType>
            <MaximumSampleSeparation>4</MaximumSampleSeparation>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="CollectToDB" TypeID="SC!Microsoft.SystemCenter.CollectPerformanceData" />
          <WriteAction ID="CollectToDW" TypeID="MSDL!Microsoft.SystemCenter.DataWarehouse.PublishPerformanceData" />
        </WriteActions>
      </Rule>
      <Rule ID="QND.Hyperv2012R2.vNicBytesSntPerSec.Rule" Target="QND.HyperV.2012R2.VirtualNetworkAdapter" Enabled="false" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>PerformanceCollection</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Perf!System.Performance.OptimizedDataProvider">
            <ComputerName>$Target/Host/Property[Type='QND.Hyperv.2012R2.VM']/HostName$</ComputerName>
            <CounterName>Bytes Sent/sec</CounterName>
            <ObjectName>Hyper-V Virtual Network Adapter</ObjectName>
            <InstanceName>$Target/Property[Type='QND.HyperV.VMHardwareComponent']/PerfInstance$</InstanceName>
            <Frequency>300</Frequency>
            <Tolerance>5</Tolerance>
            <ToleranceType>Percentage</ToleranceType>
            <MaximumSampleSeparation>10</MaximumSampleSeparation>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="CollectToDB" TypeID="SC!Microsoft.SystemCenter.CollectPerformanceData" />
          <WriteAction ID="CollectToDW" TypeID="MSDL!Microsoft.SystemCenter.DataWarehouse.PublishPerformanceData" />
        </WriteActions>
      </Rule>
      <Rule ID="QND.Hyperv2012R2.VM.TotalSize.Perf.Collection.Rule" Target="QND.Hyperv.2012R2.VM" Enabled="false" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>PerformanceCollection</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="QND.Hyperv2012R2.GetVMSize.Perf.DS">
            <IntervalSeconds>1800</IntervalSeconds>
            <SyncTime />
            <VMId>$Target/Property[Type="QND.Hyperv.2012R2.VM"]/VirtualMachineId$</VMId>
            <CounterName>VM Size GB</CounterName>
            <PropertyBagValue>CurrentSizeGB</PropertyBagValue>
            <TimeoutSeconds>300</TimeoutSeconds>
            <TraceLevel>2</TraceLevel>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="CollectToDB" TypeID="SC!Microsoft.SystemCenter.CollectPerformanceData" />
          <WriteAction ID="CollectToDW" TypeID="MSDL!Microsoft.SystemCenter.DataWarehouse.PublishPerformanceData" />
        </WriteActions>
      </Rule>
      <Rule ID="QND.Hyperv2012R2.VM.MaxSize.Perf.Collection.Rule" Target="QND.Hyperv.2012R2.VM" Enabled="false" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>PerformanceCollection</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="QND.Hyperv2012R2.GetVMSize.Perf.DS">
            <IntervalSeconds>300</IntervalSeconds>
            <SyncTime />
            <VMId>$Target/Property[Type="QND.Hyperv.2012R2.VM"]/VirtualMachineId$</VMId>
            <CounterName>VM Maximum Size GB</CounterName>
            <PropertyBagValue>MaxSizeGB</PropertyBagValue>
            <TimeoutSeconds>1800</TimeoutSeconds>
            <TraceLevel>2</TraceLevel>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="CollectToDB" TypeID="SC!Microsoft.SystemCenter.CollectPerformanceData" />
          <WriteAction ID="CollectToDW" TypeID="MSDL!Microsoft.SystemCenter.DataWarehouse.PublishPerformanceData" />
        </WriteActions>
      </Rule>
      <Rule ID="QND.Hyperv2012R2.VM.MinSize.Perf.Collection.Rule" Target="QND.Hyperv.2012R2.VM" Enabled="false" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>PerformanceCollection</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="QND.Hyperv2012R2.GetVMSize.Perf.DS">
            <IntervalSeconds>300</IntervalSeconds>
            <SyncTime />
            <VMId>$Target/Property[Type="QND.Hyperv.2012R2.VM"]/VirtualMachineId$</VMId>
            <CounterName>VM Minimum Size GB</CounterName>
            <PropertyBagValue>MinSizeGB</PropertyBagValue>
            <TimeoutSeconds>1800</TimeoutSeconds>
            <TraceLevel>2</TraceLevel>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="CollectToDB" TypeID="SC!Microsoft.SystemCenter.CollectPerformanceData" />
          <WriteAction ID="CollectToDW" TypeID="MSDL!Microsoft.SystemCenter.DataWarehouse.PublishPerformanceData" />
        </WriteActions>
      </Rule>
    </Rules>
    <Tasks>
      <Task ID="QND.Hyperv2012R2.GetVMDetails.Task" Accessibility="Internal" Target="QND.Hyperv.2012R2.VM" Enabled="true" Timeout="300" Remotable="true">
        <Category>Maintenance</Category>
        <ProbeAction ID="PA" TypeID="QND.Hyperv.2012R2.VMDetailsTask.PT">
          <TimeoutSeconds>60</TimeoutSeconds>
          <TraceLevel>2</TraceLevel>
          <VMId>$Target/Property[Type='QND.Hyperv.2012R2.VM']/VirtualMachineId$</VMId>
        </ProbeAction>
      </Task>
      <Task ID="QND.Hyperv2012R2.GetVMReplicaStatus.Task" Accessibility="Internal" Target="QND.Hyperv.2012R2.ReplicaVM" Enabled="true" Timeout="300" Remotable="true">
        <Category>Maintenance</Category>
        <ProbeAction ID="PA" TypeID="QND.Hyperv2012R2.VMReplicaStatusTask.PT">
          <TimeoutSeconds>60</TimeoutSeconds>
          <TraceLevel>2</TraceLevel>
          <VMId>$Target/Property[Type='QND.Hyperv.2012R2.VM']/VirtualMachineId$</VMId>
        </ProbeAction>
      </Task>
      <Task ID="QND.Hyperv2012R2.ResumeVMReplica.Task" Accessibility="Internal" Target="QND.Hyperv.2012R2.ReplicaVM" Enabled="true" Timeout="300" Remotable="true">
        <Category>Maintenance</Category>
        <WriteAction ID="WA" TypeID="QND.Hyperv2012R2.ResumeReplica.WAT">
          <TimeoutSeconds>300</TimeoutSeconds>
          <TraceLevel>2</TraceLevel>
          <VMId>$Target/Property[Type='QND.Hyperv.2012R2.VM']/VirtualMachineId$</VMId>
        </WriteAction>
      </Task>
      <Task ID="QND.Hyperv2012R2.SaveVM.Task" Accessibility="Internal" Target="QND.Hyperv.2012R2.VM" Enabled="true" Timeout="300" Remotable="true">
        <Category>Maintenance</Category>
        <WriteAction ID="WA" TypeID="QND.Hyperv.2012R2.VMActions.WAT">
          <TimeoutSeconds>300</TimeoutSeconds>
          <TraceLevel>2</TraceLevel>
          <VMId>$Target/Property[Type='QND.Hyperv.2012R2.VM']/VirtualMachineId$</VMId>
          <Action>save</Action>
          <Param1>ignore</Param1>
        </WriteAction>
      </Task>
      <Task ID="QND.Hyperv2012R2.PauseVM.Task" Accessibility="Internal" Target="QND.Hyperv.2012R2.VM" Enabled="true" Timeout="300" Remotable="true">
        <Category>Maintenance</Category>
        <WriteAction ID="WA" TypeID="QND.Hyperv.2012R2.VMActions.WAT">
          <TimeoutSeconds>300</TimeoutSeconds>
          <TraceLevel>2</TraceLevel>
          <VMId>$Target/Property[Type='QND.Hyperv.2012R2.VM']/VirtualMachineId$</VMId>
          <Action>pause</Action>
          <Param1>ignore</Param1>
        </WriteAction>
      </Task>
      <Task ID="QND.Hyperv2012R2.ResumeVM.Task" Accessibility="Internal" Target="QND.Hyperv.2012R2.VM" Enabled="true" Timeout="300" Remotable="true">
        <Category>Maintenance</Category>
        <WriteAction ID="WA" TypeID="QND.Hyperv.2012R2.VMActions.WAT">
          <TimeoutSeconds>300</TimeoutSeconds>
          <TraceLevel>2</TraceLevel>
          <VMId>$Target/Property[Type='QND.Hyperv.2012R2.VM']/VirtualMachineId$</VMId>
          <Action>resume</Action>
          <Param1>ignore</Param1>
        </WriteAction>
      </Task>
      <Task ID="QND.Hyperv2012R2.ListVMCheckpoints.Task" Accessibility="Internal" Target="QND.Hyperv.2012R2.VM" Enabled="true" Timeout="300" Remotable="true">
        <Category>Maintenance</Category>
        <WriteAction ID="WA" TypeID="QND.Hyperv.2012R2.VMActions.WAT">
          <TimeoutSeconds>300</TimeoutSeconds>
          <TraceLevel>2</TraceLevel>
          <VMId>$Target/Property[Type='QND.Hyperv.2012R2.VM']/VirtualMachineId$</VMId>
          <Action>resume</Action>
          <Param1>ignore</Param1>
        </WriteAction>
      </Task>
      <Task ID="QND.Hyperv2012R2.PoweroffVM.Task" Accessibility="Internal" Target="QND.Hyperv.2012R2.VM" Enabled="true" Timeout="300" Remotable="true">
        <Category>Maintenance</Category>
        <WriteAction ID="WA" TypeID="QND.Hyperv.2012R2.VMActions.WAT">
          <TimeoutSeconds>300</TimeoutSeconds>
          <TraceLevel>2</TraceLevel>
          <VMId>$Target/Property[Type='QND.Hyperv.2012R2.VM']/VirtualMachineId$</VMId>
          <Action>turnoff</Action>
          <Param1>ignore</Param1>
        </WriteAction>
      </Task>
      <Task ID="QND.Hyperv2012R2.CheckpointVM.Task" Accessibility="Internal" Target="QND.Hyperv.2012R2.VM" Enabled="true" Timeout="300" Remotable="true">
        <Category>Maintenance</Category>
        <WriteAction ID="WA" TypeID="QND.Hyperv.2012R2.VMCheckpoint.WAT">
          <TimeoutSeconds>300</TimeoutSeconds>
          <TraceLevel>2</TraceLevel>
          <VMId>$Target/Property[Type='QND.Hyperv.2012R2.VM']/VirtualMachineId$</VMId>
          <Action>checkpoint</Action>
          <Param1>Checpoint Name</Param1>
        </WriteAction>
      </Task>
      <Task ID="QND.Hyperv2012R2.RestartVM.Task" Accessibility="Internal" Target="QND.Hyperv.2012R2.VM" Enabled="true" Timeout="300" Remotable="true">
        <Category>Maintenance</Category>
        <WriteAction ID="WA" TypeID="QND.Hyperv.2012R2.VMActions.WAT">
          <TimeoutSeconds>300</TimeoutSeconds>
          <TraceLevel>2</TraceLevel>
          <VMId>$Target/Property[Type='QND.Hyperv.2012R2.VM']/VirtualMachineId$</VMId>
          <Action>restart</Action>
          <Param1>ignore</Param1>
        </WriteAction>
      </Task>
      <Task ID="QND.Hyperv2012R2.StopVM.Task" Accessibility="Internal" Target="QND.Hyperv.2012R2.VM" Enabled="true" Timeout="300" Remotable="true">
        <Category>Maintenance</Category>
        <WriteAction ID="WA" TypeID="QND.Hyperv.2012R2.VMStop.WAT">
          <TimeoutSeconds>300</TimeoutSeconds>
          <TraceLevel>2</TraceLevel>
          <VMId>$Target/Property[Type='QND.Hyperv.2012R2.VM']/VirtualMachineId$</VMId>
          <Action>stop</Action>
          <Param1>ignore</Param1>
        </WriteAction>
      </Task>
      <Task ID="QND.Hyperv2012R2.VMCheckpointRemove.Task" Accessibility="Internal" Target="QND.Hyperv.2012R2.VM" Enabled="true" Timeout="300" Remotable="true">
        <Category>Maintenance</Category>
        <WriteAction ID="WA" TypeID="QND.Hyperv.2012R2.VMCheckpoint.WAT">
          <TimeoutSeconds>300</TimeoutSeconds>
          <TraceLevel>2</TraceLevel>
          <VMId>$Target/Property[Type='QND.Hyperv.2012R2.VM']/VirtualMachineId$</VMId>
          <Action>removecheckpoint</Action>
          <Param1>Checkpoint Name</Param1>
        </WriteAction>
      </Task>
      <Task ID="QND.Hyperv2012R2.VMMigrate.Task" Accessibility="Internal" Target="QND.Hyperv.2012R2.VM" Enabled="true" Timeout="300" Remotable="true">
        <Category>Maintenance</Category>
        <WriteAction ID="WA" TypeID="QND.Hyperv.2012R2.VMMigrate.WAT">
          <TimeoutSeconds>300</TimeoutSeconds>
          <TraceLevel>2</TraceLevel>
          <VMId>$Target/Property[Type='QND.Hyperv.2012R2.VM']/VirtualMachineId$</VMId>
          <Action>migrate</Action>
          <Param1>best</Param1>
        </WriteAction>
      </Task>
      <Task ID="QND.Hyperv2012R2.VMCheckpointRestore.Task" Accessibility="Internal" Target="QND.Hyperv.2012R2.VM" Enabled="true" Timeout="300" Remotable="true">
        <Category>Maintenance</Category>
        <WriteAction ID="WA" TypeID="QND.Hyperv.2012R2.VMCheckpoint.WAT">
          <TimeoutSeconds>300</TimeoutSeconds>
          <TraceLevel>2</TraceLevel>
          <VMId>$Target/Property[Type='QND.Hyperv.2012R2.VM']/VirtualMachineId$</VMId>
          <Action>restorecheckpoint</Action>
          <Param1>Checkpoint Name</Param1>
        </WriteAction>
      </Task>
      <Task ID="QND.Hyperv2012R2.StartVM.Task" Accessibility="Internal" Target="QND.Hyperv.2012R2.VM" Enabled="true" Timeout="300" Remotable="true">
        <Category>Maintenance</Category>
        <WriteAction ID="WA" TypeID="QND.Hyperv.2012R2.VMActions.WAT">
          <TimeoutSeconds>300</TimeoutSeconds>
          <TraceLevel>2</TraceLevel>
          <VMId>$Target/Property[Type='QND.Hyperv.2012R2.VM']/VirtualMachineId$</VMId>
          <Action>start</Action>
          <Param1>ignore</Param1>
        </WriteAction>
      </Task>
    </Tasks>
    <Monitors>
      <UnitMonitor ID="QND.Hyperv2012R2.VM.Current.Cluster.Node.Monitor" Accessibility="Public" Enabled="true" Target="QND.Hyperv2012R2.HyperV.Cluster.ComputerRole" ParentMonitorID="Health!System.Health.ConfigurationState" Remotable="true" Priority="Normal" TypeID="QND.Hyperv2012R2.VM.Cluster.Resource.Owning.Node.MT" ConfirmDelivery="true">
        <Category>ConfigurationHealth</Category>
        <AlertSettings AlertMessage="QND.Hyperv2012R2.VM.Current.Cluster.Node.Monitor.AlertMessage">
          <AlertOnState>Error</AlertOnState>
          <AutoResolve>true</AutoResolve>
          <AlertPriority>Normal</AlertPriority>
          <AlertSeverity>Error</AlertSeverity>
          <AlertParameters>
            <AlertParameter1>$Data/Context/Property[@Name='VMsOnWrongHost']$</AlertParameter1>
          </AlertParameters>
        </AlertSettings>
        <OperationalStates>
          <OperationalState ID="ERROR" MonitorTypeStateID="ERROR" HealthState="Error" />
          <OperationalState ID="OK" MonitorTypeStateID="OK" HealthState="Success" />
        </OperationalStates>
        <Configuration>
          <IntervalSeconds>86400</IntervalSeconds>
          <SyncTime>1:00</SyncTime>
          <TimeoutSeconds>600</TimeoutSeconds>
        </Configuration>
      </UnitMonitor>
      <UnitMonitor ID="QND.Hyperv.2012R2.VMMemoryStatus" Accessibility="Public" Enabled="false" Target="QND.Hyperv.2012R2.VM" ParentMonitorID="Health!System.Health.PerformanceState" Remotable="true" Priority="Normal" TypeID="QND.Hyperv.2012R2.VMMemoryStatus.MT" ConfirmDelivery="false">
        <Category>PerformanceHealth</Category>
        <AlertSettings AlertMessage="QND.Hyperv.2012R2.VMMemoryStatus.AlertMessage">
          <AlertOnState>Warning</AlertOnState>
          <AutoResolve>true</AutoResolve>
          <AlertPriority>Normal</AlertPriority>
          <AlertSeverity>MatchMonitorHealth</AlertSeverity>
          <AlertParameters>
            <AlertParameter1>$Target/Property[Type="QND.Hyperv.2012R2.VM"]/VirtualMachineName$</AlertParameter1>
            <AlertParameter2>$Data/Context/Property[@Name="MemStatus"]$</AlertParameter2>
            <AlertParameter3>$Data/Context/Property[@Name="Pressure"]$</AlertParameter3>
          </AlertParameters>
        </AlertSettings>
        <OperationalStates>
          <OperationalState ID="Healthy" MonitorTypeStateID="OK" HealthState="Success" />
          <OperationalState ID="UnderPressure" MonitorTypeStateID="UnderPressure" HealthState="Warning" />
        </OperationalStates>
        <Configuration>
          <IntervalSeconds>3611</IntervalSeconds>
          <SyncTime></SyncTime>
          <TimeoutSeconds>120</TimeoutSeconds>
          <TraceLevel>2</TraceLevel>
          <VMId>$Target/Property[Type='QND.Hyperv.2012R2.VM']/VirtualMachineId$</VMId>
          <PressureThreshold>110</PressureThreshold>
        </Configuration>
      </UnitMonitor>
      <UnitMonitor ID="QND.Hyperv2012R2.VMName.Matches.ComputerName.Monitor" Accessibility="Public" Enabled="false" ConfirmDelivery="false" ParentMonitorID="Health!System.Health.ConfigurationState" Priority="Normal" Remotable="true" Target="QND.Hyperv.2012R2.VM" TypeID="QND.Hyperv2012R2.VMName.ComputerName.Match.MT">
        <Category>ConfigurationHealth</Category>
        <AlertSettings AlertMessage="QND.Hyperv2012R2.VMName.Matches.ComputerName.Monitor.AlertMessage">
          <AlertOnState>Warning</AlertOnState>
          <AutoResolve>true</AutoResolve>
          <AlertPriority>Normal</AlertPriority>
          <AlertSeverity>Warning</AlertSeverity>
          <AlertParameters>
            <AlertParameter1>$Target/Property[Type="QND.Hyperv.2012R2.VM"]/VMComputerName$</AlertParameter1>
            <AlertParameter2>$Target/Property[Type="QND.Hyperv.2012R2.VM"]/VirtualMachineName$</AlertParameter2>
            <AlertParameter3>$Data/Context/Property[@Name='NetBIOSName']$</AlertParameter3>
          </AlertParameters>
        </AlertSettings>
        <OperationalStates>
          <OperationalState ID="NamesMatch" MonitorTypeStateID="NamesMatch" HealthState="Success" />
          <OperationalState ID="NamesDoNotMatch" MonitorTypeStateID="NamesDoNotMatch" HealthState="Warning" />
        </OperationalStates>
        <Configuration>
          <IntervalSeconds>86400</IntervalSeconds>
          <SyncTime />
          <ComputerFQDN>$Target/Property[Type="QND.Hyperv.2012R2.VM"]/VMComputerName$</ComputerFQDN>
          <VMName>$Target/Property[Type="QND.Hyperv.2012R2.VM"]/VirtualMachineName$</VMName>
          <TimeoutSeconds>300</TimeoutSeconds>
        </Configuration>
      </UnitMonitor>
      <UnitMonitor ID="QND.Hyperv2012R2.VMReplica.Status" Accessibility="Public" Enabled="false" Target="QND.Hyperv.2012R2.ReplicaVM" ParentMonitorID="Health!System.Health.AvailabilityState" Remotable="true" Priority="Normal" TypeID="QND.Hyperv2012R2.VMReplica.MT" ConfirmDelivery="false">
        <Category>AvailabilityHealth</Category>
        <AlertSettings AlertMessage="QND.Hyperv2012R2.VMReplica.Status.AlertMessage">
          <AlertOnState>Warning</AlertOnState>
          <AutoResolve>true</AutoResolve>
          <AlertPriority>Normal</AlertPriority>
          <AlertSeverity>MatchMonitorHealth</AlertSeverity>
          <AlertParameters>
            <AlertParameter1>$Data/Context/Property[@Name='ReplicationHealth']$</AlertParameter1>
            <AlertParameter2>$Data/Context/Property[@Name='ReplicationState']$</AlertParameter2>
            <AlertParameter3>$Data/Context/Property[@Name='ReplicaAgeHours']$</AlertParameter3>
          </AlertParameters>
        </AlertSettings>
        <OperationalStates>
          <OperationalState ID="Healthy" MonitorTypeStateID="Healthy" HealthState="Success" />
          <OperationalState ID="Warning" MonitorTypeStateID="Warning" HealthState="Warning" />
          <OperationalState ID="Error" MonitorTypeStateID="Error" HealthState="Error" />
        </OperationalStates>
        <Configuration>
          <IntervalSeconds>1800</IntervalSeconds>
          <SyncTime></SyncTime>
          <TimeoutSeconds>120</TimeoutSeconds>
          <TraceLevel>2</TraceLevel>
          <VMId>$Target/Property[Type='QND.Hyperv.2012R2.VM']/VirtualMachineId$</VMId>
          <ReplicaAgeHoursWarningThreshold>1</ReplicaAgeHoursWarningThreshold>
          <ReplicaAgeHoursErrorThreshold>4</ReplicaAgeHoursErrorThreshold>
          <StateHealthyCodes>^(0|1|3|4|5|6|14)$</StateHealthyCodes>
          <StateWarningCodes>^(2|7|9|10|11|13)$</StateWarningCodes>
          <StateErrorCodes>^(8)$</StateErrorCodes>
          <HealthyCodes>^(0|1)$</HealthyCodes>
          <WarningCodes>^(2)$</WarningCodes>
          <ErrorCodes>^(3)$</ErrorCodes>
        </Configuration>
      </UnitMonitor>
      <UnitMonitor ID="QND.Hyperv2012R2.VMSnapshotAge.Status" Accessibility="Public" Enabled="false" Target="QND.Hyperv.2012R2.VM" ParentMonitorID="Health!System.Health.ConfigurationState" Remotable="true" Priority="Normal" TypeID="QND.Hyperv2012R2.VMSnapshot.MT" ConfirmDelivery="false">
        <Category>AvailabilityHealth</Category>
        <AlertSettings AlertMessage="QND.Hyperv2012R2.VMSnapshotAge.AlertMessage">
          <AlertOnState>Warning</AlertOnState>
          <AutoResolve>true</AutoResolve>
          <AlertPriority>Normal</AlertPriority>
          <AlertSeverity>MatchMonitorHealth</AlertSeverity>
          <AlertParameters>
            <AlertParameter1>$Data/Context/Property[@Name='OldestSnapshotAgeHours']$</AlertParameter1>
            <AlertParameter2>$Data/Context/Property[@Name='SnapshotHistory']$</AlertParameter2>
          </AlertParameters>
        </AlertSettings>
        <OperationalStates>
          <OperationalState ID="Healthy" MonitorTypeStateID="Healthy" HealthState="Success" />
          <OperationalState ID="Warning" MonitorTypeStateID="Warning" HealthState="Warning" />
          <OperationalState ID="Error" MonitorTypeStateID="Error" HealthState="Error" />
        </OperationalStates>
        <Configuration>
          <IntervalSeconds>7200</IntervalSeconds>
          <SyncTime></SyncTime>
          <TimeoutSeconds>120</TimeoutSeconds>
          <TraceLevel>2</TraceLevel>
          <VMId>$Target/Property[Type='QND.Hyperv.2012R2.VM']/VirtualMachineId$</VMId>
          <SnapshotAgeHoursWarningThreshold>48</SnapshotAgeHoursWarningThreshold>
          <SnapshotAgeHoursErrorThreshold>1800</SnapshotAgeHoursErrorThreshold>
        </Configuration>
      </UnitMonitor>
      <UnitMonitor ID="QND.Hyperv2012R2.VMISStatus" Accessibility="Public" Enabled="false" Target="QND.Hyperv.2012R2.VM" ParentMonitorID="Health!System.Health.AvailabilityState" Remotable="true" Priority="Normal" TypeID="QND.Hyperv2012R2.VMISStatus.MT" ConfirmDelivery="false">
        <Category>AvailabilityHealth</Category>
        <AlertSettings AlertMessage="QND.Hyperv2012R2.VMISStatus.AlertMessage">
          <AlertOnState>Warning</AlertOnState>
          <AutoResolve>true</AutoResolve>
          <AlertPriority>Normal</AlertPriority>
          <AlertSeverity>MatchMonitorHealth</AlertSeverity>
          <AlertParameters>
            <AlertParameter1>$Data/Context/Property[@Name='ISVersion']$</AlertParameter1>
            <AlertParameter2>$Data/Context/Property[@Name='ISState']$</AlertParameter2>
          </AlertParameters>
        </AlertSettings>
        <OperationalStates>
          <OperationalState ID="Healthy" MonitorTypeStateID="UpToDate" HealthState="Success" />
          <OperationalState ID="Warning" MonitorTypeStateID="NeedsUpdate" HealthState="Warning" />
        </OperationalStates>
        <Configuration>
          <IntervalSeconds>43200</IntervalSeconds>
          <SyncTime></SyncTime>
          <TimeoutSeconds>120</TimeoutSeconds>
          <TraceLevel>2</TraceLevel>
          <VMId>$Target/Property[Type='QND.Hyperv.2012R2.VM']/VirtualMachineId$</VMId>
        </Configuration>
      </UnitMonitor>
      <UnitMonitor ID="QND.Hyperv.2012R2.VHDFragmentation.Monitor" Accessibility="Public" Enabled="false" Target="QND.HyperV.2012R2.VirtualDrive" ParentMonitorID="Health!System.Health.PerformanceState" Remotable="true" Priority="Normal" TypeID="QND.Hyperv2012R2.VHDFragmentation.MT" ConfirmDelivery="false">
        <Category>PerformanceHealth</Category>
        <AlertSettings AlertMessage="QND.Hyperv.2012R2.VHDFragmentation.Monitor.AlertMessage">
          <AlertOnState>Warning</AlertOnState>
          <AutoResolve>true</AutoResolve>
          <AlertPriority>Normal</AlertPriority>
          <AlertSeverity>MatchMonitorHealth</AlertSeverity>
          <AlertParameters>
            <AlertParameter1>$Data/Context/Property[@Name="FragPerc"]$</AlertParameter1>
          </AlertParameters>
        </AlertSettings>
        <OperationalStates>
          <OperationalState ID="Healthy" MonitorTypeStateID="Healthy" HealthState="Success" />
          <OperationalState ID="OverThreshold1" MonitorTypeStateID="Warning" HealthState="Warning" />
          <OperationalState ID="OverThreshold2" MonitorTypeStateID="Error" HealthState="Error" />
        </OperationalStates>
        <Configuration>
          <IntervalSeconds>14200</IntervalSeconds>
          <SyncTime></SyncTime>
          <TimeoutSeconds>600</TimeoutSeconds>
          <TraceLevel>2</TraceLevel>
          <VirtualDiskId>$Target/Property[Type='QND.HyperV.VMHardwareComponent']/DeviceId$</VirtualDiskId>
          <FragmentationWarningThreshold>50</FragmentationWarningThreshold>
          <FragmentationErrorThreshold>90</FragmentationErrorThreshold>
        </Configuration>
      </UnitMonitor>
      <UnitMonitor ID="QND.Windows.HyperV.2012.R2.VirtualDrive.FreeSpaceMonitor" Accessibility="Public" Enabled="onEssentialMonitoring" Target="QND.HyperV.2012R2.VirtualDrive" ParentMonitorID="Health!System.Health.AvailabilityState" Remotable="true" Priority="Normal" TypeID="HVLib!Microsoft.Windows.HyperV.DiskFreeSpaceMonitorType" ConfirmDelivery="false">
        <Category>AvailabilityHealth</Category>
        <OperationalStates>
          <OperationalState ID="EnoughSpace" MonitorTypeStateID="FreeSpaceAvailable" HealthState="Success" />
          <OperationalState ID="PartialSpace" MonitorTypeStateID="PartialSpaceAvailable" HealthState="Warning" />
          <OperationalState ID="NoSpace" MonitorTypeStateID="NoSpaceAvailable" HealthState="Error" />
        </OperationalStates>
        <Configuration>
          <VirtualDriveId>$Target/Property[Type="QND.HyperV.VMHardwareComponent"]/DeviceId$</VirtualDriveId>
          <WarningSize>2048</WarningSize>
          <ErrorSize>200</ErrorSize>
        </Configuration>
      </UnitMonitor>
      <UnitMonitor ID="QND.Windows.HyperV.2012.R2.RemoteFxCapableMonitor" Accessibility="Public" Enabled="false" Target="QND.Hyperv.2012R2.VM" ParentMonitorID="Health!System.Health.ConfigurationState" Remotable="true" Priority="Normal" TypeID="HVMon!Microsoft.Windows.HyperV.2012.R2.RemoteFXMonitorType" ConfirmDelivery="false">
        <Category>ConfigurationHealth</Category>
        <AlertSettings AlertMessage="QND.Windows.HyperV.2012.R2.RemoteFxCapableMonitor.Alert">
          <AlertOnState>Error</AlertOnState>
          <AutoResolve>true</AutoResolve>
          <AlertPriority>Normal</AlertPriority>
          <AlertSeverity>MatchMonitorHealth</AlertSeverity>
          <AlertParameters />
        </AlertSettings>
        <OperationalStates>
          <OperationalState ID="RemoteFXCapableHardware" MonitorTypeStateID="HostHealthy" HealthState="Success" />
          <OperationalState ID="RemoteFXInCapableHardware" MonitorTypeStateID="HostCritical" HealthState="Error" />
        </OperationalStates>
        <Configuration>
          <IntervalSeconds>86400</IntervalSeconds>
          <TimeoutSeconds>30</TimeoutSeconds>
          <PropertyName>RemoteFXCapable</PropertyName>
        </Configuration>
      </UnitMonitor>
      <UnitMonitor ID="QND.Windows.HyperV.2012.R2.HeterogeneousGPUMonitor" Accessibility="Public" Enabled="false" Target="QND.Hyperv.2012R2.VM" ParentMonitorID="Health!System.Health.ConfigurationState" Remotable="true" Priority="Normal" TypeID="HVMon!Microsoft.Windows.HyperV.2012.R2.RemoteFXMonitorType" ConfirmDelivery="false">
        <Category>ConfigurationHealth</Category>
        <AlertSettings AlertMessage="QND.Windows.HyperV.2012.R2.HeterogeneousGPUMonitor.Alert">
          <AlertOnState>Error</AlertOnState>
          <AutoResolve>true</AutoResolve>
          <AlertPriority>Normal</AlertPriority>
          <AlertSeverity>MatchMonitorHealth</AlertSeverity>
          <AlertParameters />
        </AlertSettings>
        <OperationalStates>
          <OperationalState ID="RemoteFXCapableHardware" MonitorTypeStateID="HostHealthy" HealthState="Success" />
          <OperationalState ID="RemoteFXInCapableHardware" MonitorTypeStateID="HostCritical" HealthState="Error" />
        </OperationalStates>
        <Configuration>
          <IntervalSeconds>86400</IntervalSeconds>
          <TimeoutSeconds>30</TimeoutSeconds>
          <PropertyName>HeterogeneousGPU</PropertyName>
        </Configuration>
      </UnitMonitor>
      <DependencyMonitor ID="QND.Hyperv.2012R2.VDiskToVM.DepMonitor" Accessibility="Public" Enabled="false" MemberMonitor="Health!System.Health.AvailabilityState" ParentMonitorID="Health!System.Health.AvailabilityState" RelationshipType="QND.Hyperv.2012R2.VMHostsVMHardwareComponent" Remotable="true" Priority="Normal" Target="QND.Hyperv.2012R2.VM">
        <Category>AvailabilityHealth</Category>
        <Algorithm>WorstOf</Algorithm>
      </DependencyMonitor>
    </Monitors>
    <Diagnostics>
      <Diagnostic ID="QND.Hyperv2012R2.VM.Current.Cluster.Node.Monitor.Check.Cluster.State.Diagnostic" Accessibility="Internal" Enabled="false" Target="QND.Hyperv2012R2.HyperV.Cluster.ComputerRole" Monitor="QND.Hyperv2012R2.VM.Current.Cluster.Node.Monitor" ExecuteOnState="Error" Remotable="true" Timeout="120">
        <Category>Custom</Category>
        <ProbeAction ID="Script" TypeID="QND.Hyperv2012R2.HyperV.Cluster.Node.Status.PT">
          <ClusterName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/PrincipalName$</ClusterName>
          <VMsOnWrongHost>$Data/StateChange/DataItem/Context/DataItem/Property[@Name='VMsOnWrongHost']$</VMsOnWrongHost>
          <TimeoutSeconds>120</TimeoutSeconds>
        </ProbeAction>
      </Diagnostic>
      <Diagnostic ID="QND.Hyperv2012R2.GetReplicaStatus.Diagnostic" Comment="Get Replica Status" Accessibility="Public" Enabled="false" Target="QND.Hyperv.2012R2.ReplicaVM" Monitor="QND.Hyperv2012R2.VMReplica.Status" ExecuteOnState="Warning" Remotable="true" Timeout="300">
        <Category>Maintenance</Category>
        <ProbeAction ID="PA" TypeID="QND.Hyperv2012R2.VMReplicaStatusTask.PT">
          <TimeoutSeconds>120</TimeoutSeconds>
          <TraceLevel>2</TraceLevel>
          <VMId>$Target/Property[Type='QND.Hyperv.2012R2.VM']/VirtualMachineId$</VMId>
        </ProbeAction>
      </Diagnostic>
      <Diagnostic ID="QND.Hyperv2012R2.GetReplicaStatusError.Diagnostic" Comment="Get Replica Status" Accessibility="Public" Enabled="false" Target="QND.Hyperv.2012R2.ReplicaVM" Monitor="QND.Hyperv2012R2.VMReplica.Status" ExecuteOnState="Error" Remotable="true" Timeout="300">
        <Category>Maintenance</Category>
        <ProbeAction ID="PA" TypeID="QND.Hyperv2012R2.VMReplicaStatusTask.PT">
          <TimeoutSeconds>120</TimeoutSeconds>
          <TraceLevel>2</TraceLevel>
          <VMId>$Target/Property[Type='QND.Hyperv.2012R2.VM']/VirtualMachineId$</VMId>
        </ProbeAction>
      </Diagnostic>
    </Diagnostics>
    <Recoveries>
      <Recovery ID="QND.Hyperv2012R2.Move.VMs.To.Preferred.Nodes.Recovery" Accessibility="Internal" Enabled="true" Target="QND.Hyperv2012R2.HyperV.Cluster.ComputerRole" Monitor="QND.Hyperv2012R2.VM.Current.Cluster.Node.Monitor" ResetMonitor="true" ExecuteOnDiagnostic="QND.Hyperv2012R2.VM.Current.Cluster.Node.Monitor.Check.Cluster.State.Diagnostic" Remotable="true" Timeout="900">
        <Category>Custom</Category>
        <ConditionDetection ID="FilterDiagnostic" TypeID="System!System.ExpressionFilter">
          <Expression>
            <SimpleExpression>
              <ValueExpression>
                <XPathQuery Type="String">Diagnostic/DataItem/Property[@Name='Healthy']</XPathQuery>
              </ValueExpression>
              <Operator>Equal</Operator>
              <ValueExpression>
                <Value Type="String">true</Value>
              </ValueExpression>
            </SimpleExpression>
          </Expression>
        </ConditionDetection>
        <WriteAction ID="PSScript" TypeID="Windows!Microsoft.Windows.PowerShellWriteAction">
          <ScriptName>VMFailBackToPreferredNodeAction.ps1</ScriptName>
          <ScriptBody><![CDATA[#===================================================================================================
# AUTHOR:         	Tao Yang
# Script Name:    	VMFailBackToPreferredNodeAction.ps1
# DATE:           	11/07/2012
# Version:        	1.0
# COMMENT:			- Script to fail back Virtual Machines on a Hyper-V Cluster to a preferred host
#===================================================================================================
Param (
	[string]$ClusterName,
	[string]$VirtualMachines
	)

Function Get-OnePreferredHost($ClusterName, $ClusterResourceName)
{
	$arrPreferredHosts = Get-WmiObject -Computer $ClusterName -Namespace root\MSCluster -Query "Associators of {MSCluster_ResourceGroup.Name='$ClusterResourceName'} WHERE AssocClass = MSCluster_ResourceGroupToPreferredNode"
	$PreferredHost = Get-Random -InputObject $arrPreferredHosts
	$PreferredHostName = $PreferredHost.Name
	$PreferredHostName
}

Function Get-CurrentHost ($ClusterName, $ClusterResourceName)
{
	$CurrentHost = (Get-WmiObject -ComputerName $ClusterName -Namespace root\MSCluster -Query "Associators of {MSCluster_ResourceGroup.Name='$ClusterResourceName'} WHERE AssocClass = MSCluster_NodeToActiveGroup").Name
	$CurrentHost
}

$arrVirtualMachines = $VirtualMachines.split(";")

Foreach ($VM in $arrVirtualMachines)
{
	#Write-Host $VM
	
	$Target = Get-OnePreferredHost $ClusterName $VM
	
	#$VMResourceGroup = Get-WmiObject -Namespace root\MSCluster -Query "Associators of {MSCluster_Resource.Name='$($VMResource.Name)'} WHERE AssocClass = MSCluster_ResourceGroupToResource"
	Write-Host "Preferred Host for $VM is $Target"
	$VMResourceGroup = Get-WmiObject -ComputerName $ClusterName -Namespace root\MSCluster -Query "Select * from MSCluster_ResourceGroup Where Name = '$VM'"
	$VMResources = Get-WmiObject -ComputerName $ClusterName -Namespace root\MSCluster -Query "Associators of {MSCluster_ResourceGroup.Name='$($VMResourceGroup.Name)'} WHERE AssocClass = MSCluster_ResourceGroupToResource"
	Foreach ($VMResource in $VMResources)
	{
		if ($VMResource.Type -eq 'Virtual Machine')
		{
			$CurrentHost = Get-CurrentHost $ClusterName $VM
			Write-Host "Moving $VM Resource from $CurrentHost to $Target`..."
			$EncodedTarget = [System.Text.Encoding]::UNICODE.GetBytes($Target)
			$ResourceControlCode = 23068676
			#$LiveMigrationJob = Invoke-WmiMethod -InputObject $VMResource -Name ExecuteResourceControl -ArgumentList $ResourceControlCode, $Target -AsJob
			$VMResource.ExecuteResourceControl(23068676,$EncodedTarget) | Out-Null
			$bJobCompleted = $false
			do {
				Start-Sleep -Seconds 5
				$CurrentHost = Get-CurrentHost $ClusterName $VM
				if ($CurrentHost -ieq $Target)
				{
					$bJobCompleted = $true
				}
			}
			While ($bJobCompleted -eq $false)
			#$VMResourceGroup.MoveToNewNode($PreferredHostName, $MoveToNewNodeTimeoutSeconds)
		}
	}
}
Write-Host "Done!"
]]></ScriptBody>
          <Parameters>
            <Parameter>
              <Name>ClusterName</Name>
              <Value>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/PrincipalName$</Value>
            </Parameter>
            <Parameter>
              <Name>VirtualMachines</Name>
              <Value>$Data/Diagnostic/DataItem/Property[@Name='VMsOnWrongHost']$</Value>
            </Parameter>
          </Parameters>
          <TimeoutSeconds>900</TimeoutSeconds>
        </WriteAction>
      </Recovery>
      <Recovery ID="QND.Hyperv2012R2.ResumeReplica" Target="QND.Hyperv.2012R2.ReplicaVM" Monitor="QND.Hyperv2012R2.VMReplica.Status" Accessibility="Public" Enabled="false" ExecuteOnState="Warning" Remotable="true" ResetMonitor="false" Timeout="300">
        <Category>Maintenance</Category>
        <!-- Please fill in the type of the condition detection module 
             or remove the ConditionDetection section. This can be used to
             inspect the Monitor State, Data Item that caused the State Change,
             or the Diagnostic ProbeAction Output (if the ExecuteOnDiagnostic
             attribute is present). If this Condition Detection does not "pass"
             the WriteAction will not be executed. -->
        <ConditionDetection ID="Filter" TypeID="System!System.ExpressionFilter">
          <Expression>
            <RegExExpression>
              <ValueExpression>
                <XPathQuery>StateChange/DataItem/Context/Property[@Name='ReplicationStateCode']</XPathQuery>
              </ValueExpression>
              <Operator>MatchesRegularExpression</Operator>
              <Pattern>^(7,8,9,11)$</Pattern>
            </RegExExpression>
          </Expression>
        </ConditionDetection>
        <!-- Please fill in the type of the write action module.
             Without a ConditionDetection, the WriteAction always executes.
             The output of the write action will be shown in the 
             Health Explorer detail pane. -->
        <WriteAction ID="WA" TypeID="QND.Hyperv2012R2.ResumeReplica.WAT">
          <TimeoutSeconds>300</TimeoutSeconds>
          <TraceLevel>2</TraceLevel>
          <VMId>$Target/Property[Type='QND.Hyperv.2012R2.VM']/VirtualMachineId$</VMId>
        </WriteAction>
      </Recovery>
      <Recovery ID="QND.Hyperv2012R2.Error.ResumeReplica" Target="QND.Hyperv.2012R2.ReplicaVM" Monitor="QND.Hyperv2012R2.VMReplica.Status" Accessibility="Public" Enabled="false" ExecuteOnState="Error" Remotable="true" ResetMonitor="false" Timeout="300">
        <Category>Maintenance</Category>
        <!-- Please fill in the type of the condition detection module 
             or remove the ConditionDetection section. This can be used to
             inspect the Monitor State, Data Item that caused the State Change,
             or the Diagnostic ProbeAction Output (if the ExecuteOnDiagnostic
             attribute is present). If this Condition Detection does not "pass"
             the WriteAction will not be executed. -->
        <ConditionDetection ID="Filter" TypeID="System!System.ExpressionFilter">
          <Expression>
            <RegExExpression>
              <ValueExpression>
                <XPathQuery>StateChange/DataItem/Context/Property[@Name='ReplicationStateCode']</XPathQuery>
              </ValueExpression>
              <Operator>MatchesRegularExpression</Operator>
              <Pattern>^(7,8,9,11)$</Pattern>
            </RegExExpression>
          </Expression>
        </ConditionDetection>
        <!-- Please fill in the type of the write action module.
             Without a ConditionDetection, the WriteAction always executes.
             The output of the write action will be shown in the 
             Health Explorer detail pane. -->
        <WriteAction ID="WA" TypeID="QND.Hyperv2012R2.ResumeReplica.WAT">
          <TimeoutSeconds>300</TimeoutSeconds>
          <TraceLevel>2</TraceLevel>
          <VMId>$Target/Property[Type='QND.Hyperv.2012R2.VM']/VirtualMachineId$</VMId>
        </WriteAction>
      </Recovery>
    </Recoveries>
    <Overrides>
      <MonitorPropertyOverride ID="QND.Hyperv.2012R2.DisableISCheckForUnix.override" Context="QND.Hyperv.2012R2.UnixVM.Group" Monitor="QND.Hyperv2012R2.VMISStatus" Property="Enabled" Enforced="false">
        <Value>false</Value>
      </MonitorPropertyOverride>
      <DiscoveryPropertyOverride ID="QND.Hyperv.2012R2.DisableStdVMDiscovery.Override" Context="Hyperv2012R2!Microsoft.Windows.HyperV.2012.R2.ServerRole" Enforced="false" Discovery="Hyperv2012R2!Microsoft.Windows.HyperV.2012.R2.VirtualMachineDiscovery" Property="Enabled">
        <Value>false</Value>
      </DiscoveryPropertyOverride>
    </Overrides>
  </Monitoring>
  <Presentation>
    <ConsoleTasks>
      <ConsoleTask ID="QND.Hyperv2012R2.VMConnect.ConsoleTask" Accessibility="Public" Enabled="true" Target="QND.Hyperv.2012R2.VM" RequireOutput="false">
        <Assembly>Res.QND.Hyperv2012R2.VMConnect.ConsoleTask</Assembly>
        <Handler>ShellHandler</Handler>
        <Parameters>
          <Argument Name="WorkingDirectory" />
          <Argument Name="Application">%SystemRoot%\System32\vmconnect.exe</Argument>
          <Argument>$Target/Property[Type="QND.Hyperv.2012R2.VM"]/HostName$ $Target/Property[Type="QND.Hyperv.2012R2.VM"]/VirtualMachineName$</Argument>
        </Parameters>
      </ConsoleTask>
    </ConsoleTasks>
    <Views>
      <View ID="QND.Hyperv.2012R2.VirtualMachine.State.View" Accessibility="Public" Enabled="true" Target="QND.Hyperv.2012R2.VM" TypeID="SC!Microsoft.SystemCenter.StateViewType" Visible="true">
        <Category>Operations</Category>
        <Criteria>
          <InMaintenanceMode>false</InMaintenanceMode>
        </Criteria>
        <Presentation>
          <ColumnInfo Index="0" SortIndex="0" Width="100" Grouped="false" Sorted="true" IsSortable="true" Visible="true" SortOrder="Descending">
            <Name>State</Name>
            <Id>QND.Hyperv.2012R2.VM</Id>
          </ColumnInfo>
          <ColumnInfo Index="1" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>In Maintenance Mode</Name>
            <Id>InMaintenanceMode</Id>
          </ColumnInfo>
          <ColumnInfo Index="2" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>Name</Name>
            <Id>Name</Id>
          </ColumnInfo>
          <ColumnInfo Index="3" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Path</Name>
            <Id>Path</Id>
          </ColumnInfo>
          <ColumnInfo Index="4" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Display Name</Name>
            <Id>System.Entity/DisplayName</Id>
          </ColumnInfo>
          <ColumnInfo Index="5" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Model</Name>
            <Id>System.ComputerHardware/Model</Id>
          </ColumnInfo>
          <ColumnInfo Index="6" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Manufacturer</Name>
            <Id>System.ComputerHardware/Manufacturer</Id>
          </ColumnInfo>
          <ColumnInfo Index="7" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>Number Of Processors</Name>
            <Id>System.ComputerHardware/NumberOfProcessors</Id>
          </ColumnInfo>
          <ColumnInfo Index="8" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>VM Id</Name>
            <Id>QND.Hyperv.2012R2.VM/VirtualMachineId</Id>
          </ColumnInfo>
          <ColumnInfo Index="9" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>VM Name</Name>
            <Id>QND.Hyperv.2012R2.VM/VirtualMachineName</Id>
          </ColumnInfo>
          <ColumnInfo Index="10" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>Hyper-V Host Name</Name>
            <Id>QND.Hyperv.2012R2.VM/HostName</Id>
          </ColumnInfo>
          <ColumnInfo Index="11" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>VMComputerName</Name>
            <Id>QND.Hyperv.2012R2.VM/VMComputerName</Id>
          </ColumnInfo>
          <ColumnInfo Index="12" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>Integration Services Version</Name>
            <Id>QND.Hyperv.2012R2.VM/ISVersion</Id>
          </ColumnInfo>
          <ColumnInfo Index="13" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="false" Visible="false" SortOrder="Ascending">
            <Name>Resource Metering Enabled</Name>
            <Id>QND.Hyperv.2012R2.VM/RMEnabled</Id>
          </ColumnInfo>
          <ColumnInfo Index="14" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>VM Generation</Name>
            <Id>QND.Hyperv.2012R2.VM/VMGeneration</Id>
          </ColumnInfo>
          <ColumnInfo Index="15" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="false" Visible="true" SortOrder="Ascending">
            <Name>Highly Available</Name>
            <Id>QND.Hyperv.2012R2.VM/HA</Id>
          </ColumnInfo>
          <ColumnInfo Index="16" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="false" Visible="false" SortOrder="Ascending">
            <Name>Min Memory (MB)</Name>
            <Id>QND.Hyperv.2012R2.VM/MinMemory</Id>
          </ColumnInfo>
          <ColumnInfo Index="17" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="false" Visible="false" SortOrder="Ascending">
            <Name>Max Memoery (MB)</Name>
            <Id>QND.Hyperv.2012R2.VM/MaxMemory</Id>
          </ColumnInfo>
          <ColumnInfo Index="18" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="false" Visible="false" SortOrder="Ascending">
            <Name>Startup Memory (MB)</Name>
            <Id>QND.Hyperv.2012R2.VM/StartMemory</Id>
          </ColumnInfo>
          <ColumnInfo Index="19" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Processor count</Name>
            <Id>QND.Hyperv.2012R2.VM/ProcessorCount</Id>
          </ColumnInfo>
          <ColumnInfo Index="20" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>OS Platform Id</Name>
            <Id>QND.Hyperv.2012R2.VM/OSPlatformId</Id>
          </ColumnInfo>
          <ColumnInfo Index="21" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>OS Family</Name>
            <Id>QND.Hyperv.2012R2.VM/OSFamily</Id>
          </ColumnInfo>
          <ColumnInfo Index="22" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>OS Name</Name>
            <Id>QND.Hyperv.2012R2.VM/OSName</Id>
          </ColumnInfo>
          <ColumnInfo Index="23" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Hyper-V 2012R2 - VM Drive (QND)</Name>
            <Id>QND.HyperV.2012R2.VirtualDrive</Id>
          </ColumnInfo>
          <ColumnInfo Index="24" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Hyper-V 2012R2 - VM NIC (QND)</Name>
            <Id>QND.HyperV.2012R2.VirtualNetworkAdapter</Id>
          </ColumnInfo>
        </Presentation>
        <Target />
      </View>
      <View ID="QND.Hyperv.2012R2.VirtualDrive.State.View" Accessibility="Public" Enabled="true" Target="QND.HyperV.2012R2.VirtualDrive" TypeID="SC!Microsoft.SystemCenter.StateViewType" Visible="true">
        <Category>Operations</Category>
        <Criteria>
          <InMaintenanceMode>false</InMaintenanceMode>
        </Criteria>
        <Presentation>
          <ColumnInfo Index="0" SortIndex="0" Width="100" Grouped="false" Sorted="true" IsSortable="true" Visible="true" SortOrder="Descending">
            <Name>State</Name>
            <Id>QND.HyperV.2012R2.VirtualDrive</Id>
          </ColumnInfo>
          <ColumnInfo Index="1" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>In Maintenance Mode</Name>
            <Id>InMaintenanceMode</Id>
          </ColumnInfo>
          <ColumnInfo Index="2" SortIndex="0" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>Name</Name>
            <Id>Name</Id>
          </ColumnInfo>
          <ColumnInfo Index="3" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>Path</Name>
            <Id>Path</Id>
          </ColumnInfo>
          <ColumnInfo Index="4" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Display Name</Name>
            <Id>System.Entity/DisplayName</Id>
          </ColumnInfo>
          <ColumnInfo Index="5" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>Device Id</Name>
            <Id>QND.HyperV.VMHardwareComponent/DeviceIs</Id>
          </ColumnInfo>
          <ColumnInfo Index="6" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>Image File</Name>
            <Id>QND.HyperV.2012R2.VirtualDrive/ImageFile</Id>
          </ColumnInfo>
          <ColumnInfo Index="7" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>VHD Type</Name>
            <Id>QND.HyperV.2012R2.VirtualDrive/VHDType</Id>
          </ColumnInfo>
          <ColumnInfo Index="8" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>VHD Format</Name>
            <Id>QND.HyperV.2012R2.VirtualDrive/VHDFormat</Id>
          </ColumnInfo>
          <ColumnInfo Index="9" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Connected Controller Name</Name>
            <Id>QND.Hyperv.2012R2.VirtualDrive/ConnectedControllerName</Id>
          </ColumnInfo>
          <ColumnInfo Index="10" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>Max Size (GB)</Name>
            <Id>QND.Hyperv.2012R2.VirtualDrive/MaxSizeGB</Id>
          </ColumnInfo>
        </Presentation>
        <Target />
      </View>
      <View ID="QND.Hyperv.2012R2.VirtualNetworkAdapter.State.View" Accessibility="Public" Enabled="true" Target="QND.HyperV.2012R2.VirtualNetworkAdapter" TypeID="SC!Microsoft.SystemCenter.StateViewType" Visible="true">
        <Category>Operations</Category>
        <Criteria>
          <InMaintenanceMode>false</InMaintenanceMode>
        </Criteria>
        <Presentation>
          <ColumnInfo Index="0" SortIndex="0" Width="100" Grouped="false" Sorted="true" IsSortable="true" Visible="true" SortOrder="Descending">
            <Name>State</Name>
            <Id>QND.HyperV.2012R2.VirtualNetworkAdapter</Id>
          </ColumnInfo>
          <ColumnInfo Index="1" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>In Maintenance Mode</Name>
            <Id>InMaintenanceMode</Id>
          </ColumnInfo>
          <ColumnInfo Index="2" SortIndex="0" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>Name</Name>
            <Id>Name</Id>
          </ColumnInfo>
          <ColumnInfo Index="3" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>Path</Name>
            <Id>Path</Id>
          </ColumnInfo>
          <ColumnInfo Index="4" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Display Name</Name>
            <Id>System.Entity/DisplayName</Id>
          </ColumnInfo>
          <ColumnInfo Index="5" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>Device Id</Name>
            <Id>QND.HyperV.VMHardwareComponent/DeviceIs</Id>
          </ColumnInfo>
          <ColumnInfo Index="6" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>Image File</Name>
            <Id>QND.HyperV.2012R2.VirtualNetworkAdapter/SwitchId</Id>
          </ColumnInfo>
          <ColumnInfo Index="7" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>VHD Type</Name>
            <Id>QND.HyperV.2012R2.VirtualNetworkAdapter/SwitchName</Id>
          </ColumnInfo>
        </Presentation>
        <Target />
      </View>
      <View ID="QND.Hyperv.2012R2.VirtualMachine.Performance.View" Accessibility="Public" Target="QND.Hyperv.2012R2.VM" TypeID="SC!Microsoft.SystemCenter.PerformanceViewType">
        <Category>PerformanceCollection</Category>
        <Criteria />
      </View>
      <View ID="QND.Hyperv.2012R2.VirtualDrive.Performance.View" Accessibility="Public" Target="QND.HyperV.2012R2.VirtualDrive" TypeID="SC!Microsoft.SystemCenter.PerformanceViewType">
        <Category>PerformanceCollection</Category>
        <Criteria />
      </View>
      <View ID="QND.Hyperv.2012R2.VirtualNetworkAdapter.Performance.View" Accessibility="Public" Target="QND.HyperV.2012R2.VirtualNetworkAdapter" TypeID="SC!Microsoft.SystemCenter.PerformanceViewType">
        <Category>PerformanceCollection</Category>
        <Criteria />
      </View>
    </Views>
    <Folders>
      <Folder ID="QND.Hyperv.ColumnCapableStateWidgetTemplate.Folder" Accessibility="Internal" ParentFolder="Configuration!Microsoft.SystemCenter.Visualization.WidgetViewTemplateRoot" />
    </Folders>
    <FolderItems>
      <FolderItem ElementID="QND.Hyperv.2012R2.VirtualMachine.State.View" ID="QND.Hyperv.2012R2.VMState.Item" Folder="HVLib!Microsoft.Windows.HyperV.RootFolder" />
      <FolderItem ElementID="QND.Hyperv.2012R2.VirtualDrive.State.View" ID="QND.Hyperv.2012R2.VirtualDriveState.Item" Folder="HVLib!Microsoft.Windows.HyperV.RootFolder" />
      <FolderItem ElementID="QND.Hyperv.2012R2.VirtualNetworkAdapter.State.View" ID="QND.Hyperv.2012R2.VirtualNetworkAdapterState.Item" Folder="HVLib!Microsoft.Windows.HyperV.RootFolder" />
      <FolderItem ElementID="QND.Hyperv.2012R2.VirtualMachine.Performance.View" ID="QND.Hyperv.2012R2.VMPerf.Item" Folder="HVLib!Microsoft.Windows.HyperV.RootFolder" />
      <FolderItem ElementID="QND.Hyperv.2012R2.VirtualDrive.Performance.View" ID="QND.HyperV.2012R2.VirtualDrivePerf.Item" Folder="HVLib!Microsoft.Windows.HyperV.RootFolder" />
      <FolderItem ElementID="QND.Hyperv.2012R2.VirtualNetworkAdapter.Performance.View" ID="QND.HyperV.2012R2.VirtualNetworkAdapterPerf.Item" Folder="HVLib!Microsoft.Windows.HyperV.RootFolder" />
    </FolderItems>
    <StringResources>
      <StringResource ID="QND.Hyperv2012R2.VM.Current.Cluster.Node.Monitor.AlertMessage" />
      <StringResource ID="QND.Hyperv.2012R2.VMMemoryStatus.AlertMessage" />
      <StringResource ID="QND.Hyperv2012R2.VMName.Matches.ComputerName.Monitor.AlertMessage" />
      <StringResource ID="QND.Hyperv2012R2.VMReplica.Status.AlertMessage" />
      <StringResource ID="QND.Hyperv2012R2.VMSnapshotAge.AlertMessage" />
      <StringResource ID="QND.Hyperv2012R2.VMISStatus.AlertMessage" />
      <StringResource ID="QND.Hyperv.2012R2.VHDFragmentation.Monitor.AlertMessage" />
      <StringResource ID="QND.Windows.HyperV.2012.R2.RemoteFxCapableMonitor.Alert" />
      <StringResource ID="QND.Windows.HyperV.2012.R2.HeterogeneousGPUMonitor.Alert" />
    </StringResources>
    <ComponentTypes>
      <ComponentType ID="QND.Hyperv.StateWidget.Template" Accessibility="Public" Lifetime="ManagementPackElement">
        <Property Name="AutoRefreshTickInterval" Type="xsd://int" BindingDirection="In">
          <SimpleValue Type="xsd://integer" Value="300" />
        </Property>
        <Property Name="Script" Type="xsd://string" BindingDirection="Both" />
        <Property Name="SelectedRow" Type="BaseDataType[]" BindingDirection="Out" />
        <Property Name="IsBusy" Type="BaseDataType" BindingDirection="Out" />
        <Property Name="LastError" Type="BaseDataType" BindingDirection="Out" />
        <Property Name="ShowSearchBar" Type="xsd://boolean" BindingDirection="In">
          <SimpleValue Type="xsd://boolean" Value="True" />
        </Property>
      </ComponentType>
      <ComponentType ID="QND.Hyperv.StateWidget.Template.Common.DataGridColumnsToPropertyNames" Accessibility="Public" Lifetime="ManagementPackElement">
        <Property Name="Columns" Type="xsd://Microsoft.SystemCenter.Visualization.Library!Microsoft.SystemCenter.Visualization.ColumnType/DataGridColumn[]" BindingDirection="In" />
        <Property Name="GroupedColumns" Type="xsd://Microsoft.SystemCenter.Visualization.Library!Microsoft.SystemCenter.Visualization.ColumnType/DataCollectionViewColumn[]" BindingDirection="In" />
        <Property Name="SortedColumns" Type="xsd://Microsoft.SystemCenter.Visualization.Library!Microsoft.SystemCenter.Visualization.ColumnType/DataCollectionViewColumn[]" BindingDirection="In" />
        <Property Name="PropertyNames" Type="xsd://string[]" BindingDirection="Both" />
      </ComponentType>
      <ComponentType ID="QND.Hyperv.StateWidget.Template.CustomExpressionPageScript" Accessibility="Public" Lifetime="ManagementPackElement">
        <Property Name="Script" Type="xsd://string" BindingDirection="Both" />
      </ComponentType>
      <ComponentType ID="QND.Hyperv.StateWidget.Template.CustomExpressionPageRefreshInterval" Accessibility="Public" Lifetime="ManagementPackElement">
        <Property Name="AutoRefreshTickInterval" Type="xsd://string" BindingDirection="Both" />
      </ComponentType>
      <ComponentType ID="QND.Hyperv.StateWidget.Template.LabelledTextBox" Accessibility="Internal" Lifetime="ManagementPackElement">
        <Property Name="Label" Type="xsd://string" BindingDirection="Both" />
        <Property Name="MultilineTextBox" Type="xsd://boolean" BindingDirection="Both" />
        <Property Name="Height" Type="xsd://int" BindingDirection="Both" />
        <Property Name="MaxLength" Type="xsd://int" BindingDirection="In" />
        <Property Name="Text" Type="xsd://string" BindingDirection="Both" />
      </ComponentType>
    </ComponentTypes>
    <ComponentReferences>
      <ComponentReference ID="QND.Hyperv.StateWidget.Template.FolderItem" Accessibility="Public" TypeID="QND.Hyperv.StateWidget.Template" Parent="QND.Hyperv.ColumnCapableStateWidgetTemplate.Folder" />
    </ComponentReferences>
    <ComponentImplementations>
      <ComponentImplementation ID="QND.Hyperv.StateWidget.Template.ComponentImplementation" Accessibility="Internal" TypeId="QND.Hyperv.StateWidget.Template" Platform="All">
        <Composite>
          <Variable Id="FilterCriteria" Type="BaseDataType" />
          <Variable Id="FilterPropertyNames" Type="xsd://string[]" />
          <Variable Id="LocalSelectedItems" Type="BaseDataType[]" />
          <Variable Id="GlobalSelectedItems" Type="BaseDataType[]" />
          <Variable Id="SortedColumns" Type="xsd://Microsoft.SystemCenter.Visualization.Library!Microsoft.SystemCenter.Visualization.ColumnType/DataGridColumn[]">
            <ComplexValueCollection Type="xsd://Microsoft.SystemCenter.Visualization.Library!Microsoft.SystemCenter.Visualization.ColumnType/DataGridColumn[]">
              <ComplexValue Type="xsd://Microsoft.SystemCenter.Visualization.Library!Microsoft.SystemCenter.Visualization.ColumnType/DataGridColumn">
                <Binding PropertyId="PropertyName">
                  <SimpleValue Type="xsd://string" Value="State" />
                </Binding>
                <Binding PropertyId="HeaderDisplayObject">
                  <SimpleValue Type="xsd://string" Value="State" />
                </Binding>
                <Binding PropertyId="XPath">
                  <SimpleValue Type="xsd://string" Value="$Object/PropertyCollection[Name='State']$" />
                </Binding>
                <Binding PropertyId="SourceType">
                  <SimpleValue Type="xsd://string" Value="ManagedEntity" />
                </Binding>
              </ComplexValue>
              <ComplexValue Type="xsd://Microsoft.SystemCenter.Visualization.Library!Microsoft.SystemCenter.Visualization.ColumnType/DataGridColumn">
                <Binding PropertyId="PropertyName">
                  <SimpleValue Type="xsd://string" Value="Name" />
                </Binding>
                <Binding PropertyId="HeaderDisplayObject">
                  <SimpleValue Type="xsd://string" Value="Name" />
                </Binding>
                <Binding PropertyId="XPath">
                  <SimpleValue Type="xsd://string" Value="$Object/PropertyCollection[Name='Name']$" />
                </Binding>
                <Binding PropertyId="SourceType">
                  <SimpleValue Type="xsd://string" Value="ManagedEntity" />
                </Binding>
              </ComplexValue>
            </ComplexValueCollection>
          </Variable>
          <Variable Id="AutoRefreshAction" Type="xsd://Microsoft.SystemCenter.Visualization.Library!Microsoft.SystemCenter.Visualization.ActionTypes/AutoRefreshAction" />
          <Variable Id="ConsolidatedRefreshAction" Type="xsd://Microsoft.SystemCenter.Visualization.Library!Microsoft.SystemCenter.Visualization.ActionTypes/RefreshAction" />
          <Variable Id="DataSourceOutput" Type="BaseDataType[]" />
          <Variable Id="GeneratedColumns" Type="xsd://Microsoft.SystemCenter.Visualization.Library!Microsoft.SystemCenter.Visualization.ColumnType/DataGridColumn[]" />
          <Component TypeId="Visualization!Microsoft.SystemCenter.Visualization.ComponentContainer">
            <Binding PropertyId="Visual">
              <Component TypeId="Visualization!Microsoft.SystemCenter.Visualization.LayoutGrid">
                <Binding PropertyId="RowCollection">
                  <Component TypeId="Visualization!Microsoft.SystemCenter.Visualization.LayoutGridRow">
                    <Binding PropertyId="Height">
                      <SimpleValue Type="xsd://string" Value="Auto" />
                    </Binding>
                  </Component>
                </Binding>
                <Binding PropertyId="RowCollection">
                  <Component TypeId="Visualization!Microsoft.SystemCenter.Visualization.LayoutGridRow">
                    <Binding PropertyId="Height">
                      <SimpleValue Type="xsd://string" Value="*" />
                    </Binding>
                  </Component>
                </Binding>
                <Binding PropertyId="ColumnCollection">
                  <Component TypeId="Visualization!Microsoft.SystemCenter.Visualization.LayoutGridColumn">
                    <Binding PropertyId="Width">
                      <SimpleValue Type="xsd://string" Value="*" />
                    </Binding>
                  </Component>
                </Binding>
                <Binding PropertyId="CellCollection">
                  <Component TypeId="Visualization!Microsoft.SystemCenter.Visualization.LayoutGridCell">
                    <Binding PropertyId="RowId">
                      <SimpleValue Type="xsd://string" Value="0" />
                    </Binding>
                    <Binding PropertyId="ColumnId">
                      <SimpleValue Type="xsd://string" Value="0" />
                    </Binding>
                    <Binding PropertyId="Content">
                      <Component TypeId="VMMDash!Microsoft.SystemCenter.VMMHostVM.Visualization.Components.Common.WidgetFilterControl">
                        <Binding PropertyId="Criteria">
                          <Reference>$Variable/FilterCriteria$</Reference>
                        </Binding>
                        <Binding PropertyId="ControlIsVisible">
                          <SimpleValue Type="xsd://boolean" Value="True" />
                        </Binding>
                      </Component>
                    </Binding>
                  </Component>
                </Binding>
                <Binding PropertyId="CellCollection">
                  <Component TypeId="Visualization!Microsoft.SystemCenter.Visualization.LayoutGridCell">
                    <Binding PropertyId="RowId">
                      <SimpleValue Type="xsd://string" Value="1" />
                    </Binding>
                    <Binding PropertyId="ColumnId">
                      <SimpleValue Type="xsd://string" Value="0" />
                    </Binding>
                    <Binding PropertyId="Content">
                      <Component TypeId="Visualization!Microsoft.SystemCenter.Visualization.DataGrid">
                        <Binding PropertyId="Data">
                          <Reference>$Variable/DataSourceOutput$</Reference>
                        </Binding>
                        <Binding PropertyId="SelectionMode">
                          <SimpleValue Type="xsd://string" Value="SingleRowSelect" />
                        </Binding>
                        <Binding PropertyId="SelectedRows">
                          <Reference>$Variable/LocalSelectedItems$</Reference>
                        </Binding>
                        <Binding PropertyId="ColumnHeaderVisible">
                          <SimpleValue Type="xsd://boolean" Value="True" />
                        </Binding>
                        <Binding PropertyId="CanReorderColumns">
                          <SimpleValue Type="xsd://boolean" Value="True" />
                        </Binding>
                        <Binding PropertyId="CellComponentType">
                          <SimpleValue Type="xsd://string" Value="Microsoft.SystemCenter.Visualization.Library!Microsoft.SystemCenter.Visualization.DataGridGenericCell" />
                        </Binding>
                        <Binding PropertyId="ColumnHeaderComponentType">
                          <SimpleValue Type="xsd://string" Value="Microsoft.SystemCenter.Visualization.Library!Microsoft.SystemCenter.Visualization.DataGridColumnHeaderCell" />
                        </Binding>
                        <Binding PropertyId="Columns">
                          <Reference>$Variable/GeneratedColumns$</Reference>
                        </Binding>
                        <Binding PropertyId="SortedColumns">
                          <Reference>$Variable/SortedColumns$</Reference>
                        </Binding>
                        <Binding PropertyId="Filter">
                          <Component TypeId="VMMDash!Microsoft.SystemCenter.VMMHostVM.Visualization.Components.Common.SmartFilter">
                            <Binding PropertyId="Criteria">
                              <Reference>$Variable/FilterCriteria$</Reference>
                            </Binding>
                            <Binding PropertyId="PropertyNames">
                              <Reference>$Variable/FilterPropertyNames$</Reference>
                            </Binding>
                          </Component>
                        </Binding>
                      </Component>
                    </Binding>
                  </Component>
                </Binding>
              </Component>
            </Binding>
            <Binding PropertyId="Objects">
              <Component TypeId="MSVCL!Microsoft.SystemCenter.Visualization.Component.Library.SelectedItemFilter">
                <Binding PropertyId="LocalSelectedItems">
                  <Reference>$Variable/LocalSelectedItems$</Reference>
                </Binding>
                <Binding PropertyId="GlobalSelectedItems">
                  <Reference>$Variable/GlobalSelectedItems$</Reference>
                </Binding>
              </Component>
            </Binding>
            <Binding PropertyId="Objects">
              <Component TypeId="Visualization!Microsoft.SystemCenter.Visualization.OneWaySync">
                <Binding PropertyId="From">
                  <Reference>$Variable/LocalSelectedItems$</Reference>
                </Binding>
                <Binding PropertyId="To">
                  <Reference>$Property/SelectedRow$</Reference>
                </Binding>
              </Component>
            </Binding>
            <Binding PropertyId="Objects">
              <Component TypeId="VMMDash!Microsoft.SystemCenter.VMMHostVM.Visualization.Components.Common.DataObjectColumnGenerator">
                <Binding PropertyId="InputCollection">
                  <Reference>$Variable/DataSourceOutput$</Reference>
                </Binding>
                <Binding PropertyId="ColumnCollection">
                  <Reference>$Variable/GeneratedColumns$</Reference>
                </Binding>
              </Component>
            </Binding>
            <Binding PropertyId="Objects">
              <Component TypeId="QND.Hyperv.StateWidget.Template.Common.DataGridColumnsToPropertyNames">
                <Binding PropertyId="Columns">
                  <Reference>$Variable/GeneratedColumns$</Reference>
                </Binding>
                <Binding PropertyId="SortedColumns">
                  <Reference>$Variable/SortedColumns$</Reference>
                </Binding>
                <Binding PropertyId="PropertyNames">
                  <Reference>$Variable/FilterPropertyNames$</Reference>
                </Binding>
              </Component>
            </Binding>
            <Binding PropertyId="Objects">
              <Component TypeId="Visualization!Microsoft.SystemCenter.Visualization.AutoRefreshTimer">
                <Binding PropertyId="TickInterval">
                  <Reference>$Property/AutoRefreshTickInterval$</Reference>
                </Binding>
                <Binding PropertyId="AutoRefreshAction">
                  <Reference>$Variable/AutoRefreshAction$</Reference>
                </Binding>
              </Component>
            </Binding>
            <Binding PropertyId="Objects">
              <Component TypeId="Visualization!Microsoft.SystemCenter.Visualization.Consolidator">
                <Binding PropertyId="From1">
                  <Reference>$Variable/AutoRefreshAction$</Reference>
                </Binding>
                <Binding PropertyId="From2">
                  <Reference>$Service/RefreshAction$</Reference>
                </Binding>
                <Binding PropertyId="To">
                  <Reference>$Variable/ConsolidatedRefreshAction$</Reference>
                </Binding>
              </Component>
            </Binding>
            <Binding PropertyId="Objects">
              <Component TypeId="MSVCL!Microsoft.SystemCenter.Visualization.Component.Library.PowershellDataSource">
                <Binding PropertyId="DataTypes">
                  <ComplexValueCollection Type="xsd://Microsoft.SystemCenter.Visualization.Library!Microsoft.SystemCenter.Visualization.DataSourceTypes/DataTypeSpecifier[]" />
                </Binding>
                <Binding PropertyId="Script">
                  <Reference>$Property/Script$</Reference>
                </Binding>
                <Binding PropertyId="Modules">
                  <SimpleValue Type="xsd://string" Value="OperationsManager" />
                </Binding>
                <Binding PropertyId="KeyProperty">
                  <SimpleValue Type="xsd://string" Value="Id" />
                </Binding>
                <Binding PropertyId="Output">
                  <Reference>$Variable/DataSourceOutput$</Reference>
                </Binding>
                <Binding PropertyId="Refresh">
                  <Reference>$Variable/ConsolidatedRefreshAction$</Reference>
                </Binding>
              </Component>
            </Binding>
          </Component>
        </Composite>
      </ComponentImplementation>
      <ComponentImplementation ID="QND.Hyperv.StateWidget.Template.Common.DataGridColumnsToPropertyNames.Implementation" Accessibility="Internal" TypeId="QND.Hyperv.StateWidget.Template.Common.DataGridColumnsToPropertyNames" Platform="Wpf, Silverlight">
        <Unit>
          <ContractFactory>Microsoft.EnterpriseManagement.Presentation.Controls.CommonComponents.DataGridColumnsToPropertyNames</ContractFactory>
        </Unit>
      </ComponentImplementation>
      <ComponentImplementation ID="QND.Hyperv.StateWidget.Template.CustomConfigurationImplementation" Accessibility="Internal" TypeId="Configuration!Microsoft.SystemCenter.Visualization.CustomConfigurationPages" Target="component://QND.Hyperv2012R2!QND.Hyperv.StateWidget.Template" Platform="Wpf, Silverlight">
        <Composite>
          <ServiceOverride ServiceId="IsBusy" Type="BaseDataType" OriginalKnownAsVariable="globalIsBusy" />
          <ServiceOverride ServiceId="LastError" Type="BaseDataType" OriginalKnownAsVariable="globalLastError" />
          <Variable Id="IsValid" Type="xsd://boolean">
            <SimpleValue Type="xsd://boolean" Value="false" />
          </Variable>
          <Variable Id="AllColumns" Type="xsd://Microsoft.SystemCenter.Visualization.Library!Microsoft.SystemCenter.Visualization.ColumnType/DataGridColumn[]" />
          <Component TypeId="Configuration!Microsoft.SystemCenter.Visualization.CustomPages">
            <Binding PropertyId="Pages">
              <Component TypeId="QND.Hyperv.StateWidget.Template.CustomExpressionPageScript">
                <Binding PropertyId="Script">
                  <Reference>$Property/Data/Script$</Reference>
                </Binding>
              </Component>
            </Binding>
            <Binding PropertyId="Pages">
              <Component TypeId="QND.Hyperv.StateWidget.Template.CustomExpressionPageRefreshInterval">
                <Binding PropertyId="AutoRefreshTickInterval">
                  <Reference>$Property/Data/AutoRefreshTickInterval$</Reference>
                </Binding>
              </Component>
            </Binding>
            <Binding PropertyId="Data">
              <Reference>$Property/Data$</Reference>
            </Binding>
            <Binding PropertyId="XsdTypeNameParameter">
              <Reference>$Property/XsdTypeName$</Reference>
            </Binding>
            <Binding PropertyId="XsdTypeName">
              <SimpleValue Type="xsd://string" Value="xsd://QND.Hyperv2012R2!QND.Hyperv.StateWidget.Template.Schema/Configuration" />
            </Binding>
          </Component>
        </Composite>
      </ComponentImplementation>
      <ComponentImplementation ID="QND.Hyperv.StateWidget.Template.CustomExpressionPageRefreshIntervalImplementation" Accessibility="Internal" TypeId="QND.Hyperv.StateWidget.Template.CustomExpressionPageRefreshInterval" Platform="Wpf, Silverlight">
        <Composite>
          <Component TypeId="Visualization!Microsoft.SystemCenter.Visualization.WizardRegularPage">
            <Binding PropertyId="StepId">
              <SimpleValue Type="xsd://string" Value="Refresh Interval" />
            </Binding>
            <Binding PropertyId="Title">
              <SimpleValue Type="xsd://string" Value="Enter a Refresh Interval (in seconds)" />
            </Binding>
            <Binding PropertyId="FinishButtonText">
              <SimpleValue Type="xsd://string" Value="Finish" />
            </Binding>
            <Binding PropertyId="Content">
              <Component TypeId="Visualization!Microsoft.SystemCenter.Visualization.LayoutGrid">
                <Binding PropertyId="RowCollection">
                  <Component TypeId="Visualization!Microsoft.SystemCenter.Visualization.LayoutGridRow">
                    <Binding PropertyId="Height">
                      <SimpleValue Type="xsd://string" Value="Auto" />
                    </Binding>
                  </Component>
                </Binding>
                <Binding PropertyId="ColumnCollection">
                  <Component TypeId="Visualization!Microsoft.SystemCenter.Visualization.LayoutGridColumn">
                    <Binding PropertyId="Width">
                      <SimpleValue Type="xsd://string" Value="*" />
                    </Binding>
                  </Component>
                </Binding>
                <Binding PropertyId="CellCollection">
                  <Component TypeId="Visualization!Microsoft.SystemCenter.Visualization.LayoutGridCell">
                    <Binding PropertyId="RowId">
                      <SimpleValue Type="xsd://string" Value="0" />
                    </Binding>
                    <Binding PropertyId="ColumnId">
                      <SimpleValue Type="xsd://string" Value="0" />
                    </Binding>
                    <Binding PropertyId="Content">
                      <Component TypeId="QND.Hyperv.StateWidget.Template.LabelledTextBox">
                        <Binding PropertyId="Label">
                          <SimpleValue Type="xsd://string" Value="Enter a numerical value for the refresh internval of the widget in seconds. Default is at 300 seconds." />
                        </Binding>
                        <Binding PropertyId="MultilineTextBox">
                          <SimpleValue Type="xsd://string" Value="False" />
                        </Binding>
                        <Binding PropertyId="Text">
                          <Reference>$Property/AutoRefreshTickInterval$</Reference>
                        </Binding>
                      </Component>
                    </Binding>
                  </Component>
                </Binding>
              </Component>
            </Binding>
          </Component>
        </Composite>
      </ComponentImplementation>
      <ComponentImplementation ID="QND.Hyperv.StateWidget.Template.CustomExpressionPageScriptImplementation" Accessibility="Internal" TypeId="QND.Hyperv.StateWidget.Template.CustomExpressionPageScript" Platform="Wpf, Silverlight">
        <Composite>
          <Component TypeId="Visualization!Microsoft.SystemCenter.Visualization.WizardRegularPage">
            <Binding PropertyId="StepId">
              <SimpleValue Type="xsd://string" Value="PowerShell Script" />
            </Binding>
            <Binding PropertyId="Title">
              <SimpleValue Type="xsd://string" Value="PowerShell Script" />
            </Binding>
            <Binding PropertyId="FinishButtonText">
              <SimpleValue Type="xsd://string" Value="Finish" />
            </Binding>
            <Binding PropertyId="Content">
              <Component TypeId="Visualization!Microsoft.SystemCenter.Visualization.LayoutGrid">
                <Binding PropertyId="RowCollection">
                  <Component TypeId="Visualization!Microsoft.SystemCenter.Visualization.LayoutGridRow">
                    <Binding PropertyId="Height">
                      <SimpleValue Type="xsd://string" Value="*" />
                    </Binding>
                  </Component>
                </Binding>
                <Binding PropertyId="ColumnCollection">
                  <Component TypeId="Visualization!Microsoft.SystemCenter.Visualization.LayoutGridColumn">
                    <Binding PropertyId="Width">
                      <SimpleValue Type="xsd://string" Value="*" />
                    </Binding>
                  </Component>
                </Binding>
                <Binding PropertyId="CellCollection">
                  <Component TypeId="Visualization!Microsoft.SystemCenter.Visualization.LayoutGridCell">
                    <Binding PropertyId="RowId">
                      <SimpleValue Type="xsd://string" Value="0" />
                    </Binding>
                    <Binding PropertyId="ColumnId">
                      <SimpleValue Type="xsd://string" Value="0" />
                    </Binding>
                    <Binding PropertyId="Content">
                      <Component TypeId="QND.Hyperv.StateWidget.Template.LabelledTextBox">
                        <Binding PropertyId="Label">
                          <SimpleValue Type="xsd://string" Value="PowerShell Script:" />
                        </Binding>
                        <Binding PropertyId="MultilineTextBox">
                          <SimpleValue Type="xsd://string" Value="True" />
                        </Binding>
                        <Binding PropertyId="Text">
                          <Reference>$Property/Script$</Reference>
                        </Binding>
                      </Component>
                    </Binding>
                  </Component>
                </Binding>
              </Component>
            </Binding>
          </Component>
        </Composite>
      </ComponentImplementation>
      <ComponentImplementation ID="QND.Hyperv.StateWidget.Template.LabelledTextBoxImplementation" Accessibility="Internal" TypeId="QND.Hyperv.StateWidget.Template.LabelledTextBox" Platform="Wpf, Silverlight">
        <Unit>
          <ContractFactory>Microsoft.EnterpriseManagement.Monitoring.Components.UnitComponents.LabelledTextBox</ContractFactory>
        </Unit>
      </ComponentImplementation>
    </ComponentImplementations>
    <ComponentBehaviors>
      <ComponentBehavior ID="QND.Hyperv.StateWidget.Template.TemplateBehavior" Accessibility="Internal" BehaviorTypeId="Visualization!Microsoft.SystemCenter.Visualization.PersonalizeBehavior" ComponentTypeId="QND.Hyperv.StateWidget.Template">
        <Bindings>
          <Binding PropertyId="ConfigurationDataType">
            <SimpleValue Type="xsd://string" Value="xsd://QND.Hyperv2012R2!QND.Hyperv.StateWidget.Template.Schema/Configuration" />
          </Binding>
          <Binding PropertyId="PersonalizationDataType">
            <SimpleValue Type="xsd://string" Value="xsd://QND.Hyperv2012R2!QND.Hyperv.StateWidget.Template.Schema/Personalization" />
          </Binding>
          <Binding PropertyId="EnableImplicitPersonalization">
            <SimpleValue Type="xsd://boolean" Value="True" />
          </Binding>
        </Bindings>
      </ComponentBehavior>
    </ComponentBehaviors>
  </Presentation>
  <LanguagePacks>
    <LanguagePack ID="ENU" IsDefault="true">
      <DisplayStrings>
        <DisplayString ElementID="QND.Hyperv2012R2.VM.Current.Cluster.Node.Monitor">
          <Name>Hyper-V - VM Current Cluster Node Monitor</Name>
          <Description>This monitor checks if virtual machines are hosted by one of their preferred hosts</Description>
        </DisplayString>
        <DisplayString ElementID="QND.Hyperv2012R2.VM.Current.Cluster.Node.Monitor" SubElementID="ERROR">
          <Name>ERROR</Name>
        </DisplayString>
        <DisplayString ElementID="QND.Hyperv2012R2.VM.Current.Cluster.Node.Monitor" SubElementID="OK">
          <Name>OK</Name>
        </DisplayString>
        <DisplayString ElementID="QND.Hyperv2012R2.VM.Current.Cluster.Node.Monitor.AlertMessage">
          <Name>Hyper-V - Virtual Machine current hosted on non-preferred Hyper-V cluster node</Name>
          <Description>
            The Follwoing virtual machines are not currently hosted by the preferred host:
            {0}
          </Description>
        </DisplayString>
        <DisplayString ElementID="QND.Hyperv2012R2.VMConnect.ConsoleTask">
          <Name>Hyper-V - Connect VM</Name>
        </DisplayString>
        <DisplayString ElementID="QND.Hyperv2012R2.VM.Current.Cluster.Node.Monitor.Check.Cluster.State.Diagnostic">
          <Name>Check Cluster State Diagnostic Task</Name>
        </DisplayString>
        <DisplayString ElementID="QND.Hyperv.2012R2.VirtualMachineDiscovery">
          <Name>Hyper-V 2012R2 - Dynamic VM Discovery</Name>
        </DisplayString>
        <DisplayString ElementID="QND.Hyperv.2012R2.TranslateNewPartitionEvent.Rule">
          <Name>Hyper-V 2012R2 - Dynamic VM Discovery New Partition Hook</Name>
        </DisplayString>
        <DisplayString ElementID="QND.Hyperv.2012R2.VMDynamicDiscoveryTrigger.Rule">
          <Name>Hyper-V 2012R2 - Dynamic VM Discovery Time hook</Name>
        </DisplayString>
        <DisplayString ElementID="QND.Hyperv.2012R2.DisableStdVMDiscovery.Override">
          <Name>Hyper-V 2012R2 - Disable Standard VM Discovery</Name>
        </DisplayString>
        <DisplayString ElementID="QND.Hyperv.2012R2.WhosMonitoringMe">
          <Name>Hyper-V 2012R2 - Who is monitoring me fro debugging</Name>
        </DisplayString>
        <DisplayString ElementID="QND.Hyperv.2012R2.UnixVM.Group">
          <Name>Hyper-V - Linux Virtual Machines</Name>
        </DisplayString>
        <DisplayString ElementID="QND.Hyperv.2012R2.UnixVM.Group.Discovery">
          <Name>Hyper-V - Linux Virtual Machines group discovery</Name>
        </DisplayString>
        <DisplayString ElementID="QND.HyperV.Server.Computer.And.Health.Service.Watcher.Group">
          <Name>Hyper-V Server Computer and Health Service Watcher Group</Name>
        </DisplayString>
        <DisplayString ElementID="QND.HyperV.Server.Computer.And.Health.Service.Watcher.Group.Discovery">
          <Name>Hyper-V Server Computer and Health Service Watcher Group Discovery</Name>
        </DisplayString>
        <DisplayString ElementID="QND.HyperV.Server.Role.Group">
          <Name>Hyper-V Server Group</Name>
        </DisplayString>
        <DisplayString ElementID="QND.HyperV.Server.Role.Group.Discovery">
          <Name>Hyper-V Server Group Discovery</Name>
        </DisplayString>
        <DisplayString ElementID="QND.HyperV.2012R2.WinVMs.Group">
          <Name>Hyper-V - Windows Virtual Machines</Name>
        </DisplayString>
        <DisplayString ElementID="QND.HyperV.2012R2.WinVMs.Group.Discovery">
          <Name>Hyper-V - Windows Virtual Machines Group Discovery</Name>
        </DisplayString>
        <DisplayString ElementID="QND.Hyperv2012R2.HyperV.Cluster.ComputerRole">
          <Name>Hyper-V 2012 R2 Cluster</Name>
          <Description></Description>
        </DisplayString>
        <DisplayString ElementID="QND.Hyperv2012R2.HyperV.Cluster.ComputerRole" SubElementID="ClusterName">
          <Name>Cluster Name</Name>
          <Description></Description>
        </DisplayString>
        <DisplayString ElementID="QND.Hyperv2012R2.HyperV.Cluster.ComputerRole.Discovery">
          <Name>Hyper-V 2012 R2 Cluster Discovery</Name>
          <Description>Script discovery for Hyper-V Cluster</Description>
        </DisplayString>
        <DisplayString ElementID="QND.Hyperv2012R2.HypervisorVirtualProcessors.Rule">
          <Name>Hyper-V 2012 R2 - Virtual Processors</Name>
          <Description>Hypervisor Virtual Processors Count</Description>
        </DisplayString>
        <DisplayString ElementID="QND.Hyperv2012R2.HypervisorTotalCPUTime.Rule">
          <Name>Hyper-V 2012 R2 - Total CPU Usage</Name>
          <Description>Totale CPU Usage for both parten and child partitions.</Description>
        </DisplayString>
        <DisplayString ElementID="QND.Hyperv2012R2.HypervisorAvgMemPressure.Rule">
          <Name>Hyper-V 2012 R2 - Average Memory Pressure</Name>
          <Description>Average dynamic memoery pressure</Description>
        </DisplayString>
        <DisplayString ElementID="QND.Hyperv2012R2.HypervisorLogicalProcessors.Rule">
          <Name>Hyper-V 2012 R2 - Logical Processors</Name>
          <Description>Hypervisor Logical processors Count</Description>
        </DisplayString>
        <DisplayString ElementID="QND.Hyperv2012R2.HypervisorPartitions.Rule">
          <Name>Hyper-V 2012 R2 - Partitions</Name>
          <Description>Hypervisor Partitions Count</Description>
        </DisplayString>
        <DisplayString ElementID="QND.Hyperv2012R2.HypervisorRDMActiveConnections.Rule">
          <Name>Hyper V - RDMA Active Connections</Name>
          <Description>Collects RDMA Active Connections counters for pNIC</Description>
        </DisplayString>
        <DisplayString ElementID="QND.Hyperv2012R2.HypervisorRDMConnectionErrors.Rule">
          <Name>Hyper V - RDMA Connection Errors</Name>
          <Description>Collects RDMA Connection Erros counters for pNIC</Description>
        </DisplayString>
        <DisplayString ElementID="QND.Hyperv2012R2.Move.VMs.To.Preferred.Nodes.Recovery">
          <Name>Move VMs To Preferred Nodes Recovery</Name>
        </DisplayString>
        <DisplayString ElementID="QND.Hyperv2012R2.SnapshotAgeCollect.Rule">
          <Name>Hyper-V - VM Snapshot Age</Name>
          <Description>Collects oldest snapshot age for VMs</Description>
        </DisplayString>
        <DisplayString ElementID="QND.Hyperv2012R2.FragmentationCollection.Rule">
          <Name>Hyper-V - VHD Fragmentation</Name>
          <Description>Collects how much fragmentet VHD are in %</Description>
        </DisplayString>
        <DisplayString ElementID="QND.Hyperv.2012R2.VMMemoryStatus">
          <Name>VM Dynamic Memory Status</Name>
        </DisplayString>
        <DisplayString ElementID="QND.Hyperv.2012R2.VMMemoryStatus.AlertMessage">
          <Name>Hyper-V - Dynamic Memory pressure</Name>
          <Description>{0} is under memory pressure. Performance can be impacted.
          Current Memory Status:{1}
          Current Pressure Level:{2}
        </Description>
        </DisplayString>
        <DisplayString ElementID="QND.Hyperv2012R2.VMName.Matches.ComputerName.Monitor">
          <Name>Hyper-V - VM Name Matches Computer Name Monitor</Name>
          <Description>This montior compares the Hyper-V virtual machine name with the VM's computer name. It raises alerts when the virtual machine name does not match the VM's computer name.</Description>
        </DisplayString>
        <DisplayString ElementID="QND.Hyperv2012R2.VMName.Matches.ComputerName.Monitor.AlertMessage">
          <Name>Hyper-V - Virtual machine name does not match the VM's computer name</Name>
          <Description>
            The Hyper-V virtual machine name for {1} does not matche the VM's computer name.

            VM Computer FQDN: {0}
            VM Computer NetBIOS Name: {2}
          </Description>
        </DisplayString>
        <DisplayString ElementID="QND.Hyperv.2012R2.VMUptimePerc.Rule">
          <Name>Hyper-V - Collect VM Uptime percentage</Name>
        </DisplayString>
        <DisplayString ElementID="QND.Hyperv.2012R2.VMCPUUsage.Rule">
          <Name>Hyper-V - Collect VM Measured CPU Usage</Name>
        </DisplayString>
        <DisplayString ElementID="QND.Hyperv.2012R2.VMAvgMemoryUsage.Rule">
          <Name>Hyper-V - Collect VM Measured Average Memory usage (MB)</Name>
        </DisplayString>
        <DisplayString ElementID="QND.Hyperv.2012R2.VMMaxMemoryUsage.Rule">
          <Name>Hyper-V - Collect VM Measured Maximum Memory Usage (MB)</Name>
        </DisplayString>
        <DisplayString ElementID="QND.Hyperv.2012R2.VMIOPS.Rule">
          <Name>Hyper-V - Collect VM Measured Normalized IOPS</Name>
        </DisplayString>
        <DisplayString ElementID="QND.Hyperv.2012R2.VMDiskLatency.Rule">
          <Name>Hyper-V - Collect VM Measured Average Disk Latency</Name>
        </DisplayString>
        <DisplayString ElementID="QND.Hyperv.2012R2.VMDiskDataReadPerSec.Rule">
          <Name>Hyper-V - Collect VM Measured Disk Data Read per seconds (MB/sec) Delta mode</Name>
        </DisplayString>
        <DisplayString ElementID="QND.Hyperv.2012R2.VMDiskDataWrittenPerSec.Rule">
          <Name>Hyper-V - Collect VM Measured Disk Data Written per seconds (MB/sec) Delta mode</Name>
        </DisplayString>
        <DisplayString ElementID="QND.Hyperv.2012R2.VHDIOPS.Rule">
          <Name>Hyper-V - Collect VHD Measured Normalized IOPS</Name>
        </DisplayString>
        <DisplayString ElementID="QND.Hyperv.2012R2.VHDAvgLatency.Rule">
          <Name>Hyper-V - Collect VHD Measured Average Disk Latency</Name>
        </DisplayString>
        <DisplayString ElementID="QND.Hyperv2012R2">
          <Name>QND Hyper-V 2012 R2 VM Monitoring</Name>
          <Description>A community MP for adavnced VM monitoring on Hyper-V 2012 R2</Description>
        </DisplayString>
        <DisplayString ElementID="QND.Hyperv.2012R2.VMActions.WAT" SubElementID="TraceLevel">
          <Name>Trace Level (1-5)</Name>
        </DisplayString>
        <DisplayString ElementID="QND.Hyperv.2012R2.VMStop.WAT" SubElementID="TraceLevel">
          <Name>Trace Level (1-5)</Name>
        </DisplayString>
        <DisplayString ElementID="QND.Hyperv.2012R2.VMStop.WAT" SubElementID="Param1">
          <Name>Mode (Force|Ignore)</Name>
        </DisplayString>
        <DisplayString ElementID="QND.Hyperv.2012R2.VMMigrate.WAT" SubElementID="TraceLevel">
          <Name>Trace Level (1-5)</Name>
        </DisplayString>
        <DisplayString ElementID="QND.Hyperv.2012R2.VMMigrate.WAT" SubElementID="Param1">
          <Name>Node (best|node name)</Name>
        </DisplayString>
        <DisplayString ElementID="QND.Hyperv.2012R2.VMCheckpoint.WAT" SubElementID="TraceLevel">
          <Name>Trace Level (1-5)</Name>
        </DisplayString>
        <DisplayString ElementID="QND.Hyperv.2012R2.VMCheckpoint.WAT" SubElementID="Param1">
          <Name>Checkpoint Name</Name>
        </DisplayString>
        <DisplayString ElementID="QND.Hyperv2012R2.VMReplica.Status">
          <Name>Replica Status</Name>
        </DisplayString>
        <DisplayString ElementID="QND.Hyperv2012R2.VMReplica.Status.AlertMessage">
          <Name>Hyper-V - Replica has issues</Name>
          <Description>Replica State is:{0}. Replica Health is:{1}. Last replica age in hours is:{2}</Description>
        </DisplayString>
        <DisplayString ElementID="QND.Hyperv2012R2.VMSnapshotAge.Status">
          <Name>Snapshots age</Name>
        </DisplayString>
        <DisplayString ElementID="QND.Hyperv2012R2.VMSnapshotAge.AlertMessage">
          <Name>Hyper-V - Old snapshot is present</Name>
          <Description>Oldest snapshot age in hours is:{0}. 
          History:
          {1}</Description>
        </DisplayString>
        <DisplayString ElementID="QND.Hyperv2012R2.VMISStatus">
          <Name>Integration Services Version</Name>
        </DisplayString>
        <DisplayString ElementID="QND.Hyperv2012R2.VMISStatus.AlertMessage">
          <Name>Hyper-V - Integration Services are out dated</Name>
          <Description>
            Integration Services Version is: {0}.
            Integration Services reported status is: {1}.
          </Description>
        </DisplayString>
        <DisplayString ElementID="QND.Hyperv2012R2.GetReplicaStatus.Diagnostic">
          <Name>Get VM Replica Status</Name>
        </DisplayString>
        <DisplayString ElementID="QND.Hyperv.2012R2.DisableISCheckForUnix.override">
          <Name>HyperV - Disables Integration Services version monitoring for *nix VM</Name>
        </DisplayString>
        <DisplayString ElementID="QND.Hyperv.2012R2.VirtualMachine.State.View">
          <Name>Hyper-V 2012 R2 Virtual Machines (QND)</Name>
        </DisplayString>
        <DisplayString ElementID="QND.Hyperv.2012R2.VirtualDrive.State.View">
          <Name>Hyper-V 2012 R2 Virtual Drives (QND)</Name>
        </DisplayString>
        <DisplayString ElementID="QND.Hyperv.2012R2.VirtualNetworkAdapter.State.View">
          <Name>Hyper-V 2012 R2 Virtual NIC (QND)</Name>
        </DisplayString>
        <DisplayString ElementID="QND.Hyperv.2012R2.VirtualMachine.Performance.View">
          <Name>Hyper-V 2012 R2 Virtual Machines Performance (QND)</Name>
        </DisplayString>
        <DisplayString ElementID="QND.Hyperv.2012R2.VirtualDrive.Performance.View">
          <Name>Hyper-V 2012 R2 Virtual Drives Performance (QND)</Name>
        </DisplayString>
        <DisplayString ElementID="QND.Hyperv.2012R2.VirtualNetworkAdapter.Performance.View">
          <Name>Hyper-V 2012 R2 Virtual NIC Performance (QND)</Name>
        </DisplayString>
        <DisplayString ElementID="QND.Hyperv2012R2.ResumeReplica">
          <Name>Hyper-v - Resume VM Replica</Name>
          <Description></Description>
        </DisplayString>
        <DisplayString ElementID="QND.Hyperv.2012R2.ReplicaVM">
          <Name>Hyper-V 2012 R2 - Replica Virtual Machine</Name>
          <Description></Description>
        </DisplayString>
        <DisplayString ElementID="QND.Hyperv.2012R2.ReplicaVM" SubElementID="PrimaryServerName">
          <Name>Primary Server Name</Name>
          <Description></Description>
        </DisplayString>
        <DisplayString ElementID="QND.Hyperv.2012R2.ReplicaVM" SubElementID="ReplicaServerName">
          <Name>Replica Server Name</Name>
          <Description></Description>
        </DisplayString>
        <DisplayString ElementID="QND.Hyperv.2012R2.ReplicaVM" SubElementID="RelationshipType">
          <Name>Relationship</Name>
          <Description></Description>
        </DisplayString>
        <DisplayString ElementID="QND.Hyperv.2012R2.ReplicaVM" SubElementID="FrequencySec">
          <Name>Replica Frequency sec</Name>
          <Description></Description>
        </DisplayString>
        <DisplayString ElementID="QND.Hyperv.2012R2.ReplicaVM" SubElementID="ReplicationMode">
          <Name>Replication mode</Name>
          <Description></Description>
        </DisplayString>
        <DisplayString ElementID="QND.Hyperv.2012R2.ReplicaVM.Discovery">
          <Name>Hyper-V 2012 R2 - Discovers VM Primary Replica</Name>
          <Description></Description>
        </DisplayString>
        <DisplayString ElementID="QND.Hyperv.2012R2.VHDFragmentation.Monitor.AlertMessage">
          <Name>Hyper-V - VHD fragmentation level high</Name>
          <Description>VHD Fragmentation is {0}. Higher than the threshold set.</Description>
        </DisplayString>
        <DisplayString ElementID="QND.Hyperv.2012R2.VHDFragmentation.Monitor">
          <Name>Fragmentation level</Name>
        </DisplayString>
        <DisplayString ElementID="QND.Hyperv.2012R2.VM">
          <Name>Hyper-V 2012R2 - Virtual Machine (QND)</Name>
        </DisplayString>
        <DisplayString ElementID="QND.Hyperv.2012R2.VM" SubElementID="VirtualMachineId">
          <Name>VM Id</Name>
        </DisplayString>
        <DisplayString ElementID="QND.Hyperv.2012R2.VM" SubElementID="VirtualMachineName">
          <Name>VM Name</Name>
        </DisplayString>
        <DisplayString ElementID="QND.Hyperv.2012R2.VM" SubElementID="HostName">
          <Name>Hyper-V Host Name</Name>
        </DisplayString>
        <DisplayString ElementID="QND.Hyperv.2012R2.VM" SubElementID="VMComputerName">
          <Name>VM Guest Computer Name</Name>
        </DisplayString>
        <DisplayString ElementID="QND.Hyperv.2012R2.VM" SubElementID="ISVersion">
          <Name>Integration Services Version</Name>
        </DisplayString>
        <DisplayString ElementID="QND.Hyperv.2012R2.VM" SubElementID="RMEnabled">
          <Name>Resource Metering Enabled</Name>
        </DisplayString>
        <DisplayString ElementID="QND.Hyperv.2012R2.VM" SubElementID="VMGeneration">
          <Name>VM Generation</Name>
        </DisplayString>
        <DisplayString ElementID="QND.Hyperv.2012R2.VM" SubElementID="HA">
          <Name>Highly Available</Name>
        </DisplayString>
        <DisplayString ElementID="QND.Hyperv.2012R2.VM" SubElementID="MinMemory">
          <Name>Min Memory (MB)</Name>
        </DisplayString>
        <DisplayString ElementID="QND.Hyperv.2012R2.VM" SubElementID="MaxMemory">
          <Name>Max Memoery (MB)</Name>
        </DisplayString>
        <DisplayString ElementID="QND.Hyperv.2012R2.VM" SubElementID="StartMemory">
          <Name>Startup Memory (MB)</Name>
        </DisplayString>
        <DisplayString ElementID="QND.Hyperv.2012R2.VM" SubElementID="OSPlatformId">
          <Name>OS Platform Id</Name>
        </DisplayString>
        <DisplayString ElementID="QND.Hyperv.2012R2.VM" SubElementID="OSFamily">
          <Name>OS Family</Name>
        </DisplayString>
        <DisplayString ElementID="QND.Hyperv.2012R2.VM" SubElementID="OSName">
          <Name>OS Name</Name>
        </DisplayString>
        <DisplayString ElementID="QND.Hyperv.2012R2.VM" SubElementID="OSVersion">
          <Name>OS Version</Name>
        </DisplayString>
        <DisplayString ElementID="QND.Hyperv.2012R2.VM" SubElementID="HVFarm">
          <Name>Hyper-V Farm</Name>
        </DisplayString>
        <DisplayString ElementID="QND.HyperV.VMHardwareComponent">
          <Name>Hyper-V - VM Hardware Component (QND)</Name>
        </DisplayString>
        <DisplayString ElementID="QND.HyperV.VMHardwareComponent" SubElementID="DeviceId">
          <Name>Device ID</Name>
        </DisplayString>
        <DisplayString ElementID="QND.HyperV.VMHardwareComponent" SubElementID="Name">
          <Name>Name</Name>
        </DisplayString>
        <DisplayString ElementID="QND.HyperV.VMHardwareComponent" SubElementID="PerfInstance">
          <Name>Performance Instance Name</Name>
        </DisplayString>
        <DisplayString ElementID="QND.HyperV.2012R2.VirtualDrive">
          <Name>Hyper-V 2012R2 - VM Disk (QND)</Name>
        </DisplayString>
        <DisplayString ElementID="QND.HyperV.2012R2.VirtualDrive" SubElementID="ConnectedControllerName">
          <Name>Controller</Name>
        </DisplayString>
        <DisplayString ElementID="QND.HyperV.2012R2.VirtualDrive" SubElementID="ImageFile">
          <Name>File</Name>
        </DisplayString>
        <DisplayString ElementID="QND.HyperV.2012R2.VirtualDrive" SubElementID="VHDType">
          <Name>VHD Type</Name>
        </DisplayString>
        <DisplayString ElementID="QND.HyperV.2012R2.VirtualDrive" SubElementID="VHDFormat">
          <Name>VHD Format</Name>
        </DisplayString>
        <DisplayString ElementID="QND.HyperV.2012R2.VirtualDrive" SubElementID="MaxSizeGB">
          <Name>Max Size GB</Name>
        </DisplayString>
        <DisplayString ElementID="QND.HyperV.2012R2.VirtualNetworkAdapter">
          <Name>Hyper-V 2012R2 - VM NIC (QND)</Name>
        </DisplayString>
        <DisplayString ElementID="QND.HyperV.2012R2.VirtualNetworkAdapter" SubElementID="SwitchId">
          <Name>Virtual Switch Id</Name>
        </DisplayString>
        <DisplayString ElementID="QND.HyperV.2012R2.VirtualNetworkAdapter" SubElementID="SwitchName">
          <Name>Virtual Switch Name</Name>
        </DisplayString>
        <DisplayString ElementID="QND.Windows.HyperV.2012.R2.RemoteFxCapableMonitor.Alert">
          <Name>GPUs installed in this server are not RemoteFX capable. Virtual machines that are configured to use the GPU will not start.</Name>
          <Description>GPUs installed in this server are not RemoteFX capable. Virtual machines that are configured to use the GPU will not start.</Description>
        </DisplayString>
        <DisplayString ElementID="QND.Windows.HyperV.2012.R2.HeterogeneousGPUMonitor.Alert">
          <Name>GPUs installed in the server are not of the same make and model.</Name>
          <Description>The server currently hosts GPUs that are not of the same make and model. This configuration is not valid for RemoteFX. RemoteFX requires that GPUs installed in the server must be of the same make and model.</Description>
        </DisplayString>
        <DisplayString ElementID="QND.Windows.HyperV.2012.R2.VirtualDrive.FreeSpaceMonitor">
          <Name>Free Space</Name>
        </DisplayString>
        <DisplayString ElementID="QND.Windows.HyperV.2012.R2.RemoteFxCapableMonitor">
          <Name>RemoteFX Capable</Name>
        </DisplayString>
        <DisplayString ElementID="QND.Windows.HyperV.2012.R2.HeterogeneousGPUMonitor">
          <Name>Hetherogeneous GPU Capable</Name>
        </DisplayString>
        <DisplayString ElementID="QND.Hyperv.2012R2.VDiskToVM.DepMonitor">
          <Name>Virtual Disks</Name>
        </DisplayString>
        <DisplayString ElementID="QND.Hyperv2012R2.VHDWriteBytesSec.Rule">
          <Name>Hyper-V - VHD Write Bytes per sec</Name>
          <Description>Collects Bytes Written Per second</Description>
        </DisplayString>
        <DisplayString ElementID="QND.Hyperv2012R2.VMMemoryPressure.Rule">
          <Name>Hyper-V - VM Memory Average Pressure</Name>
          <Description>Collects Dyanmic memory average pressure</Description>
        </DisplayString>
        <DisplayString ElementID="QND.Hyperv2012R2.vNicBytesRcvPerSec.Rule">
          <Name>Hyper-V - vNIC Bytes Received Per Second</Name>
          <Description>Collects Bytes Received Per second</Description>
        </DisplayString>
        <DisplayString ElementID="QND.Hyperv2012R2.VHDNormIOPS.Rule">
          <Name>Hyper-V - VHD Normalized IOps</Name>
          <Description>Collects Normalized IOps</Description>
        </DisplayString>
        <DisplayString ElementID="QND.Hyperv2012R2.VHDReadBytesSec.Rule">
          <Name>Hyper-V - VHD Read Bytes per sec</Name>
          <Description>Collects Bytes Read Per second</Description>
        </DisplayString>
        <DisplayString ElementID="QND.Hyperv2012R2.vCoreTotalRunTime.Rule">
          <Name>Hyper-V - vCore % runtime</Name>
          <Description>Collects vCore Usage Percentage</Description>
        </DisplayString>
        <DisplayString ElementID="QND.Hyperv2012R2.VMMemory.Rule">
          <Name>Hyper-V - VM Memory (MB)</Name>
          <Description>Collects assigned memory in MB</Description>
        </DisplayString>
        <DisplayString ElementID="QND.Hyperv2012R2.vNicBytesSntPerSec.Rule">
          <Name>Hyper-V - vNIC Bytes Sent Per Second</Name>
          <Description>Collects Bytes Received Per second</Description>
        </DisplayString>
        <DisplayString ElementID="QND.Hyperv2012R2.VM.TotalSize.Perf.Collection.Rule">
          <Name>Hyper-V - VM Total Size Performance Collection Rule</Name>
        </DisplayString>
        <DisplayString ElementID="QND.Hyperv2012R2.VM.MaxSize.Perf.Collection.Rule">
          <Name>Hyper-V - VM Maximum Size Performance Collection Rule</Name>
        </DisplayString>
        <DisplayString ElementID="QND.Hyperv2012R2.VM.MinSize.Perf.Collection.Rule">
          <Name>Hyper-V - VM Minimum Size Performance Collection Rule</Name>
        </DisplayString>
        <DisplayString ElementID="QND.Hyperv2012R2.GetVMDetails.Task">
          <Name>Hyper-V - Get VM Details</Name>
          <Description>Get VM Details</Description>
        </DisplayString>
        <DisplayString ElementID="QND.Hyperv2012R2.GetVMReplicaStatus.Task">
          <Name>Hyper-V - get VM replica Status</Name>
          <Description>Get VM replica Status</Description>
        </DisplayString>
        <DisplayString ElementID="QND.Hyperv2012R2.ResumeVMReplica.Task">
          <Name>Hyper-V - Resume VM replica</Name>
          <Description>Resume VM Replica</Description>
        </DisplayString>
        <DisplayString ElementID="QND.Hyperv2012R2.SaveVM.Task">
          <Name>Hyper-V - Save VM</Name>
          <Description>Saves VM</Description>
        </DisplayString>
        <DisplayString ElementID="QND.Hyperv2012R2.PauseVM.Task">
          <Name>Hyper-V - Pause VM</Name>
          <Description>Pauses VM</Description>
        </DisplayString>
        <DisplayString ElementID="QND.Hyperv2012R2.ResumeVM.Task">
          <Name>Hyper-V - Resume VM</Name>
          <Description>Resumes a saved VM</Description>
        </DisplayString>
        <DisplayString ElementID="QND.Hyperv2012R2.ListVMCheckpoints.Task">
          <Name>Hyper-V - List VM checkpoints</Name>
          <Description>List VM checkpoints</Description>
        </DisplayString>
        <DisplayString ElementID="QND.Hyperv2012R2.PoweroffVM.Task">
          <Name>Hyper-V - Power off VM</Name>
          <Description>Powers off a VM</Description>
        </DisplayString>
        <DisplayString ElementID="QND.Hyperv2012R2.CheckpointVM.Task">
          <Name>Hyper-V - Checkpoint Create</Name>
          <Description>Checkpoint VM</Description>
        </DisplayString>
        <DisplayString ElementID="QND.Hyperv2012R2.RestartVM.Task">
          <Name>Hyper-V - Restart VM</Name>
          <Description>Restarts a VM</Description>
        </DisplayString>
        <DisplayString ElementID="QND.Hyperv2012R2.StopVM.Task">
          <Name>Hyper-V - Shutdown VM</Name>
          <Description>Shuts down VM</Description>
        </DisplayString>
        <DisplayString ElementID="QND.Hyperv2012R2.VMCheckpointRemove.Task">
          <Name>Hyper-V - Checkpoint Remove</Name>
          <Description>Remove a checkpoint from a VM</Description>
        </DisplayString>
        <DisplayString ElementID="QND.Hyperv2012R2.VMMigrate.Task">
          <Name>Hyper-V - Live Migrate VM</Name>
          <Description>Live migrates an highly available VM</Description>
        </DisplayString>
        <DisplayString ElementID="QND.Hyperv2012R2.VMCheckpointRestore.Task">
          <Name>Hyper-V - Checkpoint Restore</Name>
          <Description>Restore a checkpoint to a VM</Description>
        </DisplayString>
        <DisplayString ElementID="QND.Hyperv2012R2.StartVM.Task">
          <Name>Hyper-V - Start VM</Name>
          <Description>Starts VM</Description>
        </DisplayString>
        <DisplayString ElementID="QND.Hyperv.StateWidget.Template">
          <Name>Blue Bar Performance Widget</Name>
        </DisplayString>
        <DisplayString ElementID="QND.Hyperv.ColumnCapableStateWidgetTemplate.Folder">
          <Name>Widget</Name>
        </DisplayString>
      </DisplayStrings>
      <KnowledgeArticles>
        <KnowledgeArticle ElementID="QND.Hyperv2012R2.VM.Current.Cluster.Node.Monitor" Visible="true">
          <MamlContent>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Summary</maml:title>
              <maml:para>This Monitor checks if any virtual machines on the Hyper-V Cluster are hosted by (one of) configured preferred node.</maml:para>
            </maml:section>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Configuration</maml:title>
              <maml:para>By default, this monitor runs once a day at 1:00am to check if all virtual machines on the Hyper-V cluster are hosted by (one of) their configured preferred cluster node. If it detects there are virtual machines hosted by a non-preferred node, a recovery task will run to fail them back to (one of) preferred node after a diagnostic task detects ALL cluster nodes are up.</maml:para>
              <maml:para>The monitor and the recovery task use PowerShell scripts The PowerShell execution policy on each Hyper-V cluster node needs to be set to Unrestricted. </maml:para>
            </maml:section>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Resolutions</maml:title>
              <maml:para>The alert should be automatically closed after the recovery task has successfully moved all the virtual machines to their preferred hosts. If the alert is not closed automatically, please examine the diagnostic and recovery tasks execution results from OpsMgr Health Explorer.</maml:para>
            </maml:section>
          </MamlContent>
        </KnowledgeArticle>
        <KnowledgeArticle ElementID="QND.Hyperv2012R2.VMName.Matches.ComputerName.Monitor" Visible="true">
          <MamlContent>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Summary</maml:title>
              <maml:para>This montior compares the Hyper-V virtual machine name with the VM's computer name. It raises alerts when the virtual machine name does not match the VM's computer name.</maml:para>
            </maml:section>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Configuration</maml:title>
              <maml:para>Generally speaking, when a VM is intially built, the virtual machine name would match the computer name. However, if later on the computer name has been changed in the Operating System on the VM, it may cause duplicate records for this computer in various System Center products such as OpsMgr and ConfigMgr. This monitor is designed to detect when the computer name configured on Operating System does not match the VM name and a warning alert is generated.</maml:para>
            </maml:section>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Resolutions</maml:title>
              <maml:para>Rename the VM name to match the computer name. Review systems such as OpsMgr and ConfigMgr and remove the old obsolete agent / computer records.</maml:para>
            </maml:section>
          </MamlContent>
        </KnowledgeArticle>
        <KnowledgeArticle ElementID="QND.Hyperv.2012R2.VMMemoryStatus" Visible="true">
          <MamlContent>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Summary</maml:title>
              <maml:para>This montior monitors the amount of memory demanded by the VM vs amount of memory assigned to the VM.</maml:para>
            </maml:section>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Configuration</maml:title>
              <maml:para>This montior calcuate the VM memory pressure percentage using the formula: MemoryDemand / MemoryAssigned. An alert is generated if this figure has reached the treshold (default 105%).</maml:para>
            </maml:section>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Resolutions</maml:title>
              <maml:para>Review the dynamic memory configuration for the VM. Assign additional memory if required.</maml:para>
            </maml:section>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Additional</maml:title>
              <maml:para>
                <maml:navigationLink>
                  <maml:linkText>http://blogs.technet.com/b/haroldwong/archive/2013/03/08/hyper-v-2012-dynamic-memory-what-does-the-vm-think-it-has-versus-what-it-really-has.aspx</maml:linkText>
                  <maml:uri href="http://blogs.technet.com/b/haroldwong/archive/2013/03/08/hyper-v-2012-dynamic-memory-what-does-the-vm-think-it-has-versus-what-it-really-has.aspx" />
                </maml:navigationLink>
              </maml:para>
            </maml:section>
          </MamlContent>
        </KnowledgeArticle>
        <KnowledgeArticle ElementID="QND.Hyperv2012R2.VMReplica.Status" Visible="true">
          <MamlContent>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Summary</maml:title>
              <maml:para>This montior checks the VM replication status.</maml:para>
            </maml:section>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Configuration</maml:title>
              <maml:para>The following replication status is considered health: 'Ready for replication', 'Replicating', 'Synced replication complete', 'Recovered', 'Committed' and 'Failback complete'</maml:para>
              <maml:para>The following replication status is considered warning: 'Waiting to complete initial replication', 'Suspended', 'Waiting to start resynchronization', 'Resynchronizing', 'Resynchronization suspended' and 'Failback in progress'</maml:para>
              <maml:para>The following replication status is considered error: 'Critical'</maml:para>
            </maml:section>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Resolutions</maml:title>
              <maml:para>Please refer to the articles provided in the Additional Information section for more detailed explaination of each replication status.</maml:para>
            </maml:section>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Additional</maml:title>
              <maml:para>
                <maml:navigationLink>
                  <maml:linkText>http://blogs.technet.com/b/virtualization/archive/2012/06/15/interpreting-replication-health-part-1.aspx</maml:linkText>
                  <maml:uri href="http://blogs.technet.com/b/virtualization/archive/2012/06/15/interpreting-replication-health-part-1.aspx" />
                </maml:navigationLink>
              </maml:para>
              <maml:para>
                <maml:navigationLink>
                  <maml:linkText>http://blogs.technet.com/b/virtualization/archive/2012/06/21/interpreting-replication-health-part-2.aspx</maml:linkText>
                  <maml:uri href="http://blogs.technet.com/b/virtualization/archive/2012/06/21/interpreting-replication-health-part-2.aspx" />
                </maml:navigationLink>
              </maml:para>
            </maml:section>
          </MamlContent>
        </KnowledgeArticle>
        <KnowledgeArticle ElementID="QND.Hyperv2012R2.VMSnapshotAge.Status" Visible="true">
          <MamlContent>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Summary</maml:title>
              <maml:para>It is not recommended to snapshot production VMs. VM Snapshots also have negative impacts on VM and host performance. Instead of alerting on snapshots creation, this monitor checks the age of any snapshots and alert when the snapshot has existed for a period of time.</maml:para>
            </maml:section>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Configuration</maml:title>
              <maml:para>This monitor generates a warning alert if a snapshot age has reached 8 hours and a critical alert if the age has reached 24 hours.</maml:para>
            </maml:section>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Resolutions</maml:title>
              <maml:para>Review the snapshots and delete the if they are no longer required.</maml:para>
            </maml:section>
          </MamlContent>
        </KnowledgeArticle>
        <KnowledgeArticle ElementID="QND.Hyperv2012R2.VMISStatus" Visible="true">
          <MamlContent>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Summary</maml:title>
              <maml:para>This monitor checks if the Hyper-V Integration Service is up-to-date on the VMs.</maml:para>
            </maml:section>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Configuration</maml:title>
              <maml:para>A warning alert is raised when the Hyper-V Integration Service requires update on a VM.</maml:para>
            </maml:section>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Resolutions</maml:title>
              <maml:para>Update the Hyper-V Integration service on the VM during an appropriate outage window.</maml:para>
            </maml:section>
          </MamlContent>
        </KnowledgeArticle>
        <KnowledgeArticle ElementID="QND.Hyperv.2012R2.VHDFragmentation.Monitor" Visible="true">
          <MamlContent>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Summary</maml:title>
              <maml:para>Dynamic and differencing VHDs can be fragmented over time. This monitor checks the VHD fragmentation level. This monitor is disabled by deafult since it can be very noisy.
              VHD(x) fragmentation is related to the intenrla logical structure of the virtual disk, there are other two posssibile fragmenetations: at the hyper-v host file system level and at the guest file system level.
              </maml:para>
            </maml:section>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Configuration</maml:title>
              <maml:para>A warning alert is raised when the fragmentation level has reached the threshold of 30% and a critical alert is raised when it has reached 50%.</maml:para>
            </maml:section>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Resolutions</maml:title>
              <maml:para>The easiest way to defrag the VHD is to perform a storage migration.</maml:para>
            </maml:section>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Additional</maml:title>
              <maml:para>
              When a VHD(x) gets fragmentated the performance are affected. From first informal tests it appears that random reads are particularly affected with a penality of more than 50% in trhoughput for a 100% fragmented VHD.
            </maml:para>
              <maml:para>
                <maml:navigationLink>
                  <maml:linkText>http://blogs.msdn.com/b/virtual_pc_guy/archive/2015/03/04/checking-and-correcting-virtual-hard-disk-fragmentation.aspx</maml:linkText>
                  <maml:uri href="http://blogs.msdn.com/b/virtual_pc_guy/archive/2015/03/04/checking-and-correcting-virtual-hard-disk-fragmentation.aspx" />
                </maml:navigationLink>
              </maml:para>
            </maml:section>
          </MamlContent>
        </KnowledgeArticle>
        <KnowledgeArticle ElementID="QND.Windows.HyperV.2012.R2.VirtualDrive.FreeSpaceMonitor" Visible="true">
          <MamlContent>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Summary</maml:title>
              <maml:para>This monitor checks if there are enough free space on the virtual hard disk.</maml:para>
            </maml:section>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Configuration</maml:title>
              <maml:para>This monitor generates a warning alert when the VHD has less than 2GB of free space, and a critical alert when the free space is below 200MB.</maml:para>
            </maml:section>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Resolutions</maml:title>
              <maml:para>Increase the VHD size or free some space.</maml:para>
            </maml:section>
          </MamlContent>
        </KnowledgeArticle>
        <KnowledgeArticle ElementID="QND.Windows.HyperV.2012.R2.RemoteFxCapableMonitor" Visible="true">
          <MamlContent>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Summary</maml:title>
              <maml:para>This monitor checks if the VM has RemoteFX enabled and if the GPUs installed on this server are RemoteFX capable.</maml:para>
            </maml:section>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Configuration</maml:title>
              <maml:para>Alert is raised when the VM has RemoteFX enabled but the GPU installed on the Hyper-V host are not RemoteFX capable.</maml:para>
            </maml:section>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Resolutions</maml:title>
              <maml:para>Disable RemoteFX for the VM or replace the GPUs on the Hyper-V host.</maml:para>
            </maml:section>
          </MamlContent>
        </KnowledgeArticle>
        <KnowledgeArticle ElementID="QND.Windows.HyperV.2012.R2.HeterogeneousGPUMonitor" Visible="true">
          <MamlContent>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Summary</maml:title>
              <maml:para>This monitor checks if the VM has RemoteFX enabled and if the GPUs installed on this server are the same make and model.</maml:para>
            </maml:section>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Configuration</maml:title>
              <maml:para>Alert is raised when the VM has RemoteFX enabled but the GPU installed on the Hyper-V host are not the same make and model.</maml:para>
            </maml:section>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Resolutions</maml:title>
              <maml:para>Disable RemoteFX for the VM or replace the GPUs on the Hyper-V host.</maml:para>
            </maml:section>
          </MamlContent>
        </KnowledgeArticle>
      </KnowledgeArticles>
    </LanguagePack>
  </LanguagePacks>
  <Resources>
    <Assembly ID="Res.QND.Hyperv2012R2.VMConnect.ConsoleTask" Accessibility="Public" FileName="QND.Hyperv2012R2.VMConnect.ConsoleTask" HasNullStream="true" QualifiedName="QND.Hyperv2012R2.VMConnect.ConsoleTask" />
  </Resources>
</ManagementPack>